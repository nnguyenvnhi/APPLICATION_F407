
APPLICATION_F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08060000  08060000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e48  08060188  08060188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08062fd0  08062fd0  00012fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08062fec  08062fec  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08062fec  08062fec  00012fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08062ff4  08062ff4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08062ff4  08062ff4  00012ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08062ff8  08062ff8  00012ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08062ffc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000090  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000009c  2000009c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a5c4  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b34  00000000  00000000  0002a600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007f8  00000000  00000000  0002c138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000760  00000000  00000000  0002c930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ff5a  00000000  00000000  0002d090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009b51  00000000  00000000  0004cfea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c20ec  00000000  00000000  00056b3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00118c27  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001f90  00000000  00000000  00118c7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08060188 <__do_global_dtors_aux>:
 8060188:	b510      	push	{r4, lr}
 806018a:	4c05      	ldr	r4, [pc, #20]	; (80601a0 <__do_global_dtors_aux+0x18>)
 806018c:	7823      	ldrb	r3, [r4, #0]
 806018e:	b933      	cbnz	r3, 806019e <__do_global_dtors_aux+0x16>
 8060190:	4b04      	ldr	r3, [pc, #16]	; (80601a4 <__do_global_dtors_aux+0x1c>)
 8060192:	b113      	cbz	r3, 806019a <__do_global_dtors_aux+0x12>
 8060194:	4804      	ldr	r0, [pc, #16]	; (80601a8 <__do_global_dtors_aux+0x20>)
 8060196:	f3af 8000 	nop.w
 806019a:	2301      	movs	r3, #1
 806019c:	7023      	strb	r3, [r4, #0]
 806019e:	bd10      	pop	{r4, pc}
 80601a0:	2000000c 	.word	0x2000000c
 80601a4:	00000000 	.word	0x00000000
 80601a8:	08062fb8 	.word	0x08062fb8

080601ac <frame_dummy>:
 80601ac:	b508      	push	{r3, lr}
 80601ae:	4b03      	ldr	r3, [pc, #12]	; (80601bc <frame_dummy+0x10>)
 80601b0:	b11b      	cbz	r3, 80601ba <frame_dummy+0xe>
 80601b2:	4903      	ldr	r1, [pc, #12]	; (80601c0 <frame_dummy+0x14>)
 80601b4:	4803      	ldr	r0, [pc, #12]	; (80601c4 <frame_dummy+0x18>)
 80601b6:	f3af 8000 	nop.w
 80601ba:	bd08      	pop	{r3, pc}
 80601bc:	00000000 	.word	0x00000000
 80601c0:	20000010 	.word	0x20000010
 80601c4:	08062fb8 	.word	0x08062fb8

080601c8 <__aeabi_uldivmod>:
 80601c8:	b953      	cbnz	r3, 80601e0 <__aeabi_uldivmod+0x18>
 80601ca:	b94a      	cbnz	r2, 80601e0 <__aeabi_uldivmod+0x18>
 80601cc:	2900      	cmp	r1, #0
 80601ce:	bf08      	it	eq
 80601d0:	2800      	cmpeq	r0, #0
 80601d2:	bf1c      	itt	ne
 80601d4:	f04f 31ff 	movne.w	r1, #4294967295
 80601d8:	f04f 30ff 	movne.w	r0, #4294967295
 80601dc:	f000 b96e 	b.w	80604bc <__aeabi_idiv0>
 80601e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80601e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80601e8:	f000 f806 	bl	80601f8 <__udivmoddi4>
 80601ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80601f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80601f4:	b004      	add	sp, #16
 80601f6:	4770      	bx	lr

080601f8 <__udivmoddi4>:
 80601f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80601fc:	9d08      	ldr	r5, [sp, #32]
 80601fe:	4604      	mov	r4, r0
 8060200:	468c      	mov	ip, r1
 8060202:	2b00      	cmp	r3, #0
 8060204:	f040 8083 	bne.w	806030e <__udivmoddi4+0x116>
 8060208:	428a      	cmp	r2, r1
 806020a:	4617      	mov	r7, r2
 806020c:	d947      	bls.n	806029e <__udivmoddi4+0xa6>
 806020e:	fab2 f282 	clz	r2, r2
 8060212:	b142      	cbz	r2, 8060226 <__udivmoddi4+0x2e>
 8060214:	f1c2 0020 	rsb	r0, r2, #32
 8060218:	fa24 f000 	lsr.w	r0, r4, r0
 806021c:	4091      	lsls	r1, r2
 806021e:	4097      	lsls	r7, r2
 8060220:	ea40 0c01 	orr.w	ip, r0, r1
 8060224:	4094      	lsls	r4, r2
 8060226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 806022a:	0c23      	lsrs	r3, r4, #16
 806022c:	fbbc f6f8 	udiv	r6, ip, r8
 8060230:	fa1f fe87 	uxth.w	lr, r7
 8060234:	fb08 c116 	mls	r1, r8, r6, ip
 8060238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 806023c:	fb06 f10e 	mul.w	r1, r6, lr
 8060240:	4299      	cmp	r1, r3
 8060242:	d909      	bls.n	8060258 <__udivmoddi4+0x60>
 8060244:	18fb      	adds	r3, r7, r3
 8060246:	f106 30ff 	add.w	r0, r6, #4294967295
 806024a:	f080 8119 	bcs.w	8060480 <__udivmoddi4+0x288>
 806024e:	4299      	cmp	r1, r3
 8060250:	f240 8116 	bls.w	8060480 <__udivmoddi4+0x288>
 8060254:	3e02      	subs	r6, #2
 8060256:	443b      	add	r3, r7
 8060258:	1a5b      	subs	r3, r3, r1
 806025a:	b2a4      	uxth	r4, r4
 806025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8060260:	fb08 3310 	mls	r3, r8, r0, r3
 8060264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8060268:	fb00 fe0e 	mul.w	lr, r0, lr
 806026c:	45a6      	cmp	lr, r4
 806026e:	d909      	bls.n	8060284 <__udivmoddi4+0x8c>
 8060270:	193c      	adds	r4, r7, r4
 8060272:	f100 33ff 	add.w	r3, r0, #4294967295
 8060276:	f080 8105 	bcs.w	8060484 <__udivmoddi4+0x28c>
 806027a:	45a6      	cmp	lr, r4
 806027c:	f240 8102 	bls.w	8060484 <__udivmoddi4+0x28c>
 8060280:	3802      	subs	r0, #2
 8060282:	443c      	add	r4, r7
 8060284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8060288:	eba4 040e 	sub.w	r4, r4, lr
 806028c:	2600      	movs	r6, #0
 806028e:	b11d      	cbz	r5, 8060298 <__udivmoddi4+0xa0>
 8060290:	40d4      	lsrs	r4, r2
 8060292:	2300      	movs	r3, #0
 8060294:	e9c5 4300 	strd	r4, r3, [r5]
 8060298:	4631      	mov	r1, r6
 806029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 806029e:	b902      	cbnz	r2, 80602a2 <__udivmoddi4+0xaa>
 80602a0:	deff      	udf	#255	; 0xff
 80602a2:	fab2 f282 	clz	r2, r2
 80602a6:	2a00      	cmp	r2, #0
 80602a8:	d150      	bne.n	806034c <__udivmoddi4+0x154>
 80602aa:	1bcb      	subs	r3, r1, r7
 80602ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80602b0:	fa1f f887 	uxth.w	r8, r7
 80602b4:	2601      	movs	r6, #1
 80602b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80602ba:	0c21      	lsrs	r1, r4, #16
 80602bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80602c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80602c4:	fb08 f30c 	mul.w	r3, r8, ip
 80602c8:	428b      	cmp	r3, r1
 80602ca:	d907      	bls.n	80602dc <__udivmoddi4+0xe4>
 80602cc:	1879      	adds	r1, r7, r1
 80602ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80602d2:	d202      	bcs.n	80602da <__udivmoddi4+0xe2>
 80602d4:	428b      	cmp	r3, r1
 80602d6:	f200 80e9 	bhi.w	80604ac <__udivmoddi4+0x2b4>
 80602da:	4684      	mov	ip, r0
 80602dc:	1ac9      	subs	r1, r1, r3
 80602de:	b2a3      	uxth	r3, r4
 80602e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80602e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80602e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80602ec:	fb08 f800 	mul.w	r8, r8, r0
 80602f0:	45a0      	cmp	r8, r4
 80602f2:	d907      	bls.n	8060304 <__udivmoddi4+0x10c>
 80602f4:	193c      	adds	r4, r7, r4
 80602f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80602fa:	d202      	bcs.n	8060302 <__udivmoddi4+0x10a>
 80602fc:	45a0      	cmp	r8, r4
 80602fe:	f200 80d9 	bhi.w	80604b4 <__udivmoddi4+0x2bc>
 8060302:	4618      	mov	r0, r3
 8060304:	eba4 0408 	sub.w	r4, r4, r8
 8060308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 806030c:	e7bf      	b.n	806028e <__udivmoddi4+0x96>
 806030e:	428b      	cmp	r3, r1
 8060310:	d909      	bls.n	8060326 <__udivmoddi4+0x12e>
 8060312:	2d00      	cmp	r5, #0
 8060314:	f000 80b1 	beq.w	806047a <__udivmoddi4+0x282>
 8060318:	2600      	movs	r6, #0
 806031a:	e9c5 0100 	strd	r0, r1, [r5]
 806031e:	4630      	mov	r0, r6
 8060320:	4631      	mov	r1, r6
 8060322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8060326:	fab3 f683 	clz	r6, r3
 806032a:	2e00      	cmp	r6, #0
 806032c:	d14a      	bne.n	80603c4 <__udivmoddi4+0x1cc>
 806032e:	428b      	cmp	r3, r1
 8060330:	d302      	bcc.n	8060338 <__udivmoddi4+0x140>
 8060332:	4282      	cmp	r2, r0
 8060334:	f200 80b8 	bhi.w	80604a8 <__udivmoddi4+0x2b0>
 8060338:	1a84      	subs	r4, r0, r2
 806033a:	eb61 0103 	sbc.w	r1, r1, r3
 806033e:	2001      	movs	r0, #1
 8060340:	468c      	mov	ip, r1
 8060342:	2d00      	cmp	r5, #0
 8060344:	d0a8      	beq.n	8060298 <__udivmoddi4+0xa0>
 8060346:	e9c5 4c00 	strd	r4, ip, [r5]
 806034a:	e7a5      	b.n	8060298 <__udivmoddi4+0xa0>
 806034c:	f1c2 0320 	rsb	r3, r2, #32
 8060350:	fa20 f603 	lsr.w	r6, r0, r3
 8060354:	4097      	lsls	r7, r2
 8060356:	fa01 f002 	lsl.w	r0, r1, r2
 806035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 806035e:	40d9      	lsrs	r1, r3
 8060360:	4330      	orrs	r0, r6
 8060362:	0c03      	lsrs	r3, r0, #16
 8060364:	fbb1 f6fe 	udiv	r6, r1, lr
 8060368:	fa1f f887 	uxth.w	r8, r7
 806036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8060370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8060374:	fb06 f108 	mul.w	r1, r6, r8
 8060378:	4299      	cmp	r1, r3
 806037a:	fa04 f402 	lsl.w	r4, r4, r2
 806037e:	d909      	bls.n	8060394 <__udivmoddi4+0x19c>
 8060380:	18fb      	adds	r3, r7, r3
 8060382:	f106 3cff 	add.w	ip, r6, #4294967295
 8060386:	f080 808d 	bcs.w	80604a4 <__udivmoddi4+0x2ac>
 806038a:	4299      	cmp	r1, r3
 806038c:	f240 808a 	bls.w	80604a4 <__udivmoddi4+0x2ac>
 8060390:	3e02      	subs	r6, #2
 8060392:	443b      	add	r3, r7
 8060394:	1a5b      	subs	r3, r3, r1
 8060396:	b281      	uxth	r1, r0
 8060398:	fbb3 f0fe 	udiv	r0, r3, lr
 806039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80603a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80603a4:	fb00 f308 	mul.w	r3, r0, r8
 80603a8:	428b      	cmp	r3, r1
 80603aa:	d907      	bls.n	80603bc <__udivmoddi4+0x1c4>
 80603ac:	1879      	adds	r1, r7, r1
 80603ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80603b2:	d273      	bcs.n	806049c <__udivmoddi4+0x2a4>
 80603b4:	428b      	cmp	r3, r1
 80603b6:	d971      	bls.n	806049c <__udivmoddi4+0x2a4>
 80603b8:	3802      	subs	r0, #2
 80603ba:	4439      	add	r1, r7
 80603bc:	1acb      	subs	r3, r1, r3
 80603be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80603c2:	e778      	b.n	80602b6 <__udivmoddi4+0xbe>
 80603c4:	f1c6 0c20 	rsb	ip, r6, #32
 80603c8:	fa03 f406 	lsl.w	r4, r3, r6
 80603cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80603d0:	431c      	orrs	r4, r3
 80603d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80603d6:	fa01 f306 	lsl.w	r3, r1, r6
 80603da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80603de:	fa21 f10c 	lsr.w	r1, r1, ip
 80603e2:	431f      	orrs	r7, r3
 80603e4:	0c3b      	lsrs	r3, r7, #16
 80603e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80603ea:	fa1f f884 	uxth.w	r8, r4
 80603ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80603f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80603f6:	fb09 fa08 	mul.w	sl, r9, r8
 80603fa:	458a      	cmp	sl, r1
 80603fc:	fa02 f206 	lsl.w	r2, r2, r6
 8060400:	fa00 f306 	lsl.w	r3, r0, r6
 8060404:	d908      	bls.n	8060418 <__udivmoddi4+0x220>
 8060406:	1861      	adds	r1, r4, r1
 8060408:	f109 30ff 	add.w	r0, r9, #4294967295
 806040c:	d248      	bcs.n	80604a0 <__udivmoddi4+0x2a8>
 806040e:	458a      	cmp	sl, r1
 8060410:	d946      	bls.n	80604a0 <__udivmoddi4+0x2a8>
 8060412:	f1a9 0902 	sub.w	r9, r9, #2
 8060416:	4421      	add	r1, r4
 8060418:	eba1 010a 	sub.w	r1, r1, sl
 806041c:	b2bf      	uxth	r7, r7
 806041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8060422:	fb0e 1110 	mls	r1, lr, r0, r1
 8060426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 806042a:	fb00 f808 	mul.w	r8, r0, r8
 806042e:	45b8      	cmp	r8, r7
 8060430:	d907      	bls.n	8060442 <__udivmoddi4+0x24a>
 8060432:	19e7      	adds	r7, r4, r7
 8060434:	f100 31ff 	add.w	r1, r0, #4294967295
 8060438:	d22e      	bcs.n	8060498 <__udivmoddi4+0x2a0>
 806043a:	45b8      	cmp	r8, r7
 806043c:	d92c      	bls.n	8060498 <__udivmoddi4+0x2a0>
 806043e:	3802      	subs	r0, #2
 8060440:	4427      	add	r7, r4
 8060442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8060446:	eba7 0708 	sub.w	r7, r7, r8
 806044a:	fba0 8902 	umull	r8, r9, r0, r2
 806044e:	454f      	cmp	r7, r9
 8060450:	46c6      	mov	lr, r8
 8060452:	4649      	mov	r1, r9
 8060454:	d31a      	bcc.n	806048c <__udivmoddi4+0x294>
 8060456:	d017      	beq.n	8060488 <__udivmoddi4+0x290>
 8060458:	b15d      	cbz	r5, 8060472 <__udivmoddi4+0x27a>
 806045a:	ebb3 020e 	subs.w	r2, r3, lr
 806045e:	eb67 0701 	sbc.w	r7, r7, r1
 8060462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8060466:	40f2      	lsrs	r2, r6
 8060468:	ea4c 0202 	orr.w	r2, ip, r2
 806046c:	40f7      	lsrs	r7, r6
 806046e:	e9c5 2700 	strd	r2, r7, [r5]
 8060472:	2600      	movs	r6, #0
 8060474:	4631      	mov	r1, r6
 8060476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 806047a:	462e      	mov	r6, r5
 806047c:	4628      	mov	r0, r5
 806047e:	e70b      	b.n	8060298 <__udivmoddi4+0xa0>
 8060480:	4606      	mov	r6, r0
 8060482:	e6e9      	b.n	8060258 <__udivmoddi4+0x60>
 8060484:	4618      	mov	r0, r3
 8060486:	e6fd      	b.n	8060284 <__udivmoddi4+0x8c>
 8060488:	4543      	cmp	r3, r8
 806048a:	d2e5      	bcs.n	8060458 <__udivmoddi4+0x260>
 806048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8060490:	eb69 0104 	sbc.w	r1, r9, r4
 8060494:	3801      	subs	r0, #1
 8060496:	e7df      	b.n	8060458 <__udivmoddi4+0x260>
 8060498:	4608      	mov	r0, r1
 806049a:	e7d2      	b.n	8060442 <__udivmoddi4+0x24a>
 806049c:	4660      	mov	r0, ip
 806049e:	e78d      	b.n	80603bc <__udivmoddi4+0x1c4>
 80604a0:	4681      	mov	r9, r0
 80604a2:	e7b9      	b.n	8060418 <__udivmoddi4+0x220>
 80604a4:	4666      	mov	r6, ip
 80604a6:	e775      	b.n	8060394 <__udivmoddi4+0x19c>
 80604a8:	4630      	mov	r0, r6
 80604aa:	e74a      	b.n	8060342 <__udivmoddi4+0x14a>
 80604ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80604b0:	4439      	add	r1, r7
 80604b2:	e713      	b.n	80602dc <__udivmoddi4+0xe4>
 80604b4:	3802      	subs	r0, #2
 80604b6:	443c      	add	r4, r7
 80604b8:	e724      	b.n	8060304 <__udivmoddi4+0x10c>
 80604ba:	bf00      	nop

080604bc <__aeabi_idiv0>:
 80604bc:	4770      	bx	lr
 80604be:	bf00      	nop

080604c0 <Frame_WriteCfg>:
defReturnType Frame_WriteToFlash(uint8_t slot, uint8_t* data);
defReturnType Frame_STM32OTA();
defReturnType Frame_InitFlash(uint8_t slot); //call only one time.
defReturnType Frame_WriteFlashToSlot(uint8_t slot, uint8_t* data, uint16_t lenght);

defReturnType Frame_WriteCfg(){//write to sector 4 in STM32F407
 80604c0:	b580      	push	{r7, lr}
 80604c2:	b088      	sub	sp, #32
 80604c4:	af00      	add	r7, sp, #0
	defReturnType ret;

	ret = HAL_FLASH_Unlock();
 80604c6:	f000 fdc3 	bl	8061050 <HAL_FLASH_Unlock>
 80604ca:	4603      	mov	r3, r0
 80604cc:	77fb      	strb	r3, [r7, #31]
	if(ret != (uint8_t)HAL_OK){
 80604ce:	7ffb      	ldrb	r3, [r7, #31]
 80604d0:	2b00      	cmp	r3, #0
 80604d2:	d001      	beq.n	80604d8 <Frame_WriteCfg+0x18>
		return HANDLE_FAILED;
 80604d4:	2301      	movs	r3, #1
 80604d6:	e036      	b.n	8060546 <Frame_WriteCfg+0x86>
	}

	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SectorError;

	EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 80604d8:	2300      	movs	r3, #0
 80604da:	607b      	str	r3, [r7, #4]

	EraseInitStruct.Sector        = FLASH_SECTOR_11;
 80604dc:	230b      	movs	r3, #11
 80604de:	60fb      	str	r3, [r7, #12]

	EraseInitStruct.NbSectors     = 1;           //erase 1 sectors
 80604e0:	2301      	movs	r3, #1
 80604e2:	613b      	str	r3, [r7, #16]
	EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 80604e4:	2302      	movs	r3, #2
 80604e6:	617b      	str	r3, [r7, #20]

	ret = HAL_FLASHEx_Erase( &EraseInitStruct, &SectorError );
 80604e8:	463a      	mov	r2, r7
 80604ea:	1d3b      	adds	r3, r7, #4
 80604ec:	4611      	mov	r1, r2
 80604ee:	4618      	mov	r0, r3
 80604f0:	f000 ff10 	bl	8061314 <HAL_FLASHEx_Erase>
 80604f4:	4603      	mov	r3, r0
 80604f6:	77fb      	strb	r3, [r7, #31]
	if( ret != (uint8_t)HAL_OK )
 80604f8:	7ffb      	ldrb	r3, [r7, #31]
 80604fa:	2b00      	cmp	r3, #0
 80604fc:	d001      	beq.n	8060502 <Frame_WriteCfg+0x42>
	{
		return HANDLE_FAILED;
 80604fe:	2301      	movs	r3, #1
 8060500:	e021      	b.n	8060546 <Frame_WriteCfg+0x86>
	}

	uint32_t baseaddr = 0x080E0000; //Sector 4 in STM32F407
 8060502:	4b13      	ldr	r3, [pc, #76]	; (8060550 <Frame_WriteCfg+0x90>)
 8060504:	61bb      	str	r3, [r7, #24]

	if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, baseaddr, Flash_Cfg.FlashOnGoing) != HAL_OK)
 8060506:	4b13      	ldr	r3, [pc, #76]	; (8060554 <Frame_WriteCfg+0x94>)
 8060508:	781b      	ldrb	r3, [r3, #0]
 806050a:	b2da      	uxtb	r2, r3
 806050c:	f04f 0300 	mov.w	r3, #0
 8060510:	69b9      	ldr	r1, [r7, #24]
 8060512:	2000      	movs	r0, #0
 8060514:	f000 fd48 	bl	8060fa8 <HAL_FLASH_Program>
 8060518:	4603      	mov	r3, r0
 806051a:	2b00      	cmp	r3, #0
 806051c:	d001      	beq.n	8060522 <Frame_WriteCfg+0x62>
			return HANDLE_FAILED;
 806051e:	2301      	movs	r3, #1
 8060520:	e011      	b.n	8060546 <Frame_WriteCfg+0x86>
	if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, baseaddr + 1, Flash_Cfg.ResetCause) != HAL_OK)
 8060522:	69bb      	ldr	r3, [r7, #24]
 8060524:	1c59      	adds	r1, r3, #1
 8060526:	4b0b      	ldr	r3, [pc, #44]	; (8060554 <Frame_WriteCfg+0x94>)
 8060528:	785b      	ldrb	r3, [r3, #1]
 806052a:	b2da      	uxtb	r2, r3
 806052c:	f04f 0300 	mov.w	r3, #0
 8060530:	2000      	movs	r0, #0
 8060532:	f000 fd39 	bl	8060fa8 <HAL_FLASH_Program>
 8060536:	4603      	mov	r3, r0
 8060538:	2b00      	cmp	r3, #0
 806053a:	d001      	beq.n	8060540 <Frame_WriteCfg+0x80>
			return HANDLE_FAILED;
 806053c:	2301      	movs	r3, #1
 806053e:	e002      	b.n	8060546 <Frame_WriteCfg+0x86>

	HAL_FLASH_Lock();
 8060540:	f000 fda8 	bl	8061094 <HAL_FLASH_Lock>
	return HANDLE_OK;
 8060544:	2300      	movs	r3, #0
}
 8060546:	4618      	mov	r0, r3
 8060548:	3720      	adds	r7, #32
 806054a:	46bd      	mov	sp, r7
 806054c:	bd80      	pop	{r7, pc}
 806054e:	bf00      	nop
 8060550:	080e0000 	.word	0x080e0000
 8060554:	20000028 	.word	0x20000028

08060558 <Frame_ReadCfg>:


defReturnType Frame_ReadCfg(defFlashCfg* Cfg){//write to sector 4 in STM32F407
 8060558:	b580      	push	{r7, lr}
 806055a:	b086      	sub	sp, #24
 806055c:	af00      	add	r7, sp, #0
 806055e:	6078      	str	r0, [r7, #4]
	defReturnType ret;

	ret = HAL_FLASH_Unlock();
 8060560:	f000 fd76 	bl	8061050 <HAL_FLASH_Unlock>
 8060564:	4603      	mov	r3, r0
 8060566:	75fb      	strb	r3, [r7, #23]
	if(ret != (uint8_t)HAL_OK){
 8060568:	7dfb      	ldrb	r3, [r7, #23]
 806056a:	2b00      	cmp	r3, #0
 806056c:	d001      	beq.n	8060572 <Frame_ReadCfg+0x1a>
		return HANDLE_FAILED;
 806056e:	2301      	movs	r3, #1
 8060570:	e010      	b.n	8060594 <Frame_ReadCfg+0x3c>
	}


	uint32_t baseaddr = 0x080E0000; //Sector 4 in STM32F407
 8060572:	4b0a      	ldr	r3, [pc, #40]	; (806059c <Frame_ReadCfg+0x44>)
 8060574:	613b      	str	r3, [r7, #16]

	uint32_t Rx_Buf = *(__IO uint32_t *)baseaddr;
 8060576:	693b      	ldr	r3, [r7, #16]
 8060578:	681b      	ldr	r3, [r3, #0]
 806057a:	60fb      	str	r3, [r7, #12]
	Cfg->FlashOnGoing = (uint8_t)((Rx_Buf)&0xFF);
 806057c:	68fb      	ldr	r3, [r7, #12]
 806057e:	b2da      	uxtb	r2, r3
 8060580:	687b      	ldr	r3, [r7, #4]
 8060582:	701a      	strb	r2, [r3, #0]
	Cfg->ResetCause = (uint8_t)(((Rx_Buf)>>8)&0xFF);
 8060584:	68fb      	ldr	r3, [r7, #12]
 8060586:	0a1b      	lsrs	r3, r3, #8
 8060588:	b2da      	uxtb	r2, r3
 806058a:	687b      	ldr	r3, [r7, #4]
 806058c:	705a      	strb	r2, [r3, #1]

	HAL_FLASH_Lock();
 806058e:	f000 fd81 	bl	8061094 <HAL_FLASH_Lock>
	return HANDLE_OK;
 8060592:	2300      	movs	r3, #0
}
 8060594:	4618      	mov	r0, r3
 8060596:	3718      	adds	r7, #24
 8060598:	46bd      	mov	sp, r7
 806059a:	bd80      	pop	{r7, pc}
 806059c:	080e0000 	.word	0x080e0000

080605a0 <HAL_UART_RxCpltCallback>:
  // Turn OFF the Green Led to tell the user that Bootloader is not running
//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET );    //Green LED OFF
  app_reset_handler();    //call the app reset handler
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80605a0:	b580      	push	{r7, lr}
 80605a2:	b082      	sub	sp, #8
 80605a4:	af00      	add	r7, sp, #0
 80605a6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart6.Instance){
 80605a8:	687b      	ldr	r3, [r7, #4]
 80605aa:	681a      	ldr	r2, [r3, #0]
 80605ac:	4b14      	ldr	r3, [pc, #80]	; (8060600 <HAL_UART_RxCpltCallback+0x60>)
 80605ae:	681b      	ldr	r3, [r3, #0]
 80605b0:	429a      	cmp	r2, r3
 80605b2:	d120      	bne.n	80605f6 <HAL_UART_RxCpltCallback+0x56>
			if(!strncmp("OTA",(char*)rx_buf, 3)){
 80605b4:	2203      	movs	r2, #3
 80605b6:	4913      	ldr	r1, [pc, #76]	; (8060604 <HAL_UART_RxCpltCallback+0x64>)
 80605b8:	4813      	ldr	r0, [pc, #76]	; (8060608 <HAL_UART_RxCpltCallback+0x68>)
 80605ba:	f002 fceb 	bl	8062f94 <strncmp>
 80605be:	4603      	mov	r3, r0
 80605c0:	2b00      	cmp	r3, #0
 80605c2:	d10e      	bne.n	80605e2 <HAL_UART_RxCpltCallback+0x42>
				Frame_ReadCfg(&Flash_Cfg);
 80605c4:	4811      	ldr	r0, [pc, #68]	; (806060c <HAL_UART_RxCpltCallback+0x6c>)
 80605c6:	f7ff ffc7 	bl	8060558 <Frame_ReadCfg>
				Flash_Cfg.ResetCause = RESET_OTA;
 80605ca:	4b10      	ldr	r3, [pc, #64]	; (806060c <HAL_UART_RxCpltCallback+0x6c>)
 80605cc:	2201      	movs	r2, #1
 80605ce:	705a      	strb	r2, [r3, #1]
				Frame_WriteCfg(&Flash_Cfg);
 80605d0:	480e      	ldr	r0, [pc, #56]	; (806060c <HAL_UART_RxCpltCallback+0x6c>)
 80605d2:	f7ff ff75 	bl	80604c0 <Frame_WriteCfg>
//				goto_bootloader();
				HAL_NVIC_SystemReset();
 80605d6:	f000 fc44 	bl	8060e62 <HAL_NVIC_SystemReset>
				flag = 1;
 80605da:	4b0d      	ldr	r3, [pc, #52]	; (8060610 <HAL_UART_RxCpltCallback+0x70>)
 80605dc:	2201      	movs	r2, #1
 80605de:	701a      	strb	r2, [r3, #0]
 80605e0:	e004      	b.n	80605ec <HAL_UART_RxCpltCallback+0x4c>
			}
			else{
				HAL_UART_Receive_IT(&huart6, rx_buf, 3);
 80605e2:	2203      	movs	r2, #3
 80605e4:	4907      	ldr	r1, [pc, #28]	; (8060604 <HAL_UART_RxCpltCallback+0x64>)
 80605e6:	4806      	ldr	r0, [pc, #24]	; (8060600 <HAL_UART_RxCpltCallback+0x60>)
 80605e8:	f001 fe2d 	bl	8062246 <HAL_UART_Receive_IT>
			}
			memset(rx_buf, 0, 3);
 80605ec:	2203      	movs	r2, #3
 80605ee:	2100      	movs	r1, #0
 80605f0:	4804      	ldr	r0, [pc, #16]	; (8060604 <HAL_UART_RxCpltCallback+0x64>)
 80605f2:	f002 fcc7 	bl	8062f84 <memset>
	}
}
 80605f6:	bf00      	nop
 80605f8:	3708      	adds	r7, #8
 80605fa:	46bd      	mov	sp, r7
 80605fc:	bd80      	pop	{r7, pc}
 80605fe:	bf00      	nop
 8060600:	20000034 	.word	0x20000034
 8060604:	2000002c 	.word	0x2000002c
 8060608:	08062fd0 	.word	0x08062fd0
 806060c:	20000028 	.word	0x20000028
 8060610:	2000002f 	.word	0x2000002f

08060614 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8060614:	b580      	push	{r7, lr}
 8060616:	b088      	sub	sp, #32
 8060618:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 806061a:	f000 fa71 	bl	8060b00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 806061e:	f000 f863 	bl	80606e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8060622:	f000 f8f5 	bl	8060810 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8060626:	f000 f8c9 	bl	80607bc <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart6, rx_buf, 3);
 806062a:	2203      	movs	r2, #3
 806062c:	492b      	ldr	r1, [pc, #172]	; (80606dc <main+0xc8>)
 806062e:	482c      	ldr	r0, [pc, #176]	; (80606e0 <main+0xcc>)
 8060630:	f001 fe09 	bl	8062246 <HAL_UART_Receive_IT>
//  Frame_WriteCfg();
  uint16_t A = 0x0100;
 8060634:	f44f 7380 	mov.w	r3, #256	; 0x100
 8060638:	81fb      	strh	r3, [r7, #14]
  uint16_t B = 0x8000;
 806063a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 806063e:	81bb      	strh	r3, [r7, #12]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uint16_t cur = 0x0001;
 8060640:	2301      	movs	r3, #1
 8060642:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i<16; i++){
 8060644:	2300      	movs	r3, #0
 8060646:	61fb      	str	r3, [r7, #28]
 8060648:	e00a      	b.n	8060660 <main+0x4c>
		  GPIOE->ODR = cur<<i;
 806064a:	897a      	ldrh	r2, [r7, #10]
 806064c:	69fb      	ldr	r3, [r7, #28]
 806064e:	409a      	lsls	r2, r3
 8060650:	4b24      	ldr	r3, [pc, #144]	; (80606e4 <main+0xd0>)
 8060652:	615a      	str	r2, [r3, #20]
		  HAL_Delay(30);
 8060654:	201e      	movs	r0, #30
 8060656:	f000 fac5 	bl	8060be4 <HAL_Delay>
	  for(int i = 0; i<16; i++){
 806065a:	69fb      	ldr	r3, [r7, #28]
 806065c:	3301      	adds	r3, #1
 806065e:	61fb      	str	r3, [r7, #28]
 8060660:	69fb      	ldr	r3, [r7, #28]
 8060662:	2b0f      	cmp	r3, #15
 8060664:	ddf1      	ble.n	806064a <main+0x36>
	  }
	  uint16_t cur1 = 0x0003;
 8060666:	2303      	movs	r3, #3
 8060668:	813b      	strh	r3, [r7, #8]
	  for(int i = 0; i<16; i++){
 806066a:	2300      	movs	r3, #0
 806066c:	61bb      	str	r3, [r7, #24]
 806066e:	e00a      	b.n	8060686 <main+0x72>
		  GPIOE->ODR = cur1<<i;
 8060670:	893a      	ldrh	r2, [r7, #8]
 8060672:	69bb      	ldr	r3, [r7, #24]
 8060674:	409a      	lsls	r2, r3
 8060676:	4b1b      	ldr	r3, [pc, #108]	; (80606e4 <main+0xd0>)
 8060678:	615a      	str	r2, [r3, #20]
		  HAL_Delay(30);
 806067a:	201e      	movs	r0, #30
 806067c:	f000 fab2 	bl	8060be4 <HAL_Delay>
	  for(int i = 0; i<16; i++){
 8060680:	69bb      	ldr	r3, [r7, #24]
 8060682:	3301      	adds	r3, #1
 8060684:	61bb      	str	r3, [r7, #24]
 8060686:	69bb      	ldr	r3, [r7, #24]
 8060688:	2b0f      	cmp	r3, #15
 806068a:	ddf1      	ble.n	8060670 <main+0x5c>
	  }
	  uint16_t cur2 = 0x0007;
 806068c:	2307      	movs	r3, #7
 806068e:	80fb      	strh	r3, [r7, #6]
	  for(int i = 0; i<16; i++){
 8060690:	2300      	movs	r3, #0
 8060692:	617b      	str	r3, [r7, #20]
 8060694:	e00a      	b.n	80606ac <main+0x98>
		  GPIOE->ODR = cur2<<i;
 8060696:	88fa      	ldrh	r2, [r7, #6]
 8060698:	697b      	ldr	r3, [r7, #20]
 806069a:	409a      	lsls	r2, r3
 806069c:	4b11      	ldr	r3, [pc, #68]	; (80606e4 <main+0xd0>)
 806069e:	615a      	str	r2, [r3, #20]
		  HAL_Delay(30);
 80606a0:	201e      	movs	r0, #30
 80606a2:	f000 fa9f 	bl	8060be4 <HAL_Delay>
	  for(int i = 0; i<16; i++){
 80606a6:	697b      	ldr	r3, [r7, #20]
 80606a8:	3301      	adds	r3, #1
 80606aa:	617b      	str	r3, [r7, #20]
 80606ac:	697b      	ldr	r3, [r7, #20]
 80606ae:	2b0f      	cmp	r3, #15
 80606b0:	ddf1      	ble.n	8060696 <main+0x82>
	  }
	  uint16_t cur3 = 0x000F;
 80606b2:	230f      	movs	r3, #15
 80606b4:	80bb      	strh	r3, [r7, #4]
	  for(int i = 0; i<16; i++){
 80606b6:	2300      	movs	r3, #0
 80606b8:	613b      	str	r3, [r7, #16]
 80606ba:	e00a      	b.n	80606d2 <main+0xbe>
		  GPIOE->ODR = cur3<<i;
 80606bc:	88ba      	ldrh	r2, [r7, #4]
 80606be:	693b      	ldr	r3, [r7, #16]
 80606c0:	409a      	lsls	r2, r3
 80606c2:	4b08      	ldr	r3, [pc, #32]	; (80606e4 <main+0xd0>)
 80606c4:	615a      	str	r2, [r3, #20]
		  HAL_Delay(30);
 80606c6:	201e      	movs	r0, #30
 80606c8:	f000 fa8c 	bl	8060be4 <HAL_Delay>
	  for(int i = 0; i<16; i++){
 80606cc:	693b      	ldr	r3, [r7, #16]
 80606ce:	3301      	adds	r3, #1
 80606d0:	613b      	str	r3, [r7, #16]
 80606d2:	693b      	ldr	r3, [r7, #16]
 80606d4:	2b0f      	cmp	r3, #15
 80606d6:	ddf1      	ble.n	80606bc <main+0xa8>
  {
 80606d8:	e7b2      	b.n	8060640 <main+0x2c>
 80606da:	bf00      	nop
 80606dc:	2000002c 	.word	0x2000002c
 80606e0:	20000034 	.word	0x20000034
 80606e4:	40021000 	.word	0x40021000

080606e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80606e8:	b580      	push	{r7, lr}
 80606ea:	b094      	sub	sp, #80	; 0x50
 80606ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80606ee:	f107 0320 	add.w	r3, r7, #32
 80606f2:	2230      	movs	r2, #48	; 0x30
 80606f4:	2100      	movs	r1, #0
 80606f6:	4618      	mov	r0, r3
 80606f8:	f002 fc44 	bl	8062f84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80606fc:	f107 030c 	add.w	r3, r7, #12
 8060700:	2200      	movs	r2, #0
 8060702:	601a      	str	r2, [r3, #0]
 8060704:	605a      	str	r2, [r3, #4]
 8060706:	609a      	str	r2, [r3, #8]
 8060708:	60da      	str	r2, [r3, #12]
 806070a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 806070c:	2300      	movs	r3, #0
 806070e:	60bb      	str	r3, [r7, #8]
 8060710:	4b28      	ldr	r3, [pc, #160]	; (80607b4 <SystemClock_Config+0xcc>)
 8060712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8060714:	4a27      	ldr	r2, [pc, #156]	; (80607b4 <SystemClock_Config+0xcc>)
 8060716:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 806071a:	6413      	str	r3, [r2, #64]	; 0x40
 806071c:	4b25      	ldr	r3, [pc, #148]	; (80607b4 <SystemClock_Config+0xcc>)
 806071e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8060720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8060724:	60bb      	str	r3, [r7, #8]
 8060726:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8060728:	2300      	movs	r3, #0
 806072a:	607b      	str	r3, [r7, #4]
 806072c:	4b22      	ldr	r3, [pc, #136]	; (80607b8 <SystemClock_Config+0xd0>)
 806072e:	681b      	ldr	r3, [r3, #0]
 8060730:	4a21      	ldr	r2, [pc, #132]	; (80607b8 <SystemClock_Config+0xd0>)
 8060732:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8060736:	6013      	str	r3, [r2, #0]
 8060738:	4b1f      	ldr	r3, [pc, #124]	; (80607b8 <SystemClock_Config+0xd0>)
 806073a:	681b      	ldr	r3, [r3, #0]
 806073c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8060740:	607b      	str	r3, [r7, #4]
 8060742:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8060744:	2302      	movs	r3, #2
 8060746:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8060748:	2301      	movs	r3, #1
 806074a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 806074c:	2310      	movs	r3, #16
 806074e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8060750:	2302      	movs	r3, #2
 8060752:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8060754:	2300      	movs	r3, #0
 8060756:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8060758:	2308      	movs	r3, #8
 806075a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 806075c:	23a8      	movs	r3, #168	; 0xa8
 806075e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8060760:	2302      	movs	r3, #2
 8060762:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8060764:	2304      	movs	r3, #4
 8060766:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8060768:	f107 0320 	add.w	r3, r7, #32
 806076c:	4618      	mov	r0, r3
 806076e:	f001 f8a9 	bl	80618c4 <HAL_RCC_OscConfig>
 8060772:	4603      	mov	r3, r0
 8060774:	2b00      	cmp	r3, #0
 8060776:	d001      	beq.n	806077c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8060778:	f000 f8d0 	bl	806091c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 806077c:	230f      	movs	r3, #15
 806077e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8060780:	2302      	movs	r3, #2
 8060782:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8060784:	2300      	movs	r3, #0
 8060786:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8060788:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 806078c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 806078e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8060792:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8060794:	f107 030c 	add.w	r3, r7, #12
 8060798:	2105      	movs	r1, #5
 806079a:	4618      	mov	r0, r3
 806079c:	f001 fb0a 	bl	8061db4 <HAL_RCC_ClockConfig>
 80607a0:	4603      	mov	r3, r0
 80607a2:	2b00      	cmp	r3, #0
 80607a4:	d001      	beq.n	80607aa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80607a6:	f000 f8b9 	bl	806091c <Error_Handler>
  }
}
 80607aa:	bf00      	nop
 80607ac:	3750      	adds	r7, #80	; 0x50
 80607ae:	46bd      	mov	sp, r7
 80607b0:	bd80      	pop	{r7, pc}
 80607b2:	bf00      	nop
 80607b4:	40023800 	.word	0x40023800
 80607b8:	40007000 	.word	0x40007000

080607bc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80607bc:	b580      	push	{r7, lr}
 80607be:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80607c0:	4b11      	ldr	r3, [pc, #68]	; (8060808 <MX_USART6_UART_Init+0x4c>)
 80607c2:	4a12      	ldr	r2, [pc, #72]	; (806080c <MX_USART6_UART_Init+0x50>)
 80607c4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80607c6:	4b10      	ldr	r3, [pc, #64]	; (8060808 <MX_USART6_UART_Init+0x4c>)
 80607c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80607cc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80607ce:	4b0e      	ldr	r3, [pc, #56]	; (8060808 <MX_USART6_UART_Init+0x4c>)
 80607d0:	2200      	movs	r2, #0
 80607d2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80607d4:	4b0c      	ldr	r3, [pc, #48]	; (8060808 <MX_USART6_UART_Init+0x4c>)
 80607d6:	2200      	movs	r2, #0
 80607d8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80607da:	4b0b      	ldr	r3, [pc, #44]	; (8060808 <MX_USART6_UART_Init+0x4c>)
 80607dc:	2200      	movs	r2, #0
 80607de:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80607e0:	4b09      	ldr	r3, [pc, #36]	; (8060808 <MX_USART6_UART_Init+0x4c>)
 80607e2:	220c      	movs	r2, #12
 80607e4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80607e6:	4b08      	ldr	r3, [pc, #32]	; (8060808 <MX_USART6_UART_Init+0x4c>)
 80607e8:	2200      	movs	r2, #0
 80607ea:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80607ec:	4b06      	ldr	r3, [pc, #24]	; (8060808 <MX_USART6_UART_Init+0x4c>)
 80607ee:	2200      	movs	r2, #0
 80607f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80607f2:	4805      	ldr	r0, [pc, #20]	; (8060808 <MX_USART6_UART_Init+0x4c>)
 80607f4:	f001 fcda 	bl	80621ac <HAL_UART_Init>
 80607f8:	4603      	mov	r3, r0
 80607fa:	2b00      	cmp	r3, #0
 80607fc:	d001      	beq.n	8060802 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80607fe:	f000 f88d 	bl	806091c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8060802:	bf00      	nop
 8060804:	bd80      	pop	{r7, pc}
 8060806:	bf00      	nop
 8060808:	20000034 	.word	0x20000034
 806080c:	40011400 	.word	0x40011400

08060810 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8060810:	b580      	push	{r7, lr}
 8060812:	b08a      	sub	sp, #40	; 0x28
 8060814:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8060816:	f107 0314 	add.w	r3, r7, #20
 806081a:	2200      	movs	r2, #0
 806081c:	601a      	str	r2, [r3, #0]
 806081e:	605a      	str	r2, [r3, #4]
 8060820:	609a      	str	r2, [r3, #8]
 8060822:	60da      	str	r2, [r3, #12]
 8060824:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8060826:	2300      	movs	r3, #0
 8060828:	613b      	str	r3, [r7, #16]
 806082a:	4b39      	ldr	r3, [pc, #228]	; (8060910 <MX_GPIO_Init+0x100>)
 806082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 806082e:	4a38      	ldr	r2, [pc, #224]	; (8060910 <MX_GPIO_Init+0x100>)
 8060830:	f043 0310 	orr.w	r3, r3, #16
 8060834:	6313      	str	r3, [r2, #48]	; 0x30
 8060836:	4b36      	ldr	r3, [pc, #216]	; (8060910 <MX_GPIO_Init+0x100>)
 8060838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 806083a:	f003 0310 	and.w	r3, r3, #16
 806083e:	613b      	str	r3, [r7, #16]
 8060840:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8060842:	2300      	movs	r3, #0
 8060844:	60fb      	str	r3, [r7, #12]
 8060846:	4b32      	ldr	r3, [pc, #200]	; (8060910 <MX_GPIO_Init+0x100>)
 8060848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 806084a:	4a31      	ldr	r2, [pc, #196]	; (8060910 <MX_GPIO_Init+0x100>)
 806084c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8060850:	6313      	str	r3, [r2, #48]	; 0x30
 8060852:	4b2f      	ldr	r3, [pc, #188]	; (8060910 <MX_GPIO_Init+0x100>)
 8060854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8060856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 806085a:	60fb      	str	r3, [r7, #12]
 806085c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 806085e:	2300      	movs	r3, #0
 8060860:	60bb      	str	r3, [r7, #8]
 8060862:	4b2b      	ldr	r3, [pc, #172]	; (8060910 <MX_GPIO_Init+0x100>)
 8060864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8060866:	4a2a      	ldr	r2, [pc, #168]	; (8060910 <MX_GPIO_Init+0x100>)
 8060868:	f043 0308 	orr.w	r3, r3, #8
 806086c:	6313      	str	r3, [r2, #48]	; 0x30
 806086e:	4b28      	ldr	r3, [pc, #160]	; (8060910 <MX_GPIO_Init+0x100>)
 8060870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8060872:	f003 0308 	and.w	r3, r3, #8
 8060876:	60bb      	str	r3, [r7, #8]
 8060878:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 806087a:	2300      	movs	r3, #0
 806087c:	607b      	str	r3, [r7, #4]
 806087e:	4b24      	ldr	r3, [pc, #144]	; (8060910 <MX_GPIO_Init+0x100>)
 8060880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8060882:	4a23      	ldr	r2, [pc, #140]	; (8060910 <MX_GPIO_Init+0x100>)
 8060884:	f043 0304 	orr.w	r3, r3, #4
 8060888:	6313      	str	r3, [r2, #48]	; 0x30
 806088a:	4b21      	ldr	r3, [pc, #132]	; (8060910 <MX_GPIO_Init+0x100>)
 806088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 806088e:	f003 0304 	and.w	r3, r3, #4
 8060892:	607b      	str	r3, [r7, #4]
 8060894:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8060896:	2300      	movs	r3, #0
 8060898:	603b      	str	r3, [r7, #0]
 806089a:	4b1d      	ldr	r3, [pc, #116]	; (8060910 <MX_GPIO_Init+0x100>)
 806089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 806089e:	4a1c      	ldr	r2, [pc, #112]	; (8060910 <MX_GPIO_Init+0x100>)
 80608a0:	f043 0301 	orr.w	r3, r3, #1
 80608a4:	6313      	str	r3, [r2, #48]	; 0x30
 80608a6:	4b1a      	ldr	r3, [pc, #104]	; (8060910 <MX_GPIO_Init+0x100>)
 80608a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80608aa:	f003 0301 	and.w	r3, r3, #1
 80608ae:	603b      	str	r3, [r7, #0]
 80608b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80608b2:	2200      	movs	r2, #0
 80608b4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80608b8:	4816      	ldr	r0, [pc, #88]	; (8060914 <MX_GPIO_Init+0x104>)
 80608ba:	f000 ffe9 	bl	8061890 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80608be:	2200      	movs	r2, #0
 80608c0:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 80608c4:	4814      	ldr	r0, [pc, #80]	; (8060918 <MX_GPIO_Init+0x108>)
 80608c6:	f000 ffe3 	bl	8061890 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80608ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80608ce:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80608d0:	2301      	movs	r3, #1
 80608d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80608d4:	2300      	movs	r3, #0
 80608d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80608d8:	2300      	movs	r3, #0
 80608da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80608dc:	f107 0314 	add.w	r3, r7, #20
 80608e0:	4619      	mov	r1, r3
 80608e2:	480c      	ldr	r0, [pc, #48]	; (8060914 <MX_GPIO_Init+0x104>)
 80608e4:	f000 fe38 	bl	8061558 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80608e8:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80608ec:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80608ee:	2301      	movs	r3, #1
 80608f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80608f2:	2300      	movs	r3, #0
 80608f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80608f6:	2300      	movs	r3, #0
 80608f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80608fa:	f107 0314 	add.w	r3, r7, #20
 80608fe:	4619      	mov	r1, r3
 8060900:	4805      	ldr	r0, [pc, #20]	; (8060918 <MX_GPIO_Init+0x108>)
 8060902:	f000 fe29 	bl	8061558 <HAL_GPIO_Init>

}
 8060906:	bf00      	nop
 8060908:	3728      	adds	r7, #40	; 0x28
 806090a:	46bd      	mov	sp, r7
 806090c:	bd80      	pop	{r7, pc}
 806090e:	bf00      	nop
 8060910:	40023800 	.word	0x40023800
 8060914:	40021000 	.word	0x40021000
 8060918:	40020c00 	.word	0x40020c00

0806091c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 806091c:	b480      	push	{r7}
 806091e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8060920:	b672      	cpsid	i
}
 8060922:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8060924:	e7fe      	b.n	8060924 <Error_Handler+0x8>
	...

08060928 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8060928:	b480      	push	{r7}
 806092a:	b083      	sub	sp, #12
 806092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 806092e:	2300      	movs	r3, #0
 8060930:	607b      	str	r3, [r7, #4]
 8060932:	4b10      	ldr	r3, [pc, #64]	; (8060974 <HAL_MspInit+0x4c>)
 8060934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8060936:	4a0f      	ldr	r2, [pc, #60]	; (8060974 <HAL_MspInit+0x4c>)
 8060938:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 806093c:	6453      	str	r3, [r2, #68]	; 0x44
 806093e:	4b0d      	ldr	r3, [pc, #52]	; (8060974 <HAL_MspInit+0x4c>)
 8060940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8060942:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8060946:	607b      	str	r3, [r7, #4]
 8060948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 806094a:	2300      	movs	r3, #0
 806094c:	603b      	str	r3, [r7, #0]
 806094e:	4b09      	ldr	r3, [pc, #36]	; (8060974 <HAL_MspInit+0x4c>)
 8060950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8060952:	4a08      	ldr	r2, [pc, #32]	; (8060974 <HAL_MspInit+0x4c>)
 8060954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8060958:	6413      	str	r3, [r2, #64]	; 0x40
 806095a:	4b06      	ldr	r3, [pc, #24]	; (8060974 <HAL_MspInit+0x4c>)
 806095c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806095e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8060962:	603b      	str	r3, [r7, #0]
 8060964:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8060966:	bf00      	nop
 8060968:	370c      	adds	r7, #12
 806096a:	46bd      	mov	sp, r7
 806096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8060970:	4770      	bx	lr
 8060972:	bf00      	nop
 8060974:	40023800 	.word	0x40023800

08060978 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8060978:	b580      	push	{r7, lr}
 806097a:	b08a      	sub	sp, #40	; 0x28
 806097c:	af00      	add	r7, sp, #0
 806097e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8060980:	f107 0314 	add.w	r3, r7, #20
 8060984:	2200      	movs	r2, #0
 8060986:	601a      	str	r2, [r3, #0]
 8060988:	605a      	str	r2, [r3, #4]
 806098a:	609a      	str	r2, [r3, #8]
 806098c:	60da      	str	r2, [r3, #12]
 806098e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8060990:	687b      	ldr	r3, [r7, #4]
 8060992:	681b      	ldr	r3, [r3, #0]
 8060994:	4a1d      	ldr	r2, [pc, #116]	; (8060a0c <HAL_UART_MspInit+0x94>)
 8060996:	4293      	cmp	r3, r2
 8060998:	d133      	bne.n	8060a02 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 806099a:	2300      	movs	r3, #0
 806099c:	613b      	str	r3, [r7, #16]
 806099e:	4b1c      	ldr	r3, [pc, #112]	; (8060a10 <HAL_UART_MspInit+0x98>)
 80609a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80609a2:	4a1b      	ldr	r2, [pc, #108]	; (8060a10 <HAL_UART_MspInit+0x98>)
 80609a4:	f043 0320 	orr.w	r3, r3, #32
 80609a8:	6453      	str	r3, [r2, #68]	; 0x44
 80609aa:	4b19      	ldr	r3, [pc, #100]	; (8060a10 <HAL_UART_MspInit+0x98>)
 80609ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80609ae:	f003 0320 	and.w	r3, r3, #32
 80609b2:	613b      	str	r3, [r7, #16]
 80609b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80609b6:	2300      	movs	r3, #0
 80609b8:	60fb      	str	r3, [r7, #12]
 80609ba:	4b15      	ldr	r3, [pc, #84]	; (8060a10 <HAL_UART_MspInit+0x98>)
 80609bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80609be:	4a14      	ldr	r2, [pc, #80]	; (8060a10 <HAL_UART_MspInit+0x98>)
 80609c0:	f043 0304 	orr.w	r3, r3, #4
 80609c4:	6313      	str	r3, [r2, #48]	; 0x30
 80609c6:	4b12      	ldr	r3, [pc, #72]	; (8060a10 <HAL_UART_MspInit+0x98>)
 80609c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80609ca:	f003 0304 	and.w	r3, r3, #4
 80609ce:	60fb      	str	r3, [r7, #12]
 80609d0:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80609d2:	23c0      	movs	r3, #192	; 0xc0
 80609d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80609d6:	2302      	movs	r3, #2
 80609d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80609da:	2300      	movs	r3, #0
 80609dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80609de:	2303      	movs	r3, #3
 80609e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80609e2:	2308      	movs	r3, #8
 80609e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80609e6:	f107 0314 	add.w	r3, r7, #20
 80609ea:	4619      	mov	r1, r3
 80609ec:	4809      	ldr	r0, [pc, #36]	; (8060a14 <HAL_UART_MspInit+0x9c>)
 80609ee:	f000 fdb3 	bl	8061558 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80609f2:	2200      	movs	r2, #0
 80609f4:	2100      	movs	r1, #0
 80609f6:	2047      	movs	r0, #71	; 0x47
 80609f8:	f000 fa09 	bl	8060e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80609fc:	2047      	movs	r0, #71	; 0x47
 80609fe:	f000 fa22 	bl	8060e46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8060a02:	bf00      	nop
 8060a04:	3728      	adds	r7, #40	; 0x28
 8060a06:	46bd      	mov	sp, r7
 8060a08:	bd80      	pop	{r7, pc}
 8060a0a:	bf00      	nop
 8060a0c:	40011400 	.word	0x40011400
 8060a10:	40023800 	.word	0x40023800
 8060a14:	40020800 	.word	0x40020800

08060a18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8060a18:	b480      	push	{r7}
 8060a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8060a1c:	e7fe      	b.n	8060a1c <NMI_Handler+0x4>

08060a1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8060a1e:	b480      	push	{r7}
 8060a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8060a22:	e7fe      	b.n	8060a22 <HardFault_Handler+0x4>

08060a24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8060a24:	b480      	push	{r7}
 8060a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8060a28:	e7fe      	b.n	8060a28 <MemManage_Handler+0x4>

08060a2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8060a2a:	b480      	push	{r7}
 8060a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8060a2e:	e7fe      	b.n	8060a2e <BusFault_Handler+0x4>

08060a30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8060a30:	b480      	push	{r7}
 8060a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8060a34:	e7fe      	b.n	8060a34 <UsageFault_Handler+0x4>

08060a36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8060a36:	b480      	push	{r7}
 8060a38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8060a3a:	bf00      	nop
 8060a3c:	46bd      	mov	sp, r7
 8060a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8060a42:	4770      	bx	lr

08060a44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8060a44:	b480      	push	{r7}
 8060a46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8060a48:	bf00      	nop
 8060a4a:	46bd      	mov	sp, r7
 8060a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8060a50:	4770      	bx	lr

08060a52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8060a52:	b480      	push	{r7}
 8060a54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8060a56:	bf00      	nop
 8060a58:	46bd      	mov	sp, r7
 8060a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8060a5e:	4770      	bx	lr

08060a60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8060a60:	b580      	push	{r7, lr}
 8060a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8060a64:	f000 f89e 	bl	8060ba4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8060a68:	bf00      	nop
 8060a6a:	bd80      	pop	{r7, pc}

08060a6c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8060a6c:	b580      	push	{r7, lr}
 8060a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8060a70:	4802      	ldr	r0, [pc, #8]	; (8060a7c <USART6_IRQHandler+0x10>)
 8060a72:	f001 fc19 	bl	80622a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8060a76:	bf00      	nop
 8060a78:	bd80      	pop	{r7, pc}
 8060a7a:	bf00      	nop
 8060a7c:	20000034 	.word	0x20000034

08060a80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8060a80:	b480      	push	{r7}
 8060a82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8060a84:	4b07      	ldr	r3, [pc, #28]	; (8060aa4 <SystemInit+0x24>)
 8060a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8060a8a:	4a06      	ldr	r2, [pc, #24]	; (8060aa4 <SystemInit+0x24>)
 8060a8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8060a90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8060a94:	4b03      	ldr	r3, [pc, #12]	; (8060aa4 <SystemInit+0x24>)
 8060a96:	4a04      	ldr	r2, [pc, #16]	; (8060aa8 <SystemInit+0x28>)
 8060a98:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8060a9a:	bf00      	nop
 8060a9c:	46bd      	mov	sp, r7
 8060a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8060aa2:	4770      	bx	lr
 8060aa4:	e000ed00 	.word	0xe000ed00
 8060aa8:	08060000 	.word	0x08060000

08060aac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8060aac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8060ae4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8060ab0:	480d      	ldr	r0, [pc, #52]	; (8060ae8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8060ab2:	490e      	ldr	r1, [pc, #56]	; (8060aec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8060ab4:	4a0e      	ldr	r2, [pc, #56]	; (8060af0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8060ab6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8060ab8:	e002      	b.n	8060ac0 <LoopCopyDataInit>

08060aba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8060aba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8060abc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8060abe:	3304      	adds	r3, #4

08060ac0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8060ac0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8060ac2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8060ac4:	d3f9      	bcc.n	8060aba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8060ac6:	4a0b      	ldr	r2, [pc, #44]	; (8060af4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8060ac8:	4c0b      	ldr	r4, [pc, #44]	; (8060af8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8060aca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8060acc:	e001      	b.n	8060ad2 <LoopFillZerobss>

08060ace <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8060ace:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8060ad0:	3204      	adds	r2, #4

08060ad2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8060ad2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8060ad4:	d3fb      	bcc.n	8060ace <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8060ad6:	f7ff ffd3 	bl	8060a80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8060ada:	f002 fa2f 	bl	8062f3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8060ade:	f7ff fd99 	bl	8060614 <main>
  bx  lr    
 8060ae2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8060ae4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8060ae8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8060aec:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8060af0:	08062ffc 	.word	0x08062ffc
  ldr r2, =_sbss
 8060af4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8060af8:	2000009c 	.word	0x2000009c

08060afc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8060afc:	e7fe      	b.n	8060afc <ADC_IRQHandler>
	...

08060b00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8060b00:	b580      	push	{r7, lr}
 8060b02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8060b04:	4b0e      	ldr	r3, [pc, #56]	; (8060b40 <HAL_Init+0x40>)
 8060b06:	681b      	ldr	r3, [r3, #0]
 8060b08:	4a0d      	ldr	r2, [pc, #52]	; (8060b40 <HAL_Init+0x40>)
 8060b0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8060b0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8060b10:	4b0b      	ldr	r3, [pc, #44]	; (8060b40 <HAL_Init+0x40>)
 8060b12:	681b      	ldr	r3, [r3, #0]
 8060b14:	4a0a      	ldr	r2, [pc, #40]	; (8060b40 <HAL_Init+0x40>)
 8060b16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8060b1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8060b1c:	4b08      	ldr	r3, [pc, #32]	; (8060b40 <HAL_Init+0x40>)
 8060b1e:	681b      	ldr	r3, [r3, #0]
 8060b20:	4a07      	ldr	r2, [pc, #28]	; (8060b40 <HAL_Init+0x40>)
 8060b22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8060b26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8060b28:	2003      	movs	r0, #3
 8060b2a:	f000 f965 	bl	8060df8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8060b2e:	200f      	movs	r0, #15
 8060b30:	f000 f808 	bl	8060b44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8060b34:	f7ff fef8 	bl	8060928 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8060b38:	2300      	movs	r3, #0
}
 8060b3a:	4618      	mov	r0, r3
 8060b3c:	bd80      	pop	{r7, pc}
 8060b3e:	bf00      	nop
 8060b40:	40023c00 	.word	0x40023c00

08060b44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8060b44:	b580      	push	{r7, lr}
 8060b46:	b082      	sub	sp, #8
 8060b48:	af00      	add	r7, sp, #0
 8060b4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8060b4c:	4b12      	ldr	r3, [pc, #72]	; (8060b98 <HAL_InitTick+0x54>)
 8060b4e:	681a      	ldr	r2, [r3, #0]
 8060b50:	4b12      	ldr	r3, [pc, #72]	; (8060b9c <HAL_InitTick+0x58>)
 8060b52:	781b      	ldrb	r3, [r3, #0]
 8060b54:	4619      	mov	r1, r3
 8060b56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8060b5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8060b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8060b62:	4618      	mov	r0, r3
 8060b64:	f000 f981 	bl	8060e6a <HAL_SYSTICK_Config>
 8060b68:	4603      	mov	r3, r0
 8060b6a:	2b00      	cmp	r3, #0
 8060b6c:	d001      	beq.n	8060b72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8060b6e:	2301      	movs	r3, #1
 8060b70:	e00e      	b.n	8060b90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8060b72:	687b      	ldr	r3, [r7, #4]
 8060b74:	2b0f      	cmp	r3, #15
 8060b76:	d80a      	bhi.n	8060b8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8060b78:	2200      	movs	r2, #0
 8060b7a:	6879      	ldr	r1, [r7, #4]
 8060b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8060b80:	f000 f945 	bl	8060e0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8060b84:	4a06      	ldr	r2, [pc, #24]	; (8060ba0 <HAL_InitTick+0x5c>)
 8060b86:	687b      	ldr	r3, [r7, #4]
 8060b88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8060b8a:	2300      	movs	r3, #0
 8060b8c:	e000      	b.n	8060b90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8060b8e:	2301      	movs	r3, #1
}
 8060b90:	4618      	mov	r0, r3
 8060b92:	3708      	adds	r7, #8
 8060b94:	46bd      	mov	sp, r7
 8060b96:	bd80      	pop	{r7, pc}
 8060b98:	20000000 	.word	0x20000000
 8060b9c:	20000008 	.word	0x20000008
 8060ba0:	20000004 	.word	0x20000004

08060ba4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8060ba4:	b480      	push	{r7}
 8060ba6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8060ba8:	4b06      	ldr	r3, [pc, #24]	; (8060bc4 <HAL_IncTick+0x20>)
 8060baa:	781b      	ldrb	r3, [r3, #0]
 8060bac:	461a      	mov	r2, r3
 8060bae:	4b06      	ldr	r3, [pc, #24]	; (8060bc8 <HAL_IncTick+0x24>)
 8060bb0:	681b      	ldr	r3, [r3, #0]
 8060bb2:	4413      	add	r3, r2
 8060bb4:	4a04      	ldr	r2, [pc, #16]	; (8060bc8 <HAL_IncTick+0x24>)
 8060bb6:	6013      	str	r3, [r2, #0]
}
 8060bb8:	bf00      	nop
 8060bba:	46bd      	mov	sp, r7
 8060bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8060bc0:	4770      	bx	lr
 8060bc2:	bf00      	nop
 8060bc4:	20000008 	.word	0x20000008
 8060bc8:	20000078 	.word	0x20000078

08060bcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8060bcc:	b480      	push	{r7}
 8060bce:	af00      	add	r7, sp, #0
  return uwTick;
 8060bd0:	4b03      	ldr	r3, [pc, #12]	; (8060be0 <HAL_GetTick+0x14>)
 8060bd2:	681b      	ldr	r3, [r3, #0]
}
 8060bd4:	4618      	mov	r0, r3
 8060bd6:	46bd      	mov	sp, r7
 8060bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8060bdc:	4770      	bx	lr
 8060bde:	bf00      	nop
 8060be0:	20000078 	.word	0x20000078

08060be4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8060be4:	b580      	push	{r7, lr}
 8060be6:	b084      	sub	sp, #16
 8060be8:	af00      	add	r7, sp, #0
 8060bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8060bec:	f7ff ffee 	bl	8060bcc <HAL_GetTick>
 8060bf0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8060bf2:	687b      	ldr	r3, [r7, #4]
 8060bf4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8060bf6:	68fb      	ldr	r3, [r7, #12]
 8060bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8060bfc:	d005      	beq.n	8060c0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8060bfe:	4b0a      	ldr	r3, [pc, #40]	; (8060c28 <HAL_Delay+0x44>)
 8060c00:	781b      	ldrb	r3, [r3, #0]
 8060c02:	461a      	mov	r2, r3
 8060c04:	68fb      	ldr	r3, [r7, #12]
 8060c06:	4413      	add	r3, r2
 8060c08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8060c0a:	bf00      	nop
 8060c0c:	f7ff ffde 	bl	8060bcc <HAL_GetTick>
 8060c10:	4602      	mov	r2, r0
 8060c12:	68bb      	ldr	r3, [r7, #8]
 8060c14:	1ad3      	subs	r3, r2, r3
 8060c16:	68fa      	ldr	r2, [r7, #12]
 8060c18:	429a      	cmp	r2, r3
 8060c1a:	d8f7      	bhi.n	8060c0c <HAL_Delay+0x28>
  {
  }
}
 8060c1c:	bf00      	nop
 8060c1e:	bf00      	nop
 8060c20:	3710      	adds	r7, #16
 8060c22:	46bd      	mov	sp, r7
 8060c24:	bd80      	pop	{r7, pc}
 8060c26:	bf00      	nop
 8060c28:	20000008 	.word	0x20000008

08060c2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8060c2c:	b480      	push	{r7}
 8060c2e:	b085      	sub	sp, #20
 8060c30:	af00      	add	r7, sp, #0
 8060c32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8060c34:	687b      	ldr	r3, [r7, #4]
 8060c36:	f003 0307 	and.w	r3, r3, #7
 8060c3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8060c3c:	4b0c      	ldr	r3, [pc, #48]	; (8060c70 <__NVIC_SetPriorityGrouping+0x44>)
 8060c3e:	68db      	ldr	r3, [r3, #12]
 8060c40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8060c42:	68ba      	ldr	r2, [r7, #8]
 8060c44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8060c48:	4013      	ands	r3, r2
 8060c4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8060c4c:	68fb      	ldr	r3, [r7, #12]
 8060c4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8060c50:	68bb      	ldr	r3, [r7, #8]
 8060c52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8060c54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8060c58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8060c5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8060c5e:	4a04      	ldr	r2, [pc, #16]	; (8060c70 <__NVIC_SetPriorityGrouping+0x44>)
 8060c60:	68bb      	ldr	r3, [r7, #8]
 8060c62:	60d3      	str	r3, [r2, #12]
}
 8060c64:	bf00      	nop
 8060c66:	3714      	adds	r7, #20
 8060c68:	46bd      	mov	sp, r7
 8060c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8060c6e:	4770      	bx	lr
 8060c70:	e000ed00 	.word	0xe000ed00

08060c74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8060c74:	b480      	push	{r7}
 8060c76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8060c78:	4b04      	ldr	r3, [pc, #16]	; (8060c8c <__NVIC_GetPriorityGrouping+0x18>)
 8060c7a:	68db      	ldr	r3, [r3, #12]
 8060c7c:	0a1b      	lsrs	r3, r3, #8
 8060c7e:	f003 0307 	and.w	r3, r3, #7
}
 8060c82:	4618      	mov	r0, r3
 8060c84:	46bd      	mov	sp, r7
 8060c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8060c8a:	4770      	bx	lr
 8060c8c:	e000ed00 	.word	0xe000ed00

08060c90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8060c90:	b480      	push	{r7}
 8060c92:	b083      	sub	sp, #12
 8060c94:	af00      	add	r7, sp, #0
 8060c96:	4603      	mov	r3, r0
 8060c98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8060c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8060c9e:	2b00      	cmp	r3, #0
 8060ca0:	db0b      	blt.n	8060cba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8060ca2:	79fb      	ldrb	r3, [r7, #7]
 8060ca4:	f003 021f 	and.w	r2, r3, #31
 8060ca8:	4907      	ldr	r1, [pc, #28]	; (8060cc8 <__NVIC_EnableIRQ+0x38>)
 8060caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8060cae:	095b      	lsrs	r3, r3, #5
 8060cb0:	2001      	movs	r0, #1
 8060cb2:	fa00 f202 	lsl.w	r2, r0, r2
 8060cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8060cba:	bf00      	nop
 8060cbc:	370c      	adds	r7, #12
 8060cbe:	46bd      	mov	sp, r7
 8060cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8060cc4:	4770      	bx	lr
 8060cc6:	bf00      	nop
 8060cc8:	e000e100 	.word	0xe000e100

08060ccc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8060ccc:	b480      	push	{r7}
 8060cce:	b083      	sub	sp, #12
 8060cd0:	af00      	add	r7, sp, #0
 8060cd2:	4603      	mov	r3, r0
 8060cd4:	6039      	str	r1, [r7, #0]
 8060cd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8060cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8060cdc:	2b00      	cmp	r3, #0
 8060cde:	db0a      	blt.n	8060cf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8060ce0:	683b      	ldr	r3, [r7, #0]
 8060ce2:	b2da      	uxtb	r2, r3
 8060ce4:	490c      	ldr	r1, [pc, #48]	; (8060d18 <__NVIC_SetPriority+0x4c>)
 8060ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8060cea:	0112      	lsls	r2, r2, #4
 8060cec:	b2d2      	uxtb	r2, r2
 8060cee:	440b      	add	r3, r1
 8060cf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8060cf4:	e00a      	b.n	8060d0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8060cf6:	683b      	ldr	r3, [r7, #0]
 8060cf8:	b2da      	uxtb	r2, r3
 8060cfa:	4908      	ldr	r1, [pc, #32]	; (8060d1c <__NVIC_SetPriority+0x50>)
 8060cfc:	79fb      	ldrb	r3, [r7, #7]
 8060cfe:	f003 030f 	and.w	r3, r3, #15
 8060d02:	3b04      	subs	r3, #4
 8060d04:	0112      	lsls	r2, r2, #4
 8060d06:	b2d2      	uxtb	r2, r2
 8060d08:	440b      	add	r3, r1
 8060d0a:	761a      	strb	r2, [r3, #24]
}
 8060d0c:	bf00      	nop
 8060d0e:	370c      	adds	r7, #12
 8060d10:	46bd      	mov	sp, r7
 8060d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8060d16:	4770      	bx	lr
 8060d18:	e000e100 	.word	0xe000e100
 8060d1c:	e000ed00 	.word	0xe000ed00

08060d20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8060d20:	b480      	push	{r7}
 8060d22:	b089      	sub	sp, #36	; 0x24
 8060d24:	af00      	add	r7, sp, #0
 8060d26:	60f8      	str	r0, [r7, #12]
 8060d28:	60b9      	str	r1, [r7, #8]
 8060d2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8060d2c:	68fb      	ldr	r3, [r7, #12]
 8060d2e:	f003 0307 	and.w	r3, r3, #7
 8060d32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8060d34:	69fb      	ldr	r3, [r7, #28]
 8060d36:	f1c3 0307 	rsb	r3, r3, #7
 8060d3a:	2b04      	cmp	r3, #4
 8060d3c:	bf28      	it	cs
 8060d3e:	2304      	movcs	r3, #4
 8060d40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8060d42:	69fb      	ldr	r3, [r7, #28]
 8060d44:	3304      	adds	r3, #4
 8060d46:	2b06      	cmp	r3, #6
 8060d48:	d902      	bls.n	8060d50 <NVIC_EncodePriority+0x30>
 8060d4a:	69fb      	ldr	r3, [r7, #28]
 8060d4c:	3b03      	subs	r3, #3
 8060d4e:	e000      	b.n	8060d52 <NVIC_EncodePriority+0x32>
 8060d50:	2300      	movs	r3, #0
 8060d52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8060d54:	f04f 32ff 	mov.w	r2, #4294967295
 8060d58:	69bb      	ldr	r3, [r7, #24]
 8060d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8060d5e:	43da      	mvns	r2, r3
 8060d60:	68bb      	ldr	r3, [r7, #8]
 8060d62:	401a      	ands	r2, r3
 8060d64:	697b      	ldr	r3, [r7, #20]
 8060d66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8060d68:	f04f 31ff 	mov.w	r1, #4294967295
 8060d6c:	697b      	ldr	r3, [r7, #20]
 8060d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8060d72:	43d9      	mvns	r1, r3
 8060d74:	687b      	ldr	r3, [r7, #4]
 8060d76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8060d78:	4313      	orrs	r3, r2
         );
}
 8060d7a:	4618      	mov	r0, r3
 8060d7c:	3724      	adds	r7, #36	; 0x24
 8060d7e:	46bd      	mov	sp, r7
 8060d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8060d84:	4770      	bx	lr
	...

08060d88 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8060d88:	b480      	push	{r7}
 8060d8a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8060d8c:	f3bf 8f4f 	dsb	sy
}
 8060d90:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8060d92:	4b06      	ldr	r3, [pc, #24]	; (8060dac <__NVIC_SystemReset+0x24>)
 8060d94:	68db      	ldr	r3, [r3, #12]
 8060d96:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8060d9a:	4904      	ldr	r1, [pc, #16]	; (8060dac <__NVIC_SystemReset+0x24>)
 8060d9c:	4b04      	ldr	r3, [pc, #16]	; (8060db0 <__NVIC_SystemReset+0x28>)
 8060d9e:	4313      	orrs	r3, r2
 8060da0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8060da2:	f3bf 8f4f 	dsb	sy
}
 8060da6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8060da8:	bf00      	nop
 8060daa:	e7fd      	b.n	8060da8 <__NVIC_SystemReset+0x20>
 8060dac:	e000ed00 	.word	0xe000ed00
 8060db0:	05fa0004 	.word	0x05fa0004

08060db4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8060db4:	b580      	push	{r7, lr}
 8060db6:	b082      	sub	sp, #8
 8060db8:	af00      	add	r7, sp, #0
 8060dba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8060dbc:	687b      	ldr	r3, [r7, #4]
 8060dbe:	3b01      	subs	r3, #1
 8060dc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8060dc4:	d301      	bcc.n	8060dca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8060dc6:	2301      	movs	r3, #1
 8060dc8:	e00f      	b.n	8060dea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8060dca:	4a0a      	ldr	r2, [pc, #40]	; (8060df4 <SysTick_Config+0x40>)
 8060dcc:	687b      	ldr	r3, [r7, #4]
 8060dce:	3b01      	subs	r3, #1
 8060dd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8060dd2:	210f      	movs	r1, #15
 8060dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8060dd8:	f7ff ff78 	bl	8060ccc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8060ddc:	4b05      	ldr	r3, [pc, #20]	; (8060df4 <SysTick_Config+0x40>)
 8060dde:	2200      	movs	r2, #0
 8060de0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8060de2:	4b04      	ldr	r3, [pc, #16]	; (8060df4 <SysTick_Config+0x40>)
 8060de4:	2207      	movs	r2, #7
 8060de6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8060de8:	2300      	movs	r3, #0
}
 8060dea:	4618      	mov	r0, r3
 8060dec:	3708      	adds	r7, #8
 8060dee:	46bd      	mov	sp, r7
 8060df0:	bd80      	pop	{r7, pc}
 8060df2:	bf00      	nop
 8060df4:	e000e010 	.word	0xe000e010

08060df8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8060df8:	b580      	push	{r7, lr}
 8060dfa:	b082      	sub	sp, #8
 8060dfc:	af00      	add	r7, sp, #0
 8060dfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8060e00:	6878      	ldr	r0, [r7, #4]
 8060e02:	f7ff ff13 	bl	8060c2c <__NVIC_SetPriorityGrouping>
}
 8060e06:	bf00      	nop
 8060e08:	3708      	adds	r7, #8
 8060e0a:	46bd      	mov	sp, r7
 8060e0c:	bd80      	pop	{r7, pc}

08060e0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8060e0e:	b580      	push	{r7, lr}
 8060e10:	b086      	sub	sp, #24
 8060e12:	af00      	add	r7, sp, #0
 8060e14:	4603      	mov	r3, r0
 8060e16:	60b9      	str	r1, [r7, #8]
 8060e18:	607a      	str	r2, [r7, #4]
 8060e1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8060e1c:	2300      	movs	r3, #0
 8060e1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8060e20:	f7ff ff28 	bl	8060c74 <__NVIC_GetPriorityGrouping>
 8060e24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8060e26:	687a      	ldr	r2, [r7, #4]
 8060e28:	68b9      	ldr	r1, [r7, #8]
 8060e2a:	6978      	ldr	r0, [r7, #20]
 8060e2c:	f7ff ff78 	bl	8060d20 <NVIC_EncodePriority>
 8060e30:	4602      	mov	r2, r0
 8060e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8060e36:	4611      	mov	r1, r2
 8060e38:	4618      	mov	r0, r3
 8060e3a:	f7ff ff47 	bl	8060ccc <__NVIC_SetPriority>
}
 8060e3e:	bf00      	nop
 8060e40:	3718      	adds	r7, #24
 8060e42:	46bd      	mov	sp, r7
 8060e44:	bd80      	pop	{r7, pc}

08060e46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8060e46:	b580      	push	{r7, lr}
 8060e48:	b082      	sub	sp, #8
 8060e4a:	af00      	add	r7, sp, #0
 8060e4c:	4603      	mov	r3, r0
 8060e4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8060e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8060e54:	4618      	mov	r0, r3
 8060e56:	f7ff ff1b 	bl	8060c90 <__NVIC_EnableIRQ>
}
 8060e5a:	bf00      	nop
 8060e5c:	3708      	adds	r7, #8
 8060e5e:	46bd      	mov	sp, r7
 8060e60:	bd80      	pop	{r7, pc}

08060e62 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8060e62:	b580      	push	{r7, lr}
 8060e64:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8060e66:	f7ff ff8f 	bl	8060d88 <__NVIC_SystemReset>

08060e6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8060e6a:	b580      	push	{r7, lr}
 8060e6c:	b082      	sub	sp, #8
 8060e6e:	af00      	add	r7, sp, #0
 8060e70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8060e72:	6878      	ldr	r0, [r7, #4]
 8060e74:	f7ff ff9e 	bl	8060db4 <SysTick_Config>
 8060e78:	4603      	mov	r3, r0
}
 8060e7a:	4618      	mov	r0, r3
 8060e7c:	3708      	adds	r7, #8
 8060e7e:	46bd      	mov	sp, r7
 8060e80:	bd80      	pop	{r7, pc}

08060e82 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8060e82:	b580      	push	{r7, lr}
 8060e84:	b084      	sub	sp, #16
 8060e86:	af00      	add	r7, sp, #0
 8060e88:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8060e8a:	687b      	ldr	r3, [r7, #4]
 8060e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8060e8e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8060e90:	f7ff fe9c 	bl	8060bcc <HAL_GetTick>
 8060e94:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8060e96:	687b      	ldr	r3, [r7, #4]
 8060e98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8060e9c:	b2db      	uxtb	r3, r3
 8060e9e:	2b02      	cmp	r3, #2
 8060ea0:	d008      	beq.n	8060eb4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8060ea2:	687b      	ldr	r3, [r7, #4]
 8060ea4:	2280      	movs	r2, #128	; 0x80
 8060ea6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8060ea8:	687b      	ldr	r3, [r7, #4]
 8060eaa:	2200      	movs	r2, #0
 8060eac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8060eb0:	2301      	movs	r3, #1
 8060eb2:	e052      	b.n	8060f5a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8060eb4:	687b      	ldr	r3, [r7, #4]
 8060eb6:	681b      	ldr	r3, [r3, #0]
 8060eb8:	681a      	ldr	r2, [r3, #0]
 8060eba:	687b      	ldr	r3, [r7, #4]
 8060ebc:	681b      	ldr	r3, [r3, #0]
 8060ebe:	f022 0216 	bic.w	r2, r2, #22
 8060ec2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8060ec4:	687b      	ldr	r3, [r7, #4]
 8060ec6:	681b      	ldr	r3, [r3, #0]
 8060ec8:	695a      	ldr	r2, [r3, #20]
 8060eca:	687b      	ldr	r3, [r7, #4]
 8060ecc:	681b      	ldr	r3, [r3, #0]
 8060ece:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8060ed2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8060ed4:	687b      	ldr	r3, [r7, #4]
 8060ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8060ed8:	2b00      	cmp	r3, #0
 8060eda:	d103      	bne.n	8060ee4 <HAL_DMA_Abort+0x62>
 8060edc:	687b      	ldr	r3, [r7, #4]
 8060ede:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8060ee0:	2b00      	cmp	r3, #0
 8060ee2:	d007      	beq.n	8060ef4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8060ee4:	687b      	ldr	r3, [r7, #4]
 8060ee6:	681b      	ldr	r3, [r3, #0]
 8060ee8:	681a      	ldr	r2, [r3, #0]
 8060eea:	687b      	ldr	r3, [r7, #4]
 8060eec:	681b      	ldr	r3, [r3, #0]
 8060eee:	f022 0208 	bic.w	r2, r2, #8
 8060ef2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8060ef4:	687b      	ldr	r3, [r7, #4]
 8060ef6:	681b      	ldr	r3, [r3, #0]
 8060ef8:	681a      	ldr	r2, [r3, #0]
 8060efa:	687b      	ldr	r3, [r7, #4]
 8060efc:	681b      	ldr	r3, [r3, #0]
 8060efe:	f022 0201 	bic.w	r2, r2, #1
 8060f02:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8060f04:	e013      	b.n	8060f2e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8060f06:	f7ff fe61 	bl	8060bcc <HAL_GetTick>
 8060f0a:	4602      	mov	r2, r0
 8060f0c:	68bb      	ldr	r3, [r7, #8]
 8060f0e:	1ad3      	subs	r3, r2, r3
 8060f10:	2b05      	cmp	r3, #5
 8060f12:	d90c      	bls.n	8060f2e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8060f14:	687b      	ldr	r3, [r7, #4]
 8060f16:	2220      	movs	r2, #32
 8060f18:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8060f1a:	687b      	ldr	r3, [r7, #4]
 8060f1c:	2203      	movs	r2, #3
 8060f1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8060f22:	687b      	ldr	r3, [r7, #4]
 8060f24:	2200      	movs	r2, #0
 8060f26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8060f2a:	2303      	movs	r3, #3
 8060f2c:	e015      	b.n	8060f5a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8060f2e:	687b      	ldr	r3, [r7, #4]
 8060f30:	681b      	ldr	r3, [r3, #0]
 8060f32:	681b      	ldr	r3, [r3, #0]
 8060f34:	f003 0301 	and.w	r3, r3, #1
 8060f38:	2b00      	cmp	r3, #0
 8060f3a:	d1e4      	bne.n	8060f06 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8060f3c:	687b      	ldr	r3, [r7, #4]
 8060f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8060f40:	223f      	movs	r2, #63	; 0x3f
 8060f42:	409a      	lsls	r2, r3
 8060f44:	68fb      	ldr	r3, [r7, #12]
 8060f46:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8060f48:	687b      	ldr	r3, [r7, #4]
 8060f4a:	2201      	movs	r2, #1
 8060f4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8060f50:	687b      	ldr	r3, [r7, #4]
 8060f52:	2200      	movs	r2, #0
 8060f54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8060f58:	2300      	movs	r3, #0
}
 8060f5a:	4618      	mov	r0, r3
 8060f5c:	3710      	adds	r7, #16
 8060f5e:	46bd      	mov	sp, r7
 8060f60:	bd80      	pop	{r7, pc}

08060f62 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8060f62:	b480      	push	{r7}
 8060f64:	b083      	sub	sp, #12
 8060f66:	af00      	add	r7, sp, #0
 8060f68:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8060f6a:	687b      	ldr	r3, [r7, #4]
 8060f6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8060f70:	b2db      	uxtb	r3, r3
 8060f72:	2b02      	cmp	r3, #2
 8060f74:	d004      	beq.n	8060f80 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8060f76:	687b      	ldr	r3, [r7, #4]
 8060f78:	2280      	movs	r2, #128	; 0x80
 8060f7a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8060f7c:	2301      	movs	r3, #1
 8060f7e:	e00c      	b.n	8060f9a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8060f80:	687b      	ldr	r3, [r7, #4]
 8060f82:	2205      	movs	r2, #5
 8060f84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8060f88:	687b      	ldr	r3, [r7, #4]
 8060f8a:	681b      	ldr	r3, [r3, #0]
 8060f8c:	681a      	ldr	r2, [r3, #0]
 8060f8e:	687b      	ldr	r3, [r7, #4]
 8060f90:	681b      	ldr	r3, [r3, #0]
 8060f92:	f022 0201 	bic.w	r2, r2, #1
 8060f96:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8060f98:	2300      	movs	r3, #0
}
 8060f9a:	4618      	mov	r0, r3
 8060f9c:	370c      	adds	r7, #12
 8060f9e:	46bd      	mov	sp, r7
 8060fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8060fa4:	4770      	bx	lr
	...

08060fa8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8060fa8:	b580      	push	{r7, lr}
 8060faa:	b086      	sub	sp, #24
 8060fac:	af00      	add	r7, sp, #0
 8060fae:	60f8      	str	r0, [r7, #12]
 8060fb0:	60b9      	str	r1, [r7, #8]
 8060fb2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8060fb6:	2301      	movs	r3, #1
 8060fb8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8060fba:	4b23      	ldr	r3, [pc, #140]	; (8061048 <HAL_FLASH_Program+0xa0>)
 8060fbc:	7e1b      	ldrb	r3, [r3, #24]
 8060fbe:	2b01      	cmp	r3, #1
 8060fc0:	d101      	bne.n	8060fc6 <HAL_FLASH_Program+0x1e>
 8060fc2:	2302      	movs	r3, #2
 8060fc4:	e03b      	b.n	806103e <HAL_FLASH_Program+0x96>
 8060fc6:	4b20      	ldr	r3, [pc, #128]	; (8061048 <HAL_FLASH_Program+0xa0>)
 8060fc8:	2201      	movs	r2, #1
 8060fca:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8060fcc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8060fd0:	f000 f870 	bl	80610b4 <FLASH_WaitForLastOperation>
 8060fd4:	4603      	mov	r3, r0
 8060fd6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8060fd8:	7dfb      	ldrb	r3, [r7, #23]
 8060fda:	2b00      	cmp	r3, #0
 8060fdc:	d12b      	bne.n	8061036 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8060fde:	68fb      	ldr	r3, [r7, #12]
 8060fe0:	2b00      	cmp	r3, #0
 8060fe2:	d105      	bne.n	8060ff0 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8060fe4:	783b      	ldrb	r3, [r7, #0]
 8060fe6:	4619      	mov	r1, r3
 8060fe8:	68b8      	ldr	r0, [r7, #8]
 8060fea:	f000 f91b 	bl	8061224 <FLASH_Program_Byte>
 8060fee:	e016      	b.n	806101e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8060ff0:	68fb      	ldr	r3, [r7, #12]
 8060ff2:	2b01      	cmp	r3, #1
 8060ff4:	d105      	bne.n	8061002 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8060ff6:	883b      	ldrh	r3, [r7, #0]
 8060ff8:	4619      	mov	r1, r3
 8060ffa:	68b8      	ldr	r0, [r7, #8]
 8060ffc:	f000 f8ee 	bl	80611dc <FLASH_Program_HalfWord>
 8061000:	e00d      	b.n	806101e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8061002:	68fb      	ldr	r3, [r7, #12]
 8061004:	2b02      	cmp	r3, #2
 8061006:	d105      	bne.n	8061014 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8061008:	683b      	ldr	r3, [r7, #0]
 806100a:	4619      	mov	r1, r3
 806100c:	68b8      	ldr	r0, [r7, #8]
 806100e:	f000 f8c3 	bl	8061198 <FLASH_Program_Word>
 8061012:	e004      	b.n	806101e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8061014:	e9d7 2300 	ldrd	r2, r3, [r7]
 8061018:	68b8      	ldr	r0, [r7, #8]
 806101a:	f000 f88b 	bl	8061134 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 806101e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8061022:	f000 f847 	bl	80610b4 <FLASH_WaitForLastOperation>
 8061026:	4603      	mov	r3, r0
 8061028:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 806102a:	4b08      	ldr	r3, [pc, #32]	; (806104c <HAL_FLASH_Program+0xa4>)
 806102c:	691b      	ldr	r3, [r3, #16]
 806102e:	4a07      	ldr	r2, [pc, #28]	; (806104c <HAL_FLASH_Program+0xa4>)
 8061030:	f023 0301 	bic.w	r3, r3, #1
 8061034:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8061036:	4b04      	ldr	r3, [pc, #16]	; (8061048 <HAL_FLASH_Program+0xa0>)
 8061038:	2200      	movs	r2, #0
 806103a:	761a      	strb	r2, [r3, #24]
  
  return status;
 806103c:	7dfb      	ldrb	r3, [r7, #23]
}
 806103e:	4618      	mov	r0, r3
 8061040:	3718      	adds	r7, #24
 8061042:	46bd      	mov	sp, r7
 8061044:	bd80      	pop	{r7, pc}
 8061046:	bf00      	nop
 8061048:	2000007c 	.word	0x2000007c
 806104c:	40023c00 	.word	0x40023c00

08061050 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8061050:	b480      	push	{r7}
 8061052:	b083      	sub	sp, #12
 8061054:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8061056:	2300      	movs	r3, #0
 8061058:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 806105a:	4b0b      	ldr	r3, [pc, #44]	; (8061088 <HAL_FLASH_Unlock+0x38>)
 806105c:	691b      	ldr	r3, [r3, #16]
 806105e:	2b00      	cmp	r3, #0
 8061060:	da0b      	bge.n	806107a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8061062:	4b09      	ldr	r3, [pc, #36]	; (8061088 <HAL_FLASH_Unlock+0x38>)
 8061064:	4a09      	ldr	r2, [pc, #36]	; (806108c <HAL_FLASH_Unlock+0x3c>)
 8061066:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8061068:	4b07      	ldr	r3, [pc, #28]	; (8061088 <HAL_FLASH_Unlock+0x38>)
 806106a:	4a09      	ldr	r2, [pc, #36]	; (8061090 <HAL_FLASH_Unlock+0x40>)
 806106c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 806106e:	4b06      	ldr	r3, [pc, #24]	; (8061088 <HAL_FLASH_Unlock+0x38>)
 8061070:	691b      	ldr	r3, [r3, #16]
 8061072:	2b00      	cmp	r3, #0
 8061074:	da01      	bge.n	806107a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8061076:	2301      	movs	r3, #1
 8061078:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 806107a:	79fb      	ldrb	r3, [r7, #7]
}
 806107c:	4618      	mov	r0, r3
 806107e:	370c      	adds	r7, #12
 8061080:	46bd      	mov	sp, r7
 8061082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8061086:	4770      	bx	lr
 8061088:	40023c00 	.word	0x40023c00
 806108c:	45670123 	.word	0x45670123
 8061090:	cdef89ab 	.word	0xcdef89ab

08061094 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8061094:	b480      	push	{r7}
 8061096:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8061098:	4b05      	ldr	r3, [pc, #20]	; (80610b0 <HAL_FLASH_Lock+0x1c>)
 806109a:	691b      	ldr	r3, [r3, #16]
 806109c:	4a04      	ldr	r2, [pc, #16]	; (80610b0 <HAL_FLASH_Lock+0x1c>)
 806109e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80610a2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80610a4:	2300      	movs	r3, #0
}
 80610a6:	4618      	mov	r0, r3
 80610a8:	46bd      	mov	sp, r7
 80610aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80610ae:	4770      	bx	lr
 80610b0:	40023c00 	.word	0x40023c00

080610b4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80610b4:	b580      	push	{r7, lr}
 80610b6:	b084      	sub	sp, #16
 80610b8:	af00      	add	r7, sp, #0
 80610ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80610bc:	2300      	movs	r3, #0
 80610be:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80610c0:	4b1a      	ldr	r3, [pc, #104]	; (806112c <FLASH_WaitForLastOperation+0x78>)
 80610c2:	2200      	movs	r2, #0
 80610c4:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80610c6:	f7ff fd81 	bl	8060bcc <HAL_GetTick>
 80610ca:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80610cc:	e010      	b.n	80610f0 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80610ce:	687b      	ldr	r3, [r7, #4]
 80610d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80610d4:	d00c      	beq.n	80610f0 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80610d6:	687b      	ldr	r3, [r7, #4]
 80610d8:	2b00      	cmp	r3, #0
 80610da:	d007      	beq.n	80610ec <FLASH_WaitForLastOperation+0x38>
 80610dc:	f7ff fd76 	bl	8060bcc <HAL_GetTick>
 80610e0:	4602      	mov	r2, r0
 80610e2:	68fb      	ldr	r3, [r7, #12]
 80610e4:	1ad3      	subs	r3, r2, r3
 80610e6:	687a      	ldr	r2, [r7, #4]
 80610e8:	429a      	cmp	r2, r3
 80610ea:	d201      	bcs.n	80610f0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80610ec:	2303      	movs	r3, #3
 80610ee:	e019      	b.n	8061124 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80610f0:	4b0f      	ldr	r3, [pc, #60]	; (8061130 <FLASH_WaitForLastOperation+0x7c>)
 80610f2:	68db      	ldr	r3, [r3, #12]
 80610f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80610f8:	2b00      	cmp	r3, #0
 80610fa:	d1e8      	bne.n	80610ce <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80610fc:	4b0c      	ldr	r3, [pc, #48]	; (8061130 <FLASH_WaitForLastOperation+0x7c>)
 80610fe:	68db      	ldr	r3, [r3, #12]
 8061100:	f003 0301 	and.w	r3, r3, #1
 8061104:	2b00      	cmp	r3, #0
 8061106:	d002      	beq.n	806110e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8061108:	4b09      	ldr	r3, [pc, #36]	; (8061130 <FLASH_WaitForLastOperation+0x7c>)
 806110a:	2201      	movs	r2, #1
 806110c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 806110e:	4b08      	ldr	r3, [pc, #32]	; (8061130 <FLASH_WaitForLastOperation+0x7c>)
 8061110:	68db      	ldr	r3, [r3, #12]
 8061112:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8061116:	2b00      	cmp	r3, #0
 8061118:	d003      	beq.n	8061122 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 806111a:	f000 f8a5 	bl	8061268 <FLASH_SetErrorCode>
    return HAL_ERROR;
 806111e:	2301      	movs	r3, #1
 8061120:	e000      	b.n	8061124 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8061122:	2300      	movs	r3, #0
  
}  
 8061124:	4618      	mov	r0, r3
 8061126:	3710      	adds	r7, #16
 8061128:	46bd      	mov	sp, r7
 806112a:	bd80      	pop	{r7, pc}
 806112c:	2000007c 	.word	0x2000007c
 8061130:	40023c00 	.word	0x40023c00

08061134 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8061134:	b480      	push	{r7}
 8061136:	b085      	sub	sp, #20
 8061138:	af00      	add	r7, sp, #0
 806113a:	60f8      	str	r0, [r7, #12]
 806113c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8061140:	4b14      	ldr	r3, [pc, #80]	; (8061194 <FLASH_Program_DoubleWord+0x60>)
 8061142:	691b      	ldr	r3, [r3, #16]
 8061144:	4a13      	ldr	r2, [pc, #76]	; (8061194 <FLASH_Program_DoubleWord+0x60>)
 8061146:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 806114a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 806114c:	4b11      	ldr	r3, [pc, #68]	; (8061194 <FLASH_Program_DoubleWord+0x60>)
 806114e:	691b      	ldr	r3, [r3, #16]
 8061150:	4a10      	ldr	r2, [pc, #64]	; (8061194 <FLASH_Program_DoubleWord+0x60>)
 8061152:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8061156:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8061158:	4b0e      	ldr	r3, [pc, #56]	; (8061194 <FLASH_Program_DoubleWord+0x60>)
 806115a:	691b      	ldr	r3, [r3, #16]
 806115c:	4a0d      	ldr	r2, [pc, #52]	; (8061194 <FLASH_Program_DoubleWord+0x60>)
 806115e:	f043 0301 	orr.w	r3, r3, #1
 8061162:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8061164:	68fb      	ldr	r3, [r7, #12]
 8061166:	683a      	ldr	r2, [r7, #0]
 8061168:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 806116a:	f3bf 8f6f 	isb	sy
}
 806116e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8061170:	e9d7 0100 	ldrd	r0, r1, [r7]
 8061174:	f04f 0200 	mov.w	r2, #0
 8061178:	f04f 0300 	mov.w	r3, #0
 806117c:	000a      	movs	r2, r1
 806117e:	2300      	movs	r3, #0
 8061180:	68f9      	ldr	r1, [r7, #12]
 8061182:	3104      	adds	r1, #4
 8061184:	4613      	mov	r3, r2
 8061186:	600b      	str	r3, [r1, #0]
}
 8061188:	bf00      	nop
 806118a:	3714      	adds	r7, #20
 806118c:	46bd      	mov	sp, r7
 806118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8061192:	4770      	bx	lr
 8061194:	40023c00 	.word	0x40023c00

08061198 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8061198:	b480      	push	{r7}
 806119a:	b083      	sub	sp, #12
 806119c:	af00      	add	r7, sp, #0
 806119e:	6078      	str	r0, [r7, #4]
 80611a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80611a2:	4b0d      	ldr	r3, [pc, #52]	; (80611d8 <FLASH_Program_Word+0x40>)
 80611a4:	691b      	ldr	r3, [r3, #16]
 80611a6:	4a0c      	ldr	r2, [pc, #48]	; (80611d8 <FLASH_Program_Word+0x40>)
 80611a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80611ac:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80611ae:	4b0a      	ldr	r3, [pc, #40]	; (80611d8 <FLASH_Program_Word+0x40>)
 80611b0:	691b      	ldr	r3, [r3, #16]
 80611b2:	4a09      	ldr	r2, [pc, #36]	; (80611d8 <FLASH_Program_Word+0x40>)
 80611b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80611b8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80611ba:	4b07      	ldr	r3, [pc, #28]	; (80611d8 <FLASH_Program_Word+0x40>)
 80611bc:	691b      	ldr	r3, [r3, #16]
 80611be:	4a06      	ldr	r2, [pc, #24]	; (80611d8 <FLASH_Program_Word+0x40>)
 80611c0:	f043 0301 	orr.w	r3, r3, #1
 80611c4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80611c6:	687b      	ldr	r3, [r7, #4]
 80611c8:	683a      	ldr	r2, [r7, #0]
 80611ca:	601a      	str	r2, [r3, #0]
}
 80611cc:	bf00      	nop
 80611ce:	370c      	adds	r7, #12
 80611d0:	46bd      	mov	sp, r7
 80611d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80611d6:	4770      	bx	lr
 80611d8:	40023c00 	.word	0x40023c00

080611dc <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80611dc:	b480      	push	{r7}
 80611de:	b083      	sub	sp, #12
 80611e0:	af00      	add	r7, sp, #0
 80611e2:	6078      	str	r0, [r7, #4]
 80611e4:	460b      	mov	r3, r1
 80611e6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80611e8:	4b0d      	ldr	r3, [pc, #52]	; (8061220 <FLASH_Program_HalfWord+0x44>)
 80611ea:	691b      	ldr	r3, [r3, #16]
 80611ec:	4a0c      	ldr	r2, [pc, #48]	; (8061220 <FLASH_Program_HalfWord+0x44>)
 80611ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80611f2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80611f4:	4b0a      	ldr	r3, [pc, #40]	; (8061220 <FLASH_Program_HalfWord+0x44>)
 80611f6:	691b      	ldr	r3, [r3, #16]
 80611f8:	4a09      	ldr	r2, [pc, #36]	; (8061220 <FLASH_Program_HalfWord+0x44>)
 80611fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80611fe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8061200:	4b07      	ldr	r3, [pc, #28]	; (8061220 <FLASH_Program_HalfWord+0x44>)
 8061202:	691b      	ldr	r3, [r3, #16]
 8061204:	4a06      	ldr	r2, [pc, #24]	; (8061220 <FLASH_Program_HalfWord+0x44>)
 8061206:	f043 0301 	orr.w	r3, r3, #1
 806120a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 806120c:	687b      	ldr	r3, [r7, #4]
 806120e:	887a      	ldrh	r2, [r7, #2]
 8061210:	801a      	strh	r2, [r3, #0]
}
 8061212:	bf00      	nop
 8061214:	370c      	adds	r7, #12
 8061216:	46bd      	mov	sp, r7
 8061218:	f85d 7b04 	ldr.w	r7, [sp], #4
 806121c:	4770      	bx	lr
 806121e:	bf00      	nop
 8061220:	40023c00 	.word	0x40023c00

08061224 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8061224:	b480      	push	{r7}
 8061226:	b083      	sub	sp, #12
 8061228:	af00      	add	r7, sp, #0
 806122a:	6078      	str	r0, [r7, #4]
 806122c:	460b      	mov	r3, r1
 806122e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8061230:	4b0c      	ldr	r3, [pc, #48]	; (8061264 <FLASH_Program_Byte+0x40>)
 8061232:	691b      	ldr	r3, [r3, #16]
 8061234:	4a0b      	ldr	r2, [pc, #44]	; (8061264 <FLASH_Program_Byte+0x40>)
 8061236:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 806123a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 806123c:	4b09      	ldr	r3, [pc, #36]	; (8061264 <FLASH_Program_Byte+0x40>)
 806123e:	4a09      	ldr	r2, [pc, #36]	; (8061264 <FLASH_Program_Byte+0x40>)
 8061240:	691b      	ldr	r3, [r3, #16]
 8061242:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8061244:	4b07      	ldr	r3, [pc, #28]	; (8061264 <FLASH_Program_Byte+0x40>)
 8061246:	691b      	ldr	r3, [r3, #16]
 8061248:	4a06      	ldr	r2, [pc, #24]	; (8061264 <FLASH_Program_Byte+0x40>)
 806124a:	f043 0301 	orr.w	r3, r3, #1
 806124e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8061250:	687b      	ldr	r3, [r7, #4]
 8061252:	78fa      	ldrb	r2, [r7, #3]
 8061254:	701a      	strb	r2, [r3, #0]
}
 8061256:	bf00      	nop
 8061258:	370c      	adds	r7, #12
 806125a:	46bd      	mov	sp, r7
 806125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8061260:	4770      	bx	lr
 8061262:	bf00      	nop
 8061264:	40023c00 	.word	0x40023c00

08061268 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8061268:	b480      	push	{r7}
 806126a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 806126c:	4b27      	ldr	r3, [pc, #156]	; (806130c <FLASH_SetErrorCode+0xa4>)
 806126e:	68db      	ldr	r3, [r3, #12]
 8061270:	f003 0310 	and.w	r3, r3, #16
 8061274:	2b00      	cmp	r3, #0
 8061276:	d008      	beq.n	806128a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8061278:	4b25      	ldr	r3, [pc, #148]	; (8061310 <FLASH_SetErrorCode+0xa8>)
 806127a:	69db      	ldr	r3, [r3, #28]
 806127c:	f043 0310 	orr.w	r3, r3, #16
 8061280:	4a23      	ldr	r2, [pc, #140]	; (8061310 <FLASH_SetErrorCode+0xa8>)
 8061282:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8061284:	4b21      	ldr	r3, [pc, #132]	; (806130c <FLASH_SetErrorCode+0xa4>)
 8061286:	2210      	movs	r2, #16
 8061288:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 806128a:	4b20      	ldr	r3, [pc, #128]	; (806130c <FLASH_SetErrorCode+0xa4>)
 806128c:	68db      	ldr	r3, [r3, #12]
 806128e:	f003 0320 	and.w	r3, r3, #32
 8061292:	2b00      	cmp	r3, #0
 8061294:	d008      	beq.n	80612a8 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8061296:	4b1e      	ldr	r3, [pc, #120]	; (8061310 <FLASH_SetErrorCode+0xa8>)
 8061298:	69db      	ldr	r3, [r3, #28]
 806129a:	f043 0308 	orr.w	r3, r3, #8
 806129e:	4a1c      	ldr	r2, [pc, #112]	; (8061310 <FLASH_SetErrorCode+0xa8>)
 80612a0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80612a2:	4b1a      	ldr	r3, [pc, #104]	; (806130c <FLASH_SetErrorCode+0xa4>)
 80612a4:	2220      	movs	r2, #32
 80612a6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80612a8:	4b18      	ldr	r3, [pc, #96]	; (806130c <FLASH_SetErrorCode+0xa4>)
 80612aa:	68db      	ldr	r3, [r3, #12]
 80612ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80612b0:	2b00      	cmp	r3, #0
 80612b2:	d008      	beq.n	80612c6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80612b4:	4b16      	ldr	r3, [pc, #88]	; (8061310 <FLASH_SetErrorCode+0xa8>)
 80612b6:	69db      	ldr	r3, [r3, #28]
 80612b8:	f043 0304 	orr.w	r3, r3, #4
 80612bc:	4a14      	ldr	r2, [pc, #80]	; (8061310 <FLASH_SetErrorCode+0xa8>)
 80612be:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80612c0:	4b12      	ldr	r3, [pc, #72]	; (806130c <FLASH_SetErrorCode+0xa4>)
 80612c2:	2240      	movs	r2, #64	; 0x40
 80612c4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80612c6:	4b11      	ldr	r3, [pc, #68]	; (806130c <FLASH_SetErrorCode+0xa4>)
 80612c8:	68db      	ldr	r3, [r3, #12]
 80612ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80612ce:	2b00      	cmp	r3, #0
 80612d0:	d008      	beq.n	80612e4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80612d2:	4b0f      	ldr	r3, [pc, #60]	; (8061310 <FLASH_SetErrorCode+0xa8>)
 80612d4:	69db      	ldr	r3, [r3, #28]
 80612d6:	f043 0302 	orr.w	r3, r3, #2
 80612da:	4a0d      	ldr	r2, [pc, #52]	; (8061310 <FLASH_SetErrorCode+0xa8>)
 80612dc:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80612de:	4b0b      	ldr	r3, [pc, #44]	; (806130c <FLASH_SetErrorCode+0xa4>)
 80612e0:	2280      	movs	r2, #128	; 0x80
 80612e2:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80612e4:	4b09      	ldr	r3, [pc, #36]	; (806130c <FLASH_SetErrorCode+0xa4>)
 80612e6:	68db      	ldr	r3, [r3, #12]
 80612e8:	f003 0302 	and.w	r3, r3, #2
 80612ec:	2b00      	cmp	r3, #0
 80612ee:	d008      	beq.n	8061302 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80612f0:	4b07      	ldr	r3, [pc, #28]	; (8061310 <FLASH_SetErrorCode+0xa8>)
 80612f2:	69db      	ldr	r3, [r3, #28]
 80612f4:	f043 0320 	orr.w	r3, r3, #32
 80612f8:	4a05      	ldr	r2, [pc, #20]	; (8061310 <FLASH_SetErrorCode+0xa8>)
 80612fa:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80612fc:	4b03      	ldr	r3, [pc, #12]	; (806130c <FLASH_SetErrorCode+0xa4>)
 80612fe:	2202      	movs	r2, #2
 8061300:	60da      	str	r2, [r3, #12]
  }
}
 8061302:	bf00      	nop
 8061304:	46bd      	mov	sp, r7
 8061306:	f85d 7b04 	ldr.w	r7, [sp], #4
 806130a:	4770      	bx	lr
 806130c:	40023c00 	.word	0x40023c00
 8061310:	2000007c 	.word	0x2000007c

08061314 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8061314:	b580      	push	{r7, lr}
 8061316:	b084      	sub	sp, #16
 8061318:	af00      	add	r7, sp, #0
 806131a:	6078      	str	r0, [r7, #4]
 806131c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 806131e:	2301      	movs	r3, #1
 8061320:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8061322:	2300      	movs	r3, #0
 8061324:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8061326:	4b31      	ldr	r3, [pc, #196]	; (80613ec <HAL_FLASHEx_Erase+0xd8>)
 8061328:	7e1b      	ldrb	r3, [r3, #24]
 806132a:	2b01      	cmp	r3, #1
 806132c:	d101      	bne.n	8061332 <HAL_FLASHEx_Erase+0x1e>
 806132e:	2302      	movs	r3, #2
 8061330:	e058      	b.n	80613e4 <HAL_FLASHEx_Erase+0xd0>
 8061332:	4b2e      	ldr	r3, [pc, #184]	; (80613ec <HAL_FLASHEx_Erase+0xd8>)
 8061334:	2201      	movs	r2, #1
 8061336:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8061338:	f24c 3050 	movw	r0, #50000	; 0xc350
 806133c:	f7ff feba 	bl	80610b4 <FLASH_WaitForLastOperation>
 8061340:	4603      	mov	r3, r0
 8061342:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8061344:	7bfb      	ldrb	r3, [r7, #15]
 8061346:	2b00      	cmp	r3, #0
 8061348:	d148      	bne.n	80613dc <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 806134a:	683b      	ldr	r3, [r7, #0]
 806134c:	f04f 32ff 	mov.w	r2, #4294967295
 8061350:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8061352:	687b      	ldr	r3, [r7, #4]
 8061354:	681b      	ldr	r3, [r3, #0]
 8061356:	2b01      	cmp	r3, #1
 8061358:	d115      	bne.n	8061386 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 806135a:	687b      	ldr	r3, [r7, #4]
 806135c:	691b      	ldr	r3, [r3, #16]
 806135e:	b2da      	uxtb	r2, r3
 8061360:	687b      	ldr	r3, [r7, #4]
 8061362:	685b      	ldr	r3, [r3, #4]
 8061364:	4619      	mov	r1, r3
 8061366:	4610      	mov	r0, r2
 8061368:	f000 f844 	bl	80613f4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 806136c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8061370:	f7ff fea0 	bl	80610b4 <FLASH_WaitForLastOperation>
 8061374:	4603      	mov	r3, r0
 8061376:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8061378:	4b1d      	ldr	r3, [pc, #116]	; (80613f0 <HAL_FLASHEx_Erase+0xdc>)
 806137a:	691b      	ldr	r3, [r3, #16]
 806137c:	4a1c      	ldr	r2, [pc, #112]	; (80613f0 <HAL_FLASHEx_Erase+0xdc>)
 806137e:	f023 0304 	bic.w	r3, r3, #4
 8061382:	6113      	str	r3, [r2, #16]
 8061384:	e028      	b.n	80613d8 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8061386:	687b      	ldr	r3, [r7, #4]
 8061388:	689b      	ldr	r3, [r3, #8]
 806138a:	60bb      	str	r3, [r7, #8]
 806138c:	e01c      	b.n	80613c8 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 806138e:	687b      	ldr	r3, [r7, #4]
 8061390:	691b      	ldr	r3, [r3, #16]
 8061392:	b2db      	uxtb	r3, r3
 8061394:	4619      	mov	r1, r3
 8061396:	68b8      	ldr	r0, [r7, #8]
 8061398:	f000 f850 	bl	806143c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 806139c:	f24c 3050 	movw	r0, #50000	; 0xc350
 80613a0:	f7ff fe88 	bl	80610b4 <FLASH_WaitForLastOperation>
 80613a4:	4603      	mov	r3, r0
 80613a6:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80613a8:	4b11      	ldr	r3, [pc, #68]	; (80613f0 <HAL_FLASHEx_Erase+0xdc>)
 80613aa:	691b      	ldr	r3, [r3, #16]
 80613ac:	4a10      	ldr	r2, [pc, #64]	; (80613f0 <HAL_FLASHEx_Erase+0xdc>)
 80613ae:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80613b2:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80613b4:	7bfb      	ldrb	r3, [r7, #15]
 80613b6:	2b00      	cmp	r3, #0
 80613b8:	d003      	beq.n	80613c2 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80613ba:	683b      	ldr	r3, [r7, #0]
 80613bc:	68ba      	ldr	r2, [r7, #8]
 80613be:	601a      	str	r2, [r3, #0]
          break;
 80613c0:	e00a      	b.n	80613d8 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80613c2:	68bb      	ldr	r3, [r7, #8]
 80613c4:	3301      	adds	r3, #1
 80613c6:	60bb      	str	r3, [r7, #8]
 80613c8:	687b      	ldr	r3, [r7, #4]
 80613ca:	68da      	ldr	r2, [r3, #12]
 80613cc:	687b      	ldr	r3, [r7, #4]
 80613ce:	689b      	ldr	r3, [r3, #8]
 80613d0:	4413      	add	r3, r2
 80613d2:	68ba      	ldr	r2, [r7, #8]
 80613d4:	429a      	cmp	r2, r3
 80613d6:	d3da      	bcc.n	806138e <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80613d8:	f000 f878 	bl	80614cc <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80613dc:	4b03      	ldr	r3, [pc, #12]	; (80613ec <HAL_FLASHEx_Erase+0xd8>)
 80613de:	2200      	movs	r2, #0
 80613e0:	761a      	strb	r2, [r3, #24]

  return status;
 80613e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80613e4:	4618      	mov	r0, r3
 80613e6:	3710      	adds	r7, #16
 80613e8:	46bd      	mov	sp, r7
 80613ea:	bd80      	pop	{r7, pc}
 80613ec:	2000007c 	.word	0x2000007c
 80613f0:	40023c00 	.word	0x40023c00

080613f4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80613f4:	b480      	push	{r7}
 80613f6:	b083      	sub	sp, #12
 80613f8:	af00      	add	r7, sp, #0
 80613fa:	4603      	mov	r3, r0
 80613fc:	6039      	str	r1, [r7, #0]
 80613fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8061400:	4b0d      	ldr	r3, [pc, #52]	; (8061438 <FLASH_MassErase+0x44>)
 8061402:	691b      	ldr	r3, [r3, #16]
 8061404:	4a0c      	ldr	r2, [pc, #48]	; (8061438 <FLASH_MassErase+0x44>)
 8061406:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 806140a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 806140c:	4b0a      	ldr	r3, [pc, #40]	; (8061438 <FLASH_MassErase+0x44>)
 806140e:	691b      	ldr	r3, [r3, #16]
 8061410:	4a09      	ldr	r2, [pc, #36]	; (8061438 <FLASH_MassErase+0x44>)
 8061412:	f043 0304 	orr.w	r3, r3, #4
 8061416:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8061418:	4b07      	ldr	r3, [pc, #28]	; (8061438 <FLASH_MassErase+0x44>)
 806141a:	691a      	ldr	r2, [r3, #16]
 806141c:	79fb      	ldrb	r3, [r7, #7]
 806141e:	021b      	lsls	r3, r3, #8
 8061420:	4313      	orrs	r3, r2
 8061422:	4a05      	ldr	r2, [pc, #20]	; (8061438 <FLASH_MassErase+0x44>)
 8061424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8061428:	6113      	str	r3, [r2, #16]
}
 806142a:	bf00      	nop
 806142c:	370c      	adds	r7, #12
 806142e:	46bd      	mov	sp, r7
 8061430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8061434:	4770      	bx	lr
 8061436:	bf00      	nop
 8061438:	40023c00 	.word	0x40023c00

0806143c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 806143c:	b480      	push	{r7}
 806143e:	b085      	sub	sp, #20
 8061440:	af00      	add	r7, sp, #0
 8061442:	6078      	str	r0, [r7, #4]
 8061444:	460b      	mov	r3, r1
 8061446:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8061448:	2300      	movs	r3, #0
 806144a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 806144c:	78fb      	ldrb	r3, [r7, #3]
 806144e:	2b00      	cmp	r3, #0
 8061450:	d102      	bne.n	8061458 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8061452:	2300      	movs	r3, #0
 8061454:	60fb      	str	r3, [r7, #12]
 8061456:	e010      	b.n	806147a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8061458:	78fb      	ldrb	r3, [r7, #3]
 806145a:	2b01      	cmp	r3, #1
 806145c:	d103      	bne.n	8061466 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 806145e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8061462:	60fb      	str	r3, [r7, #12]
 8061464:	e009      	b.n	806147a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8061466:	78fb      	ldrb	r3, [r7, #3]
 8061468:	2b02      	cmp	r3, #2
 806146a:	d103      	bne.n	8061474 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 806146c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8061470:	60fb      	str	r3, [r7, #12]
 8061472:	e002      	b.n	806147a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8061474:	f44f 7340 	mov.w	r3, #768	; 0x300
 8061478:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 806147a:	4b13      	ldr	r3, [pc, #76]	; (80614c8 <FLASH_Erase_Sector+0x8c>)
 806147c:	691b      	ldr	r3, [r3, #16]
 806147e:	4a12      	ldr	r2, [pc, #72]	; (80614c8 <FLASH_Erase_Sector+0x8c>)
 8061480:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8061484:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8061486:	4b10      	ldr	r3, [pc, #64]	; (80614c8 <FLASH_Erase_Sector+0x8c>)
 8061488:	691a      	ldr	r2, [r3, #16]
 806148a:	490f      	ldr	r1, [pc, #60]	; (80614c8 <FLASH_Erase_Sector+0x8c>)
 806148c:	68fb      	ldr	r3, [r7, #12]
 806148e:	4313      	orrs	r3, r2
 8061490:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8061492:	4b0d      	ldr	r3, [pc, #52]	; (80614c8 <FLASH_Erase_Sector+0x8c>)
 8061494:	691b      	ldr	r3, [r3, #16]
 8061496:	4a0c      	ldr	r2, [pc, #48]	; (80614c8 <FLASH_Erase_Sector+0x8c>)
 8061498:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 806149c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 806149e:	4b0a      	ldr	r3, [pc, #40]	; (80614c8 <FLASH_Erase_Sector+0x8c>)
 80614a0:	691a      	ldr	r2, [r3, #16]
 80614a2:	687b      	ldr	r3, [r7, #4]
 80614a4:	00db      	lsls	r3, r3, #3
 80614a6:	4313      	orrs	r3, r2
 80614a8:	4a07      	ldr	r2, [pc, #28]	; (80614c8 <FLASH_Erase_Sector+0x8c>)
 80614aa:	f043 0302 	orr.w	r3, r3, #2
 80614ae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80614b0:	4b05      	ldr	r3, [pc, #20]	; (80614c8 <FLASH_Erase_Sector+0x8c>)
 80614b2:	691b      	ldr	r3, [r3, #16]
 80614b4:	4a04      	ldr	r2, [pc, #16]	; (80614c8 <FLASH_Erase_Sector+0x8c>)
 80614b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80614ba:	6113      	str	r3, [r2, #16]
}
 80614bc:	bf00      	nop
 80614be:	3714      	adds	r7, #20
 80614c0:	46bd      	mov	sp, r7
 80614c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80614c6:	4770      	bx	lr
 80614c8:	40023c00 	.word	0x40023c00

080614cc <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80614cc:	b480      	push	{r7}
 80614ce:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80614d0:	4b20      	ldr	r3, [pc, #128]	; (8061554 <FLASH_FlushCaches+0x88>)
 80614d2:	681b      	ldr	r3, [r3, #0]
 80614d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80614d8:	2b00      	cmp	r3, #0
 80614da:	d017      	beq.n	806150c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80614dc:	4b1d      	ldr	r3, [pc, #116]	; (8061554 <FLASH_FlushCaches+0x88>)
 80614de:	681b      	ldr	r3, [r3, #0]
 80614e0:	4a1c      	ldr	r2, [pc, #112]	; (8061554 <FLASH_FlushCaches+0x88>)
 80614e2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80614e6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80614e8:	4b1a      	ldr	r3, [pc, #104]	; (8061554 <FLASH_FlushCaches+0x88>)
 80614ea:	681b      	ldr	r3, [r3, #0]
 80614ec:	4a19      	ldr	r2, [pc, #100]	; (8061554 <FLASH_FlushCaches+0x88>)
 80614ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80614f2:	6013      	str	r3, [r2, #0]
 80614f4:	4b17      	ldr	r3, [pc, #92]	; (8061554 <FLASH_FlushCaches+0x88>)
 80614f6:	681b      	ldr	r3, [r3, #0]
 80614f8:	4a16      	ldr	r2, [pc, #88]	; (8061554 <FLASH_FlushCaches+0x88>)
 80614fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80614fe:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8061500:	4b14      	ldr	r3, [pc, #80]	; (8061554 <FLASH_FlushCaches+0x88>)
 8061502:	681b      	ldr	r3, [r3, #0]
 8061504:	4a13      	ldr	r2, [pc, #76]	; (8061554 <FLASH_FlushCaches+0x88>)
 8061506:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 806150a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 806150c:	4b11      	ldr	r3, [pc, #68]	; (8061554 <FLASH_FlushCaches+0x88>)
 806150e:	681b      	ldr	r3, [r3, #0]
 8061510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8061514:	2b00      	cmp	r3, #0
 8061516:	d017      	beq.n	8061548 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8061518:	4b0e      	ldr	r3, [pc, #56]	; (8061554 <FLASH_FlushCaches+0x88>)
 806151a:	681b      	ldr	r3, [r3, #0]
 806151c:	4a0d      	ldr	r2, [pc, #52]	; (8061554 <FLASH_FlushCaches+0x88>)
 806151e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8061522:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8061524:	4b0b      	ldr	r3, [pc, #44]	; (8061554 <FLASH_FlushCaches+0x88>)
 8061526:	681b      	ldr	r3, [r3, #0]
 8061528:	4a0a      	ldr	r2, [pc, #40]	; (8061554 <FLASH_FlushCaches+0x88>)
 806152a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 806152e:	6013      	str	r3, [r2, #0]
 8061530:	4b08      	ldr	r3, [pc, #32]	; (8061554 <FLASH_FlushCaches+0x88>)
 8061532:	681b      	ldr	r3, [r3, #0]
 8061534:	4a07      	ldr	r2, [pc, #28]	; (8061554 <FLASH_FlushCaches+0x88>)
 8061536:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 806153a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 806153c:	4b05      	ldr	r3, [pc, #20]	; (8061554 <FLASH_FlushCaches+0x88>)
 806153e:	681b      	ldr	r3, [r3, #0]
 8061540:	4a04      	ldr	r2, [pc, #16]	; (8061554 <FLASH_FlushCaches+0x88>)
 8061542:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8061546:	6013      	str	r3, [r2, #0]
  }
}
 8061548:	bf00      	nop
 806154a:	46bd      	mov	sp, r7
 806154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8061550:	4770      	bx	lr
 8061552:	bf00      	nop
 8061554:	40023c00 	.word	0x40023c00

08061558 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8061558:	b480      	push	{r7}
 806155a:	b089      	sub	sp, #36	; 0x24
 806155c:	af00      	add	r7, sp, #0
 806155e:	6078      	str	r0, [r7, #4]
 8061560:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8061562:	2300      	movs	r3, #0
 8061564:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8061566:	2300      	movs	r3, #0
 8061568:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 806156a:	2300      	movs	r3, #0
 806156c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 806156e:	2300      	movs	r3, #0
 8061570:	61fb      	str	r3, [r7, #28]
 8061572:	e16b      	b.n	806184c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8061574:	2201      	movs	r2, #1
 8061576:	69fb      	ldr	r3, [r7, #28]
 8061578:	fa02 f303 	lsl.w	r3, r2, r3
 806157c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 806157e:	683b      	ldr	r3, [r7, #0]
 8061580:	681b      	ldr	r3, [r3, #0]
 8061582:	697a      	ldr	r2, [r7, #20]
 8061584:	4013      	ands	r3, r2
 8061586:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8061588:	693a      	ldr	r2, [r7, #16]
 806158a:	697b      	ldr	r3, [r7, #20]
 806158c:	429a      	cmp	r2, r3
 806158e:	f040 815a 	bne.w	8061846 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8061592:	683b      	ldr	r3, [r7, #0]
 8061594:	685b      	ldr	r3, [r3, #4]
 8061596:	f003 0303 	and.w	r3, r3, #3
 806159a:	2b01      	cmp	r3, #1
 806159c:	d005      	beq.n	80615aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 806159e:	683b      	ldr	r3, [r7, #0]
 80615a0:	685b      	ldr	r3, [r3, #4]
 80615a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80615a6:	2b02      	cmp	r3, #2
 80615a8:	d130      	bne.n	806160c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80615aa:	687b      	ldr	r3, [r7, #4]
 80615ac:	689b      	ldr	r3, [r3, #8]
 80615ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80615b0:	69fb      	ldr	r3, [r7, #28]
 80615b2:	005b      	lsls	r3, r3, #1
 80615b4:	2203      	movs	r2, #3
 80615b6:	fa02 f303 	lsl.w	r3, r2, r3
 80615ba:	43db      	mvns	r3, r3
 80615bc:	69ba      	ldr	r2, [r7, #24]
 80615be:	4013      	ands	r3, r2
 80615c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80615c2:	683b      	ldr	r3, [r7, #0]
 80615c4:	68da      	ldr	r2, [r3, #12]
 80615c6:	69fb      	ldr	r3, [r7, #28]
 80615c8:	005b      	lsls	r3, r3, #1
 80615ca:	fa02 f303 	lsl.w	r3, r2, r3
 80615ce:	69ba      	ldr	r2, [r7, #24]
 80615d0:	4313      	orrs	r3, r2
 80615d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80615d4:	687b      	ldr	r3, [r7, #4]
 80615d6:	69ba      	ldr	r2, [r7, #24]
 80615d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80615da:	687b      	ldr	r3, [r7, #4]
 80615dc:	685b      	ldr	r3, [r3, #4]
 80615de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80615e0:	2201      	movs	r2, #1
 80615e2:	69fb      	ldr	r3, [r7, #28]
 80615e4:	fa02 f303 	lsl.w	r3, r2, r3
 80615e8:	43db      	mvns	r3, r3
 80615ea:	69ba      	ldr	r2, [r7, #24]
 80615ec:	4013      	ands	r3, r2
 80615ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80615f0:	683b      	ldr	r3, [r7, #0]
 80615f2:	685b      	ldr	r3, [r3, #4]
 80615f4:	091b      	lsrs	r3, r3, #4
 80615f6:	f003 0201 	and.w	r2, r3, #1
 80615fa:	69fb      	ldr	r3, [r7, #28]
 80615fc:	fa02 f303 	lsl.w	r3, r2, r3
 8061600:	69ba      	ldr	r2, [r7, #24]
 8061602:	4313      	orrs	r3, r2
 8061604:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8061606:	687b      	ldr	r3, [r7, #4]
 8061608:	69ba      	ldr	r2, [r7, #24]
 806160a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 806160c:	683b      	ldr	r3, [r7, #0]
 806160e:	685b      	ldr	r3, [r3, #4]
 8061610:	f003 0303 	and.w	r3, r3, #3
 8061614:	2b03      	cmp	r3, #3
 8061616:	d017      	beq.n	8061648 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8061618:	687b      	ldr	r3, [r7, #4]
 806161a:	68db      	ldr	r3, [r3, #12]
 806161c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 806161e:	69fb      	ldr	r3, [r7, #28]
 8061620:	005b      	lsls	r3, r3, #1
 8061622:	2203      	movs	r2, #3
 8061624:	fa02 f303 	lsl.w	r3, r2, r3
 8061628:	43db      	mvns	r3, r3
 806162a:	69ba      	ldr	r2, [r7, #24]
 806162c:	4013      	ands	r3, r2
 806162e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8061630:	683b      	ldr	r3, [r7, #0]
 8061632:	689a      	ldr	r2, [r3, #8]
 8061634:	69fb      	ldr	r3, [r7, #28]
 8061636:	005b      	lsls	r3, r3, #1
 8061638:	fa02 f303 	lsl.w	r3, r2, r3
 806163c:	69ba      	ldr	r2, [r7, #24]
 806163e:	4313      	orrs	r3, r2
 8061640:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8061642:	687b      	ldr	r3, [r7, #4]
 8061644:	69ba      	ldr	r2, [r7, #24]
 8061646:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8061648:	683b      	ldr	r3, [r7, #0]
 806164a:	685b      	ldr	r3, [r3, #4]
 806164c:	f003 0303 	and.w	r3, r3, #3
 8061650:	2b02      	cmp	r3, #2
 8061652:	d123      	bne.n	806169c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8061654:	69fb      	ldr	r3, [r7, #28]
 8061656:	08da      	lsrs	r2, r3, #3
 8061658:	687b      	ldr	r3, [r7, #4]
 806165a:	3208      	adds	r2, #8
 806165c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8061660:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8061662:	69fb      	ldr	r3, [r7, #28]
 8061664:	f003 0307 	and.w	r3, r3, #7
 8061668:	009b      	lsls	r3, r3, #2
 806166a:	220f      	movs	r2, #15
 806166c:	fa02 f303 	lsl.w	r3, r2, r3
 8061670:	43db      	mvns	r3, r3
 8061672:	69ba      	ldr	r2, [r7, #24]
 8061674:	4013      	ands	r3, r2
 8061676:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8061678:	683b      	ldr	r3, [r7, #0]
 806167a:	691a      	ldr	r2, [r3, #16]
 806167c:	69fb      	ldr	r3, [r7, #28]
 806167e:	f003 0307 	and.w	r3, r3, #7
 8061682:	009b      	lsls	r3, r3, #2
 8061684:	fa02 f303 	lsl.w	r3, r2, r3
 8061688:	69ba      	ldr	r2, [r7, #24]
 806168a:	4313      	orrs	r3, r2
 806168c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 806168e:	69fb      	ldr	r3, [r7, #28]
 8061690:	08da      	lsrs	r2, r3, #3
 8061692:	687b      	ldr	r3, [r7, #4]
 8061694:	3208      	adds	r2, #8
 8061696:	69b9      	ldr	r1, [r7, #24]
 8061698:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 806169c:	687b      	ldr	r3, [r7, #4]
 806169e:	681b      	ldr	r3, [r3, #0]
 80616a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80616a2:	69fb      	ldr	r3, [r7, #28]
 80616a4:	005b      	lsls	r3, r3, #1
 80616a6:	2203      	movs	r2, #3
 80616a8:	fa02 f303 	lsl.w	r3, r2, r3
 80616ac:	43db      	mvns	r3, r3
 80616ae:	69ba      	ldr	r2, [r7, #24]
 80616b0:	4013      	ands	r3, r2
 80616b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80616b4:	683b      	ldr	r3, [r7, #0]
 80616b6:	685b      	ldr	r3, [r3, #4]
 80616b8:	f003 0203 	and.w	r2, r3, #3
 80616bc:	69fb      	ldr	r3, [r7, #28]
 80616be:	005b      	lsls	r3, r3, #1
 80616c0:	fa02 f303 	lsl.w	r3, r2, r3
 80616c4:	69ba      	ldr	r2, [r7, #24]
 80616c6:	4313      	orrs	r3, r2
 80616c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80616ca:	687b      	ldr	r3, [r7, #4]
 80616cc:	69ba      	ldr	r2, [r7, #24]
 80616ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80616d0:	683b      	ldr	r3, [r7, #0]
 80616d2:	685b      	ldr	r3, [r3, #4]
 80616d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80616d8:	2b00      	cmp	r3, #0
 80616da:	f000 80b4 	beq.w	8061846 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80616de:	2300      	movs	r3, #0
 80616e0:	60fb      	str	r3, [r7, #12]
 80616e2:	4b60      	ldr	r3, [pc, #384]	; (8061864 <HAL_GPIO_Init+0x30c>)
 80616e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80616e6:	4a5f      	ldr	r2, [pc, #380]	; (8061864 <HAL_GPIO_Init+0x30c>)
 80616e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80616ec:	6453      	str	r3, [r2, #68]	; 0x44
 80616ee:	4b5d      	ldr	r3, [pc, #372]	; (8061864 <HAL_GPIO_Init+0x30c>)
 80616f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80616f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80616f6:	60fb      	str	r3, [r7, #12]
 80616f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80616fa:	4a5b      	ldr	r2, [pc, #364]	; (8061868 <HAL_GPIO_Init+0x310>)
 80616fc:	69fb      	ldr	r3, [r7, #28]
 80616fe:	089b      	lsrs	r3, r3, #2
 8061700:	3302      	adds	r3, #2
 8061702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8061706:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8061708:	69fb      	ldr	r3, [r7, #28]
 806170a:	f003 0303 	and.w	r3, r3, #3
 806170e:	009b      	lsls	r3, r3, #2
 8061710:	220f      	movs	r2, #15
 8061712:	fa02 f303 	lsl.w	r3, r2, r3
 8061716:	43db      	mvns	r3, r3
 8061718:	69ba      	ldr	r2, [r7, #24]
 806171a:	4013      	ands	r3, r2
 806171c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 806171e:	687b      	ldr	r3, [r7, #4]
 8061720:	4a52      	ldr	r2, [pc, #328]	; (806186c <HAL_GPIO_Init+0x314>)
 8061722:	4293      	cmp	r3, r2
 8061724:	d02b      	beq.n	806177e <HAL_GPIO_Init+0x226>
 8061726:	687b      	ldr	r3, [r7, #4]
 8061728:	4a51      	ldr	r2, [pc, #324]	; (8061870 <HAL_GPIO_Init+0x318>)
 806172a:	4293      	cmp	r3, r2
 806172c:	d025      	beq.n	806177a <HAL_GPIO_Init+0x222>
 806172e:	687b      	ldr	r3, [r7, #4]
 8061730:	4a50      	ldr	r2, [pc, #320]	; (8061874 <HAL_GPIO_Init+0x31c>)
 8061732:	4293      	cmp	r3, r2
 8061734:	d01f      	beq.n	8061776 <HAL_GPIO_Init+0x21e>
 8061736:	687b      	ldr	r3, [r7, #4]
 8061738:	4a4f      	ldr	r2, [pc, #316]	; (8061878 <HAL_GPIO_Init+0x320>)
 806173a:	4293      	cmp	r3, r2
 806173c:	d019      	beq.n	8061772 <HAL_GPIO_Init+0x21a>
 806173e:	687b      	ldr	r3, [r7, #4]
 8061740:	4a4e      	ldr	r2, [pc, #312]	; (806187c <HAL_GPIO_Init+0x324>)
 8061742:	4293      	cmp	r3, r2
 8061744:	d013      	beq.n	806176e <HAL_GPIO_Init+0x216>
 8061746:	687b      	ldr	r3, [r7, #4]
 8061748:	4a4d      	ldr	r2, [pc, #308]	; (8061880 <HAL_GPIO_Init+0x328>)
 806174a:	4293      	cmp	r3, r2
 806174c:	d00d      	beq.n	806176a <HAL_GPIO_Init+0x212>
 806174e:	687b      	ldr	r3, [r7, #4]
 8061750:	4a4c      	ldr	r2, [pc, #304]	; (8061884 <HAL_GPIO_Init+0x32c>)
 8061752:	4293      	cmp	r3, r2
 8061754:	d007      	beq.n	8061766 <HAL_GPIO_Init+0x20e>
 8061756:	687b      	ldr	r3, [r7, #4]
 8061758:	4a4b      	ldr	r2, [pc, #300]	; (8061888 <HAL_GPIO_Init+0x330>)
 806175a:	4293      	cmp	r3, r2
 806175c:	d101      	bne.n	8061762 <HAL_GPIO_Init+0x20a>
 806175e:	2307      	movs	r3, #7
 8061760:	e00e      	b.n	8061780 <HAL_GPIO_Init+0x228>
 8061762:	2308      	movs	r3, #8
 8061764:	e00c      	b.n	8061780 <HAL_GPIO_Init+0x228>
 8061766:	2306      	movs	r3, #6
 8061768:	e00a      	b.n	8061780 <HAL_GPIO_Init+0x228>
 806176a:	2305      	movs	r3, #5
 806176c:	e008      	b.n	8061780 <HAL_GPIO_Init+0x228>
 806176e:	2304      	movs	r3, #4
 8061770:	e006      	b.n	8061780 <HAL_GPIO_Init+0x228>
 8061772:	2303      	movs	r3, #3
 8061774:	e004      	b.n	8061780 <HAL_GPIO_Init+0x228>
 8061776:	2302      	movs	r3, #2
 8061778:	e002      	b.n	8061780 <HAL_GPIO_Init+0x228>
 806177a:	2301      	movs	r3, #1
 806177c:	e000      	b.n	8061780 <HAL_GPIO_Init+0x228>
 806177e:	2300      	movs	r3, #0
 8061780:	69fa      	ldr	r2, [r7, #28]
 8061782:	f002 0203 	and.w	r2, r2, #3
 8061786:	0092      	lsls	r2, r2, #2
 8061788:	4093      	lsls	r3, r2
 806178a:	69ba      	ldr	r2, [r7, #24]
 806178c:	4313      	orrs	r3, r2
 806178e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8061790:	4935      	ldr	r1, [pc, #212]	; (8061868 <HAL_GPIO_Init+0x310>)
 8061792:	69fb      	ldr	r3, [r7, #28]
 8061794:	089b      	lsrs	r3, r3, #2
 8061796:	3302      	adds	r3, #2
 8061798:	69ba      	ldr	r2, [r7, #24]
 806179a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 806179e:	4b3b      	ldr	r3, [pc, #236]	; (806188c <HAL_GPIO_Init+0x334>)
 80617a0:	681b      	ldr	r3, [r3, #0]
 80617a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80617a4:	693b      	ldr	r3, [r7, #16]
 80617a6:	43db      	mvns	r3, r3
 80617a8:	69ba      	ldr	r2, [r7, #24]
 80617aa:	4013      	ands	r3, r2
 80617ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80617ae:	683b      	ldr	r3, [r7, #0]
 80617b0:	685b      	ldr	r3, [r3, #4]
 80617b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80617b6:	2b00      	cmp	r3, #0
 80617b8:	d003      	beq.n	80617c2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80617ba:	69ba      	ldr	r2, [r7, #24]
 80617bc:	693b      	ldr	r3, [r7, #16]
 80617be:	4313      	orrs	r3, r2
 80617c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80617c2:	4a32      	ldr	r2, [pc, #200]	; (806188c <HAL_GPIO_Init+0x334>)
 80617c4:	69bb      	ldr	r3, [r7, #24]
 80617c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80617c8:	4b30      	ldr	r3, [pc, #192]	; (806188c <HAL_GPIO_Init+0x334>)
 80617ca:	685b      	ldr	r3, [r3, #4]
 80617cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80617ce:	693b      	ldr	r3, [r7, #16]
 80617d0:	43db      	mvns	r3, r3
 80617d2:	69ba      	ldr	r2, [r7, #24]
 80617d4:	4013      	ands	r3, r2
 80617d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80617d8:	683b      	ldr	r3, [r7, #0]
 80617da:	685b      	ldr	r3, [r3, #4]
 80617dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80617e0:	2b00      	cmp	r3, #0
 80617e2:	d003      	beq.n	80617ec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80617e4:	69ba      	ldr	r2, [r7, #24]
 80617e6:	693b      	ldr	r3, [r7, #16]
 80617e8:	4313      	orrs	r3, r2
 80617ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80617ec:	4a27      	ldr	r2, [pc, #156]	; (806188c <HAL_GPIO_Init+0x334>)
 80617ee:	69bb      	ldr	r3, [r7, #24]
 80617f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80617f2:	4b26      	ldr	r3, [pc, #152]	; (806188c <HAL_GPIO_Init+0x334>)
 80617f4:	689b      	ldr	r3, [r3, #8]
 80617f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80617f8:	693b      	ldr	r3, [r7, #16]
 80617fa:	43db      	mvns	r3, r3
 80617fc:	69ba      	ldr	r2, [r7, #24]
 80617fe:	4013      	ands	r3, r2
 8061800:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8061802:	683b      	ldr	r3, [r7, #0]
 8061804:	685b      	ldr	r3, [r3, #4]
 8061806:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 806180a:	2b00      	cmp	r3, #0
 806180c:	d003      	beq.n	8061816 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 806180e:	69ba      	ldr	r2, [r7, #24]
 8061810:	693b      	ldr	r3, [r7, #16]
 8061812:	4313      	orrs	r3, r2
 8061814:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8061816:	4a1d      	ldr	r2, [pc, #116]	; (806188c <HAL_GPIO_Init+0x334>)
 8061818:	69bb      	ldr	r3, [r7, #24]
 806181a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 806181c:	4b1b      	ldr	r3, [pc, #108]	; (806188c <HAL_GPIO_Init+0x334>)
 806181e:	68db      	ldr	r3, [r3, #12]
 8061820:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8061822:	693b      	ldr	r3, [r7, #16]
 8061824:	43db      	mvns	r3, r3
 8061826:	69ba      	ldr	r2, [r7, #24]
 8061828:	4013      	ands	r3, r2
 806182a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 806182c:	683b      	ldr	r3, [r7, #0]
 806182e:	685b      	ldr	r3, [r3, #4]
 8061830:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8061834:	2b00      	cmp	r3, #0
 8061836:	d003      	beq.n	8061840 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8061838:	69ba      	ldr	r2, [r7, #24]
 806183a:	693b      	ldr	r3, [r7, #16]
 806183c:	4313      	orrs	r3, r2
 806183e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8061840:	4a12      	ldr	r2, [pc, #72]	; (806188c <HAL_GPIO_Init+0x334>)
 8061842:	69bb      	ldr	r3, [r7, #24]
 8061844:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8061846:	69fb      	ldr	r3, [r7, #28]
 8061848:	3301      	adds	r3, #1
 806184a:	61fb      	str	r3, [r7, #28]
 806184c:	69fb      	ldr	r3, [r7, #28]
 806184e:	2b0f      	cmp	r3, #15
 8061850:	f67f ae90 	bls.w	8061574 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8061854:	bf00      	nop
 8061856:	bf00      	nop
 8061858:	3724      	adds	r7, #36	; 0x24
 806185a:	46bd      	mov	sp, r7
 806185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8061860:	4770      	bx	lr
 8061862:	bf00      	nop
 8061864:	40023800 	.word	0x40023800
 8061868:	40013800 	.word	0x40013800
 806186c:	40020000 	.word	0x40020000
 8061870:	40020400 	.word	0x40020400
 8061874:	40020800 	.word	0x40020800
 8061878:	40020c00 	.word	0x40020c00
 806187c:	40021000 	.word	0x40021000
 8061880:	40021400 	.word	0x40021400
 8061884:	40021800 	.word	0x40021800
 8061888:	40021c00 	.word	0x40021c00
 806188c:	40013c00 	.word	0x40013c00

08061890 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8061890:	b480      	push	{r7}
 8061892:	b083      	sub	sp, #12
 8061894:	af00      	add	r7, sp, #0
 8061896:	6078      	str	r0, [r7, #4]
 8061898:	460b      	mov	r3, r1
 806189a:	807b      	strh	r3, [r7, #2]
 806189c:	4613      	mov	r3, r2
 806189e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80618a0:	787b      	ldrb	r3, [r7, #1]
 80618a2:	2b00      	cmp	r3, #0
 80618a4:	d003      	beq.n	80618ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80618a6:	887a      	ldrh	r2, [r7, #2]
 80618a8:	687b      	ldr	r3, [r7, #4]
 80618aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80618ac:	e003      	b.n	80618b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80618ae:	887b      	ldrh	r3, [r7, #2]
 80618b0:	041a      	lsls	r2, r3, #16
 80618b2:	687b      	ldr	r3, [r7, #4]
 80618b4:	619a      	str	r2, [r3, #24]
}
 80618b6:	bf00      	nop
 80618b8:	370c      	adds	r7, #12
 80618ba:	46bd      	mov	sp, r7
 80618bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80618c0:	4770      	bx	lr
	...

080618c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80618c4:	b580      	push	{r7, lr}
 80618c6:	b086      	sub	sp, #24
 80618c8:	af00      	add	r7, sp, #0
 80618ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80618cc:	687b      	ldr	r3, [r7, #4]
 80618ce:	2b00      	cmp	r3, #0
 80618d0:	d101      	bne.n	80618d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80618d2:	2301      	movs	r3, #1
 80618d4:	e264      	b.n	8061da0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80618d6:	687b      	ldr	r3, [r7, #4]
 80618d8:	681b      	ldr	r3, [r3, #0]
 80618da:	f003 0301 	and.w	r3, r3, #1
 80618de:	2b00      	cmp	r3, #0
 80618e0:	d075      	beq.n	80619ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80618e2:	4ba3      	ldr	r3, [pc, #652]	; (8061b70 <HAL_RCC_OscConfig+0x2ac>)
 80618e4:	689b      	ldr	r3, [r3, #8]
 80618e6:	f003 030c 	and.w	r3, r3, #12
 80618ea:	2b04      	cmp	r3, #4
 80618ec:	d00c      	beq.n	8061908 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80618ee:	4ba0      	ldr	r3, [pc, #640]	; (8061b70 <HAL_RCC_OscConfig+0x2ac>)
 80618f0:	689b      	ldr	r3, [r3, #8]
 80618f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80618f6:	2b08      	cmp	r3, #8
 80618f8:	d112      	bne.n	8061920 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80618fa:	4b9d      	ldr	r3, [pc, #628]	; (8061b70 <HAL_RCC_OscConfig+0x2ac>)
 80618fc:	685b      	ldr	r3, [r3, #4]
 80618fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8061902:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8061906:	d10b      	bne.n	8061920 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8061908:	4b99      	ldr	r3, [pc, #612]	; (8061b70 <HAL_RCC_OscConfig+0x2ac>)
 806190a:	681b      	ldr	r3, [r3, #0]
 806190c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8061910:	2b00      	cmp	r3, #0
 8061912:	d05b      	beq.n	80619cc <HAL_RCC_OscConfig+0x108>
 8061914:	687b      	ldr	r3, [r7, #4]
 8061916:	685b      	ldr	r3, [r3, #4]
 8061918:	2b00      	cmp	r3, #0
 806191a:	d157      	bne.n	80619cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 806191c:	2301      	movs	r3, #1
 806191e:	e23f      	b.n	8061da0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8061920:	687b      	ldr	r3, [r7, #4]
 8061922:	685b      	ldr	r3, [r3, #4]
 8061924:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8061928:	d106      	bne.n	8061938 <HAL_RCC_OscConfig+0x74>
 806192a:	4b91      	ldr	r3, [pc, #580]	; (8061b70 <HAL_RCC_OscConfig+0x2ac>)
 806192c:	681b      	ldr	r3, [r3, #0]
 806192e:	4a90      	ldr	r2, [pc, #576]	; (8061b70 <HAL_RCC_OscConfig+0x2ac>)
 8061930:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8061934:	6013      	str	r3, [r2, #0]
 8061936:	e01d      	b.n	8061974 <HAL_RCC_OscConfig+0xb0>
 8061938:	687b      	ldr	r3, [r7, #4]
 806193a:	685b      	ldr	r3, [r3, #4]
 806193c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8061940:	d10c      	bne.n	806195c <HAL_RCC_OscConfig+0x98>
 8061942:	4b8b      	ldr	r3, [pc, #556]	; (8061b70 <HAL_RCC_OscConfig+0x2ac>)
 8061944:	681b      	ldr	r3, [r3, #0]
 8061946:	4a8a      	ldr	r2, [pc, #552]	; (8061b70 <HAL_RCC_OscConfig+0x2ac>)
 8061948:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 806194c:	6013      	str	r3, [r2, #0]
 806194e:	4b88      	ldr	r3, [pc, #544]	; (8061b70 <HAL_RCC_OscConfig+0x2ac>)
 8061950:	681b      	ldr	r3, [r3, #0]
 8061952:	4a87      	ldr	r2, [pc, #540]	; (8061b70 <HAL_RCC_OscConfig+0x2ac>)
 8061954:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8061958:	6013      	str	r3, [r2, #0]
 806195a:	e00b      	b.n	8061974 <HAL_RCC_OscConfig+0xb0>
 806195c:	4b84      	ldr	r3, [pc, #528]	; (8061b70 <HAL_RCC_OscConfig+0x2ac>)
 806195e:	681b      	ldr	r3, [r3, #0]
 8061960:	4a83      	ldr	r2, [pc, #524]	; (8061b70 <HAL_RCC_OscConfig+0x2ac>)
 8061962:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8061966:	6013      	str	r3, [r2, #0]
 8061968:	4b81      	ldr	r3, [pc, #516]	; (8061b70 <HAL_RCC_OscConfig+0x2ac>)
 806196a:	681b      	ldr	r3, [r3, #0]
 806196c:	4a80      	ldr	r2, [pc, #512]	; (8061b70 <HAL_RCC_OscConfig+0x2ac>)
 806196e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8061972:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8061974:	687b      	ldr	r3, [r7, #4]
 8061976:	685b      	ldr	r3, [r3, #4]
 8061978:	2b00      	cmp	r3, #0
 806197a:	d013      	beq.n	80619a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 806197c:	f7ff f926 	bl	8060bcc <HAL_GetTick>
 8061980:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8061982:	e008      	b.n	8061996 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8061984:	f7ff f922 	bl	8060bcc <HAL_GetTick>
 8061988:	4602      	mov	r2, r0
 806198a:	693b      	ldr	r3, [r7, #16]
 806198c:	1ad3      	subs	r3, r2, r3
 806198e:	2b64      	cmp	r3, #100	; 0x64
 8061990:	d901      	bls.n	8061996 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8061992:	2303      	movs	r3, #3
 8061994:	e204      	b.n	8061da0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8061996:	4b76      	ldr	r3, [pc, #472]	; (8061b70 <HAL_RCC_OscConfig+0x2ac>)
 8061998:	681b      	ldr	r3, [r3, #0]
 806199a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 806199e:	2b00      	cmp	r3, #0
 80619a0:	d0f0      	beq.n	8061984 <HAL_RCC_OscConfig+0xc0>
 80619a2:	e014      	b.n	80619ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80619a4:	f7ff f912 	bl	8060bcc <HAL_GetTick>
 80619a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80619aa:	e008      	b.n	80619be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80619ac:	f7ff f90e 	bl	8060bcc <HAL_GetTick>
 80619b0:	4602      	mov	r2, r0
 80619b2:	693b      	ldr	r3, [r7, #16]
 80619b4:	1ad3      	subs	r3, r2, r3
 80619b6:	2b64      	cmp	r3, #100	; 0x64
 80619b8:	d901      	bls.n	80619be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80619ba:	2303      	movs	r3, #3
 80619bc:	e1f0      	b.n	8061da0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80619be:	4b6c      	ldr	r3, [pc, #432]	; (8061b70 <HAL_RCC_OscConfig+0x2ac>)
 80619c0:	681b      	ldr	r3, [r3, #0]
 80619c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80619c6:	2b00      	cmp	r3, #0
 80619c8:	d1f0      	bne.n	80619ac <HAL_RCC_OscConfig+0xe8>
 80619ca:	e000      	b.n	80619ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80619cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80619ce:	687b      	ldr	r3, [r7, #4]
 80619d0:	681b      	ldr	r3, [r3, #0]
 80619d2:	f003 0302 	and.w	r3, r3, #2
 80619d6:	2b00      	cmp	r3, #0
 80619d8:	d063      	beq.n	8061aa2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80619da:	4b65      	ldr	r3, [pc, #404]	; (8061b70 <HAL_RCC_OscConfig+0x2ac>)
 80619dc:	689b      	ldr	r3, [r3, #8]
 80619de:	f003 030c 	and.w	r3, r3, #12
 80619e2:	2b00      	cmp	r3, #0
 80619e4:	d00b      	beq.n	80619fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80619e6:	4b62      	ldr	r3, [pc, #392]	; (8061b70 <HAL_RCC_OscConfig+0x2ac>)
 80619e8:	689b      	ldr	r3, [r3, #8]
 80619ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80619ee:	2b08      	cmp	r3, #8
 80619f0:	d11c      	bne.n	8061a2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80619f2:	4b5f      	ldr	r3, [pc, #380]	; (8061b70 <HAL_RCC_OscConfig+0x2ac>)
 80619f4:	685b      	ldr	r3, [r3, #4]
 80619f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80619fa:	2b00      	cmp	r3, #0
 80619fc:	d116      	bne.n	8061a2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80619fe:	4b5c      	ldr	r3, [pc, #368]	; (8061b70 <HAL_RCC_OscConfig+0x2ac>)
 8061a00:	681b      	ldr	r3, [r3, #0]
 8061a02:	f003 0302 	and.w	r3, r3, #2
 8061a06:	2b00      	cmp	r3, #0
 8061a08:	d005      	beq.n	8061a16 <HAL_RCC_OscConfig+0x152>
 8061a0a:	687b      	ldr	r3, [r7, #4]
 8061a0c:	68db      	ldr	r3, [r3, #12]
 8061a0e:	2b01      	cmp	r3, #1
 8061a10:	d001      	beq.n	8061a16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8061a12:	2301      	movs	r3, #1
 8061a14:	e1c4      	b.n	8061da0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8061a16:	4b56      	ldr	r3, [pc, #344]	; (8061b70 <HAL_RCC_OscConfig+0x2ac>)
 8061a18:	681b      	ldr	r3, [r3, #0]
 8061a1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8061a1e:	687b      	ldr	r3, [r7, #4]
 8061a20:	691b      	ldr	r3, [r3, #16]
 8061a22:	00db      	lsls	r3, r3, #3
 8061a24:	4952      	ldr	r1, [pc, #328]	; (8061b70 <HAL_RCC_OscConfig+0x2ac>)
 8061a26:	4313      	orrs	r3, r2
 8061a28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8061a2a:	e03a      	b.n	8061aa2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8061a2c:	687b      	ldr	r3, [r7, #4]
 8061a2e:	68db      	ldr	r3, [r3, #12]
 8061a30:	2b00      	cmp	r3, #0
 8061a32:	d020      	beq.n	8061a76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8061a34:	4b4f      	ldr	r3, [pc, #316]	; (8061b74 <HAL_RCC_OscConfig+0x2b0>)
 8061a36:	2201      	movs	r2, #1
 8061a38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8061a3a:	f7ff f8c7 	bl	8060bcc <HAL_GetTick>
 8061a3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8061a40:	e008      	b.n	8061a54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8061a42:	f7ff f8c3 	bl	8060bcc <HAL_GetTick>
 8061a46:	4602      	mov	r2, r0
 8061a48:	693b      	ldr	r3, [r7, #16]
 8061a4a:	1ad3      	subs	r3, r2, r3
 8061a4c:	2b02      	cmp	r3, #2
 8061a4e:	d901      	bls.n	8061a54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8061a50:	2303      	movs	r3, #3
 8061a52:	e1a5      	b.n	8061da0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8061a54:	4b46      	ldr	r3, [pc, #280]	; (8061b70 <HAL_RCC_OscConfig+0x2ac>)
 8061a56:	681b      	ldr	r3, [r3, #0]
 8061a58:	f003 0302 	and.w	r3, r3, #2
 8061a5c:	2b00      	cmp	r3, #0
 8061a5e:	d0f0      	beq.n	8061a42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8061a60:	4b43      	ldr	r3, [pc, #268]	; (8061b70 <HAL_RCC_OscConfig+0x2ac>)
 8061a62:	681b      	ldr	r3, [r3, #0]
 8061a64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8061a68:	687b      	ldr	r3, [r7, #4]
 8061a6a:	691b      	ldr	r3, [r3, #16]
 8061a6c:	00db      	lsls	r3, r3, #3
 8061a6e:	4940      	ldr	r1, [pc, #256]	; (8061b70 <HAL_RCC_OscConfig+0x2ac>)
 8061a70:	4313      	orrs	r3, r2
 8061a72:	600b      	str	r3, [r1, #0]
 8061a74:	e015      	b.n	8061aa2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8061a76:	4b3f      	ldr	r3, [pc, #252]	; (8061b74 <HAL_RCC_OscConfig+0x2b0>)
 8061a78:	2200      	movs	r2, #0
 8061a7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8061a7c:	f7ff f8a6 	bl	8060bcc <HAL_GetTick>
 8061a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8061a82:	e008      	b.n	8061a96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8061a84:	f7ff f8a2 	bl	8060bcc <HAL_GetTick>
 8061a88:	4602      	mov	r2, r0
 8061a8a:	693b      	ldr	r3, [r7, #16]
 8061a8c:	1ad3      	subs	r3, r2, r3
 8061a8e:	2b02      	cmp	r3, #2
 8061a90:	d901      	bls.n	8061a96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8061a92:	2303      	movs	r3, #3
 8061a94:	e184      	b.n	8061da0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8061a96:	4b36      	ldr	r3, [pc, #216]	; (8061b70 <HAL_RCC_OscConfig+0x2ac>)
 8061a98:	681b      	ldr	r3, [r3, #0]
 8061a9a:	f003 0302 	and.w	r3, r3, #2
 8061a9e:	2b00      	cmp	r3, #0
 8061aa0:	d1f0      	bne.n	8061a84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8061aa2:	687b      	ldr	r3, [r7, #4]
 8061aa4:	681b      	ldr	r3, [r3, #0]
 8061aa6:	f003 0308 	and.w	r3, r3, #8
 8061aaa:	2b00      	cmp	r3, #0
 8061aac:	d030      	beq.n	8061b10 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8061aae:	687b      	ldr	r3, [r7, #4]
 8061ab0:	695b      	ldr	r3, [r3, #20]
 8061ab2:	2b00      	cmp	r3, #0
 8061ab4:	d016      	beq.n	8061ae4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8061ab6:	4b30      	ldr	r3, [pc, #192]	; (8061b78 <HAL_RCC_OscConfig+0x2b4>)
 8061ab8:	2201      	movs	r2, #1
 8061aba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8061abc:	f7ff f886 	bl	8060bcc <HAL_GetTick>
 8061ac0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8061ac2:	e008      	b.n	8061ad6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8061ac4:	f7ff f882 	bl	8060bcc <HAL_GetTick>
 8061ac8:	4602      	mov	r2, r0
 8061aca:	693b      	ldr	r3, [r7, #16]
 8061acc:	1ad3      	subs	r3, r2, r3
 8061ace:	2b02      	cmp	r3, #2
 8061ad0:	d901      	bls.n	8061ad6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8061ad2:	2303      	movs	r3, #3
 8061ad4:	e164      	b.n	8061da0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8061ad6:	4b26      	ldr	r3, [pc, #152]	; (8061b70 <HAL_RCC_OscConfig+0x2ac>)
 8061ad8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8061ada:	f003 0302 	and.w	r3, r3, #2
 8061ade:	2b00      	cmp	r3, #0
 8061ae0:	d0f0      	beq.n	8061ac4 <HAL_RCC_OscConfig+0x200>
 8061ae2:	e015      	b.n	8061b10 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8061ae4:	4b24      	ldr	r3, [pc, #144]	; (8061b78 <HAL_RCC_OscConfig+0x2b4>)
 8061ae6:	2200      	movs	r2, #0
 8061ae8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8061aea:	f7ff f86f 	bl	8060bcc <HAL_GetTick>
 8061aee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8061af0:	e008      	b.n	8061b04 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8061af2:	f7ff f86b 	bl	8060bcc <HAL_GetTick>
 8061af6:	4602      	mov	r2, r0
 8061af8:	693b      	ldr	r3, [r7, #16]
 8061afa:	1ad3      	subs	r3, r2, r3
 8061afc:	2b02      	cmp	r3, #2
 8061afe:	d901      	bls.n	8061b04 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8061b00:	2303      	movs	r3, #3
 8061b02:	e14d      	b.n	8061da0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8061b04:	4b1a      	ldr	r3, [pc, #104]	; (8061b70 <HAL_RCC_OscConfig+0x2ac>)
 8061b06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8061b08:	f003 0302 	and.w	r3, r3, #2
 8061b0c:	2b00      	cmp	r3, #0
 8061b0e:	d1f0      	bne.n	8061af2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8061b10:	687b      	ldr	r3, [r7, #4]
 8061b12:	681b      	ldr	r3, [r3, #0]
 8061b14:	f003 0304 	and.w	r3, r3, #4
 8061b18:	2b00      	cmp	r3, #0
 8061b1a:	f000 80a0 	beq.w	8061c5e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8061b1e:	2300      	movs	r3, #0
 8061b20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8061b22:	4b13      	ldr	r3, [pc, #76]	; (8061b70 <HAL_RCC_OscConfig+0x2ac>)
 8061b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8061b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8061b2a:	2b00      	cmp	r3, #0
 8061b2c:	d10f      	bne.n	8061b4e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8061b2e:	2300      	movs	r3, #0
 8061b30:	60bb      	str	r3, [r7, #8]
 8061b32:	4b0f      	ldr	r3, [pc, #60]	; (8061b70 <HAL_RCC_OscConfig+0x2ac>)
 8061b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8061b36:	4a0e      	ldr	r2, [pc, #56]	; (8061b70 <HAL_RCC_OscConfig+0x2ac>)
 8061b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8061b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8061b3e:	4b0c      	ldr	r3, [pc, #48]	; (8061b70 <HAL_RCC_OscConfig+0x2ac>)
 8061b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8061b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8061b46:	60bb      	str	r3, [r7, #8]
 8061b48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8061b4a:	2301      	movs	r3, #1
 8061b4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8061b4e:	4b0b      	ldr	r3, [pc, #44]	; (8061b7c <HAL_RCC_OscConfig+0x2b8>)
 8061b50:	681b      	ldr	r3, [r3, #0]
 8061b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8061b56:	2b00      	cmp	r3, #0
 8061b58:	d121      	bne.n	8061b9e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8061b5a:	4b08      	ldr	r3, [pc, #32]	; (8061b7c <HAL_RCC_OscConfig+0x2b8>)
 8061b5c:	681b      	ldr	r3, [r3, #0]
 8061b5e:	4a07      	ldr	r2, [pc, #28]	; (8061b7c <HAL_RCC_OscConfig+0x2b8>)
 8061b60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8061b64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8061b66:	f7ff f831 	bl	8060bcc <HAL_GetTick>
 8061b6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8061b6c:	e011      	b.n	8061b92 <HAL_RCC_OscConfig+0x2ce>
 8061b6e:	bf00      	nop
 8061b70:	40023800 	.word	0x40023800
 8061b74:	42470000 	.word	0x42470000
 8061b78:	42470e80 	.word	0x42470e80
 8061b7c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8061b80:	f7ff f824 	bl	8060bcc <HAL_GetTick>
 8061b84:	4602      	mov	r2, r0
 8061b86:	693b      	ldr	r3, [r7, #16]
 8061b88:	1ad3      	subs	r3, r2, r3
 8061b8a:	2b02      	cmp	r3, #2
 8061b8c:	d901      	bls.n	8061b92 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8061b8e:	2303      	movs	r3, #3
 8061b90:	e106      	b.n	8061da0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8061b92:	4b85      	ldr	r3, [pc, #532]	; (8061da8 <HAL_RCC_OscConfig+0x4e4>)
 8061b94:	681b      	ldr	r3, [r3, #0]
 8061b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8061b9a:	2b00      	cmp	r3, #0
 8061b9c:	d0f0      	beq.n	8061b80 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8061b9e:	687b      	ldr	r3, [r7, #4]
 8061ba0:	689b      	ldr	r3, [r3, #8]
 8061ba2:	2b01      	cmp	r3, #1
 8061ba4:	d106      	bne.n	8061bb4 <HAL_RCC_OscConfig+0x2f0>
 8061ba6:	4b81      	ldr	r3, [pc, #516]	; (8061dac <HAL_RCC_OscConfig+0x4e8>)
 8061ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8061baa:	4a80      	ldr	r2, [pc, #512]	; (8061dac <HAL_RCC_OscConfig+0x4e8>)
 8061bac:	f043 0301 	orr.w	r3, r3, #1
 8061bb0:	6713      	str	r3, [r2, #112]	; 0x70
 8061bb2:	e01c      	b.n	8061bee <HAL_RCC_OscConfig+0x32a>
 8061bb4:	687b      	ldr	r3, [r7, #4]
 8061bb6:	689b      	ldr	r3, [r3, #8]
 8061bb8:	2b05      	cmp	r3, #5
 8061bba:	d10c      	bne.n	8061bd6 <HAL_RCC_OscConfig+0x312>
 8061bbc:	4b7b      	ldr	r3, [pc, #492]	; (8061dac <HAL_RCC_OscConfig+0x4e8>)
 8061bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8061bc0:	4a7a      	ldr	r2, [pc, #488]	; (8061dac <HAL_RCC_OscConfig+0x4e8>)
 8061bc2:	f043 0304 	orr.w	r3, r3, #4
 8061bc6:	6713      	str	r3, [r2, #112]	; 0x70
 8061bc8:	4b78      	ldr	r3, [pc, #480]	; (8061dac <HAL_RCC_OscConfig+0x4e8>)
 8061bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8061bcc:	4a77      	ldr	r2, [pc, #476]	; (8061dac <HAL_RCC_OscConfig+0x4e8>)
 8061bce:	f043 0301 	orr.w	r3, r3, #1
 8061bd2:	6713      	str	r3, [r2, #112]	; 0x70
 8061bd4:	e00b      	b.n	8061bee <HAL_RCC_OscConfig+0x32a>
 8061bd6:	4b75      	ldr	r3, [pc, #468]	; (8061dac <HAL_RCC_OscConfig+0x4e8>)
 8061bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8061bda:	4a74      	ldr	r2, [pc, #464]	; (8061dac <HAL_RCC_OscConfig+0x4e8>)
 8061bdc:	f023 0301 	bic.w	r3, r3, #1
 8061be0:	6713      	str	r3, [r2, #112]	; 0x70
 8061be2:	4b72      	ldr	r3, [pc, #456]	; (8061dac <HAL_RCC_OscConfig+0x4e8>)
 8061be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8061be6:	4a71      	ldr	r2, [pc, #452]	; (8061dac <HAL_RCC_OscConfig+0x4e8>)
 8061be8:	f023 0304 	bic.w	r3, r3, #4
 8061bec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8061bee:	687b      	ldr	r3, [r7, #4]
 8061bf0:	689b      	ldr	r3, [r3, #8]
 8061bf2:	2b00      	cmp	r3, #0
 8061bf4:	d015      	beq.n	8061c22 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8061bf6:	f7fe ffe9 	bl	8060bcc <HAL_GetTick>
 8061bfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8061bfc:	e00a      	b.n	8061c14 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8061bfe:	f7fe ffe5 	bl	8060bcc <HAL_GetTick>
 8061c02:	4602      	mov	r2, r0
 8061c04:	693b      	ldr	r3, [r7, #16]
 8061c06:	1ad3      	subs	r3, r2, r3
 8061c08:	f241 3288 	movw	r2, #5000	; 0x1388
 8061c0c:	4293      	cmp	r3, r2
 8061c0e:	d901      	bls.n	8061c14 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8061c10:	2303      	movs	r3, #3
 8061c12:	e0c5      	b.n	8061da0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8061c14:	4b65      	ldr	r3, [pc, #404]	; (8061dac <HAL_RCC_OscConfig+0x4e8>)
 8061c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8061c18:	f003 0302 	and.w	r3, r3, #2
 8061c1c:	2b00      	cmp	r3, #0
 8061c1e:	d0ee      	beq.n	8061bfe <HAL_RCC_OscConfig+0x33a>
 8061c20:	e014      	b.n	8061c4c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8061c22:	f7fe ffd3 	bl	8060bcc <HAL_GetTick>
 8061c26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8061c28:	e00a      	b.n	8061c40 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8061c2a:	f7fe ffcf 	bl	8060bcc <HAL_GetTick>
 8061c2e:	4602      	mov	r2, r0
 8061c30:	693b      	ldr	r3, [r7, #16]
 8061c32:	1ad3      	subs	r3, r2, r3
 8061c34:	f241 3288 	movw	r2, #5000	; 0x1388
 8061c38:	4293      	cmp	r3, r2
 8061c3a:	d901      	bls.n	8061c40 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8061c3c:	2303      	movs	r3, #3
 8061c3e:	e0af      	b.n	8061da0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8061c40:	4b5a      	ldr	r3, [pc, #360]	; (8061dac <HAL_RCC_OscConfig+0x4e8>)
 8061c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8061c44:	f003 0302 	and.w	r3, r3, #2
 8061c48:	2b00      	cmp	r3, #0
 8061c4a:	d1ee      	bne.n	8061c2a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8061c4c:	7dfb      	ldrb	r3, [r7, #23]
 8061c4e:	2b01      	cmp	r3, #1
 8061c50:	d105      	bne.n	8061c5e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8061c52:	4b56      	ldr	r3, [pc, #344]	; (8061dac <HAL_RCC_OscConfig+0x4e8>)
 8061c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8061c56:	4a55      	ldr	r2, [pc, #340]	; (8061dac <HAL_RCC_OscConfig+0x4e8>)
 8061c58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8061c5c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8061c5e:	687b      	ldr	r3, [r7, #4]
 8061c60:	699b      	ldr	r3, [r3, #24]
 8061c62:	2b00      	cmp	r3, #0
 8061c64:	f000 809b 	beq.w	8061d9e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8061c68:	4b50      	ldr	r3, [pc, #320]	; (8061dac <HAL_RCC_OscConfig+0x4e8>)
 8061c6a:	689b      	ldr	r3, [r3, #8]
 8061c6c:	f003 030c 	and.w	r3, r3, #12
 8061c70:	2b08      	cmp	r3, #8
 8061c72:	d05c      	beq.n	8061d2e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8061c74:	687b      	ldr	r3, [r7, #4]
 8061c76:	699b      	ldr	r3, [r3, #24]
 8061c78:	2b02      	cmp	r3, #2
 8061c7a:	d141      	bne.n	8061d00 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8061c7c:	4b4c      	ldr	r3, [pc, #304]	; (8061db0 <HAL_RCC_OscConfig+0x4ec>)
 8061c7e:	2200      	movs	r2, #0
 8061c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8061c82:	f7fe ffa3 	bl	8060bcc <HAL_GetTick>
 8061c86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8061c88:	e008      	b.n	8061c9c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8061c8a:	f7fe ff9f 	bl	8060bcc <HAL_GetTick>
 8061c8e:	4602      	mov	r2, r0
 8061c90:	693b      	ldr	r3, [r7, #16]
 8061c92:	1ad3      	subs	r3, r2, r3
 8061c94:	2b02      	cmp	r3, #2
 8061c96:	d901      	bls.n	8061c9c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8061c98:	2303      	movs	r3, #3
 8061c9a:	e081      	b.n	8061da0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8061c9c:	4b43      	ldr	r3, [pc, #268]	; (8061dac <HAL_RCC_OscConfig+0x4e8>)
 8061c9e:	681b      	ldr	r3, [r3, #0]
 8061ca0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8061ca4:	2b00      	cmp	r3, #0
 8061ca6:	d1f0      	bne.n	8061c8a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8061ca8:	687b      	ldr	r3, [r7, #4]
 8061caa:	69da      	ldr	r2, [r3, #28]
 8061cac:	687b      	ldr	r3, [r7, #4]
 8061cae:	6a1b      	ldr	r3, [r3, #32]
 8061cb0:	431a      	orrs	r2, r3
 8061cb2:	687b      	ldr	r3, [r7, #4]
 8061cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8061cb6:	019b      	lsls	r3, r3, #6
 8061cb8:	431a      	orrs	r2, r3
 8061cba:	687b      	ldr	r3, [r7, #4]
 8061cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8061cbe:	085b      	lsrs	r3, r3, #1
 8061cc0:	3b01      	subs	r3, #1
 8061cc2:	041b      	lsls	r3, r3, #16
 8061cc4:	431a      	orrs	r2, r3
 8061cc6:	687b      	ldr	r3, [r7, #4]
 8061cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8061cca:	061b      	lsls	r3, r3, #24
 8061ccc:	4937      	ldr	r1, [pc, #220]	; (8061dac <HAL_RCC_OscConfig+0x4e8>)
 8061cce:	4313      	orrs	r3, r2
 8061cd0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8061cd2:	4b37      	ldr	r3, [pc, #220]	; (8061db0 <HAL_RCC_OscConfig+0x4ec>)
 8061cd4:	2201      	movs	r2, #1
 8061cd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8061cd8:	f7fe ff78 	bl	8060bcc <HAL_GetTick>
 8061cdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8061cde:	e008      	b.n	8061cf2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8061ce0:	f7fe ff74 	bl	8060bcc <HAL_GetTick>
 8061ce4:	4602      	mov	r2, r0
 8061ce6:	693b      	ldr	r3, [r7, #16]
 8061ce8:	1ad3      	subs	r3, r2, r3
 8061cea:	2b02      	cmp	r3, #2
 8061cec:	d901      	bls.n	8061cf2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8061cee:	2303      	movs	r3, #3
 8061cf0:	e056      	b.n	8061da0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8061cf2:	4b2e      	ldr	r3, [pc, #184]	; (8061dac <HAL_RCC_OscConfig+0x4e8>)
 8061cf4:	681b      	ldr	r3, [r3, #0]
 8061cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8061cfa:	2b00      	cmp	r3, #0
 8061cfc:	d0f0      	beq.n	8061ce0 <HAL_RCC_OscConfig+0x41c>
 8061cfe:	e04e      	b.n	8061d9e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8061d00:	4b2b      	ldr	r3, [pc, #172]	; (8061db0 <HAL_RCC_OscConfig+0x4ec>)
 8061d02:	2200      	movs	r2, #0
 8061d04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8061d06:	f7fe ff61 	bl	8060bcc <HAL_GetTick>
 8061d0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8061d0c:	e008      	b.n	8061d20 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8061d0e:	f7fe ff5d 	bl	8060bcc <HAL_GetTick>
 8061d12:	4602      	mov	r2, r0
 8061d14:	693b      	ldr	r3, [r7, #16]
 8061d16:	1ad3      	subs	r3, r2, r3
 8061d18:	2b02      	cmp	r3, #2
 8061d1a:	d901      	bls.n	8061d20 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8061d1c:	2303      	movs	r3, #3
 8061d1e:	e03f      	b.n	8061da0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8061d20:	4b22      	ldr	r3, [pc, #136]	; (8061dac <HAL_RCC_OscConfig+0x4e8>)
 8061d22:	681b      	ldr	r3, [r3, #0]
 8061d24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8061d28:	2b00      	cmp	r3, #0
 8061d2a:	d1f0      	bne.n	8061d0e <HAL_RCC_OscConfig+0x44a>
 8061d2c:	e037      	b.n	8061d9e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8061d2e:	687b      	ldr	r3, [r7, #4]
 8061d30:	699b      	ldr	r3, [r3, #24]
 8061d32:	2b01      	cmp	r3, #1
 8061d34:	d101      	bne.n	8061d3a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8061d36:	2301      	movs	r3, #1
 8061d38:	e032      	b.n	8061da0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8061d3a:	4b1c      	ldr	r3, [pc, #112]	; (8061dac <HAL_RCC_OscConfig+0x4e8>)
 8061d3c:	685b      	ldr	r3, [r3, #4]
 8061d3e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8061d40:	687b      	ldr	r3, [r7, #4]
 8061d42:	699b      	ldr	r3, [r3, #24]
 8061d44:	2b01      	cmp	r3, #1
 8061d46:	d028      	beq.n	8061d9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8061d48:	68fb      	ldr	r3, [r7, #12]
 8061d4a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8061d4e:	687b      	ldr	r3, [r7, #4]
 8061d50:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8061d52:	429a      	cmp	r2, r3
 8061d54:	d121      	bne.n	8061d9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8061d56:	68fb      	ldr	r3, [r7, #12]
 8061d58:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8061d5c:	687b      	ldr	r3, [r7, #4]
 8061d5e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8061d60:	429a      	cmp	r2, r3
 8061d62:	d11a      	bne.n	8061d9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8061d64:	68fa      	ldr	r2, [r7, #12]
 8061d66:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8061d6a:	4013      	ands	r3, r2
 8061d6c:	687a      	ldr	r2, [r7, #4]
 8061d6e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8061d70:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8061d72:	4293      	cmp	r3, r2
 8061d74:	d111      	bne.n	8061d9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8061d76:	68fb      	ldr	r3, [r7, #12]
 8061d78:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8061d7c:	687b      	ldr	r3, [r7, #4]
 8061d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8061d80:	085b      	lsrs	r3, r3, #1
 8061d82:	3b01      	subs	r3, #1
 8061d84:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8061d86:	429a      	cmp	r2, r3
 8061d88:	d107      	bne.n	8061d9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8061d8a:	68fb      	ldr	r3, [r7, #12]
 8061d8c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8061d90:	687b      	ldr	r3, [r7, #4]
 8061d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8061d94:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8061d96:	429a      	cmp	r2, r3
 8061d98:	d001      	beq.n	8061d9e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8061d9a:	2301      	movs	r3, #1
 8061d9c:	e000      	b.n	8061da0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8061d9e:	2300      	movs	r3, #0
}
 8061da0:	4618      	mov	r0, r3
 8061da2:	3718      	adds	r7, #24
 8061da4:	46bd      	mov	sp, r7
 8061da6:	bd80      	pop	{r7, pc}
 8061da8:	40007000 	.word	0x40007000
 8061dac:	40023800 	.word	0x40023800
 8061db0:	42470060 	.word	0x42470060

08061db4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8061db4:	b580      	push	{r7, lr}
 8061db6:	b084      	sub	sp, #16
 8061db8:	af00      	add	r7, sp, #0
 8061dba:	6078      	str	r0, [r7, #4]
 8061dbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8061dbe:	687b      	ldr	r3, [r7, #4]
 8061dc0:	2b00      	cmp	r3, #0
 8061dc2:	d101      	bne.n	8061dc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8061dc4:	2301      	movs	r3, #1
 8061dc6:	e0cc      	b.n	8061f62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8061dc8:	4b68      	ldr	r3, [pc, #416]	; (8061f6c <HAL_RCC_ClockConfig+0x1b8>)
 8061dca:	681b      	ldr	r3, [r3, #0]
 8061dcc:	f003 0307 	and.w	r3, r3, #7
 8061dd0:	683a      	ldr	r2, [r7, #0]
 8061dd2:	429a      	cmp	r2, r3
 8061dd4:	d90c      	bls.n	8061df0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8061dd6:	4b65      	ldr	r3, [pc, #404]	; (8061f6c <HAL_RCC_ClockConfig+0x1b8>)
 8061dd8:	683a      	ldr	r2, [r7, #0]
 8061dda:	b2d2      	uxtb	r2, r2
 8061ddc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8061dde:	4b63      	ldr	r3, [pc, #396]	; (8061f6c <HAL_RCC_ClockConfig+0x1b8>)
 8061de0:	681b      	ldr	r3, [r3, #0]
 8061de2:	f003 0307 	and.w	r3, r3, #7
 8061de6:	683a      	ldr	r2, [r7, #0]
 8061de8:	429a      	cmp	r2, r3
 8061dea:	d001      	beq.n	8061df0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8061dec:	2301      	movs	r3, #1
 8061dee:	e0b8      	b.n	8061f62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8061df0:	687b      	ldr	r3, [r7, #4]
 8061df2:	681b      	ldr	r3, [r3, #0]
 8061df4:	f003 0302 	and.w	r3, r3, #2
 8061df8:	2b00      	cmp	r3, #0
 8061dfa:	d020      	beq.n	8061e3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8061dfc:	687b      	ldr	r3, [r7, #4]
 8061dfe:	681b      	ldr	r3, [r3, #0]
 8061e00:	f003 0304 	and.w	r3, r3, #4
 8061e04:	2b00      	cmp	r3, #0
 8061e06:	d005      	beq.n	8061e14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8061e08:	4b59      	ldr	r3, [pc, #356]	; (8061f70 <HAL_RCC_ClockConfig+0x1bc>)
 8061e0a:	689b      	ldr	r3, [r3, #8]
 8061e0c:	4a58      	ldr	r2, [pc, #352]	; (8061f70 <HAL_RCC_ClockConfig+0x1bc>)
 8061e0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8061e12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8061e14:	687b      	ldr	r3, [r7, #4]
 8061e16:	681b      	ldr	r3, [r3, #0]
 8061e18:	f003 0308 	and.w	r3, r3, #8
 8061e1c:	2b00      	cmp	r3, #0
 8061e1e:	d005      	beq.n	8061e2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8061e20:	4b53      	ldr	r3, [pc, #332]	; (8061f70 <HAL_RCC_ClockConfig+0x1bc>)
 8061e22:	689b      	ldr	r3, [r3, #8]
 8061e24:	4a52      	ldr	r2, [pc, #328]	; (8061f70 <HAL_RCC_ClockConfig+0x1bc>)
 8061e26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8061e2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8061e2c:	4b50      	ldr	r3, [pc, #320]	; (8061f70 <HAL_RCC_ClockConfig+0x1bc>)
 8061e2e:	689b      	ldr	r3, [r3, #8]
 8061e30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8061e34:	687b      	ldr	r3, [r7, #4]
 8061e36:	689b      	ldr	r3, [r3, #8]
 8061e38:	494d      	ldr	r1, [pc, #308]	; (8061f70 <HAL_RCC_ClockConfig+0x1bc>)
 8061e3a:	4313      	orrs	r3, r2
 8061e3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8061e3e:	687b      	ldr	r3, [r7, #4]
 8061e40:	681b      	ldr	r3, [r3, #0]
 8061e42:	f003 0301 	and.w	r3, r3, #1
 8061e46:	2b00      	cmp	r3, #0
 8061e48:	d044      	beq.n	8061ed4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8061e4a:	687b      	ldr	r3, [r7, #4]
 8061e4c:	685b      	ldr	r3, [r3, #4]
 8061e4e:	2b01      	cmp	r3, #1
 8061e50:	d107      	bne.n	8061e62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8061e52:	4b47      	ldr	r3, [pc, #284]	; (8061f70 <HAL_RCC_ClockConfig+0x1bc>)
 8061e54:	681b      	ldr	r3, [r3, #0]
 8061e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8061e5a:	2b00      	cmp	r3, #0
 8061e5c:	d119      	bne.n	8061e92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8061e5e:	2301      	movs	r3, #1
 8061e60:	e07f      	b.n	8061f62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8061e62:	687b      	ldr	r3, [r7, #4]
 8061e64:	685b      	ldr	r3, [r3, #4]
 8061e66:	2b02      	cmp	r3, #2
 8061e68:	d003      	beq.n	8061e72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8061e6a:	687b      	ldr	r3, [r7, #4]
 8061e6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8061e6e:	2b03      	cmp	r3, #3
 8061e70:	d107      	bne.n	8061e82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8061e72:	4b3f      	ldr	r3, [pc, #252]	; (8061f70 <HAL_RCC_ClockConfig+0x1bc>)
 8061e74:	681b      	ldr	r3, [r3, #0]
 8061e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8061e7a:	2b00      	cmp	r3, #0
 8061e7c:	d109      	bne.n	8061e92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8061e7e:	2301      	movs	r3, #1
 8061e80:	e06f      	b.n	8061f62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8061e82:	4b3b      	ldr	r3, [pc, #236]	; (8061f70 <HAL_RCC_ClockConfig+0x1bc>)
 8061e84:	681b      	ldr	r3, [r3, #0]
 8061e86:	f003 0302 	and.w	r3, r3, #2
 8061e8a:	2b00      	cmp	r3, #0
 8061e8c:	d101      	bne.n	8061e92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8061e8e:	2301      	movs	r3, #1
 8061e90:	e067      	b.n	8061f62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8061e92:	4b37      	ldr	r3, [pc, #220]	; (8061f70 <HAL_RCC_ClockConfig+0x1bc>)
 8061e94:	689b      	ldr	r3, [r3, #8]
 8061e96:	f023 0203 	bic.w	r2, r3, #3
 8061e9a:	687b      	ldr	r3, [r7, #4]
 8061e9c:	685b      	ldr	r3, [r3, #4]
 8061e9e:	4934      	ldr	r1, [pc, #208]	; (8061f70 <HAL_RCC_ClockConfig+0x1bc>)
 8061ea0:	4313      	orrs	r3, r2
 8061ea2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8061ea4:	f7fe fe92 	bl	8060bcc <HAL_GetTick>
 8061ea8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8061eaa:	e00a      	b.n	8061ec2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8061eac:	f7fe fe8e 	bl	8060bcc <HAL_GetTick>
 8061eb0:	4602      	mov	r2, r0
 8061eb2:	68fb      	ldr	r3, [r7, #12]
 8061eb4:	1ad3      	subs	r3, r2, r3
 8061eb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8061eba:	4293      	cmp	r3, r2
 8061ebc:	d901      	bls.n	8061ec2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8061ebe:	2303      	movs	r3, #3
 8061ec0:	e04f      	b.n	8061f62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8061ec2:	4b2b      	ldr	r3, [pc, #172]	; (8061f70 <HAL_RCC_ClockConfig+0x1bc>)
 8061ec4:	689b      	ldr	r3, [r3, #8]
 8061ec6:	f003 020c 	and.w	r2, r3, #12
 8061eca:	687b      	ldr	r3, [r7, #4]
 8061ecc:	685b      	ldr	r3, [r3, #4]
 8061ece:	009b      	lsls	r3, r3, #2
 8061ed0:	429a      	cmp	r2, r3
 8061ed2:	d1eb      	bne.n	8061eac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8061ed4:	4b25      	ldr	r3, [pc, #148]	; (8061f6c <HAL_RCC_ClockConfig+0x1b8>)
 8061ed6:	681b      	ldr	r3, [r3, #0]
 8061ed8:	f003 0307 	and.w	r3, r3, #7
 8061edc:	683a      	ldr	r2, [r7, #0]
 8061ede:	429a      	cmp	r2, r3
 8061ee0:	d20c      	bcs.n	8061efc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8061ee2:	4b22      	ldr	r3, [pc, #136]	; (8061f6c <HAL_RCC_ClockConfig+0x1b8>)
 8061ee4:	683a      	ldr	r2, [r7, #0]
 8061ee6:	b2d2      	uxtb	r2, r2
 8061ee8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8061eea:	4b20      	ldr	r3, [pc, #128]	; (8061f6c <HAL_RCC_ClockConfig+0x1b8>)
 8061eec:	681b      	ldr	r3, [r3, #0]
 8061eee:	f003 0307 	and.w	r3, r3, #7
 8061ef2:	683a      	ldr	r2, [r7, #0]
 8061ef4:	429a      	cmp	r2, r3
 8061ef6:	d001      	beq.n	8061efc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8061ef8:	2301      	movs	r3, #1
 8061efa:	e032      	b.n	8061f62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8061efc:	687b      	ldr	r3, [r7, #4]
 8061efe:	681b      	ldr	r3, [r3, #0]
 8061f00:	f003 0304 	and.w	r3, r3, #4
 8061f04:	2b00      	cmp	r3, #0
 8061f06:	d008      	beq.n	8061f1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8061f08:	4b19      	ldr	r3, [pc, #100]	; (8061f70 <HAL_RCC_ClockConfig+0x1bc>)
 8061f0a:	689b      	ldr	r3, [r3, #8]
 8061f0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8061f10:	687b      	ldr	r3, [r7, #4]
 8061f12:	68db      	ldr	r3, [r3, #12]
 8061f14:	4916      	ldr	r1, [pc, #88]	; (8061f70 <HAL_RCC_ClockConfig+0x1bc>)
 8061f16:	4313      	orrs	r3, r2
 8061f18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8061f1a:	687b      	ldr	r3, [r7, #4]
 8061f1c:	681b      	ldr	r3, [r3, #0]
 8061f1e:	f003 0308 	and.w	r3, r3, #8
 8061f22:	2b00      	cmp	r3, #0
 8061f24:	d009      	beq.n	8061f3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8061f26:	4b12      	ldr	r3, [pc, #72]	; (8061f70 <HAL_RCC_ClockConfig+0x1bc>)
 8061f28:	689b      	ldr	r3, [r3, #8]
 8061f2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8061f2e:	687b      	ldr	r3, [r7, #4]
 8061f30:	691b      	ldr	r3, [r3, #16]
 8061f32:	00db      	lsls	r3, r3, #3
 8061f34:	490e      	ldr	r1, [pc, #56]	; (8061f70 <HAL_RCC_ClockConfig+0x1bc>)
 8061f36:	4313      	orrs	r3, r2
 8061f38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8061f3a:	f000 f821 	bl	8061f80 <HAL_RCC_GetSysClockFreq>
 8061f3e:	4602      	mov	r2, r0
 8061f40:	4b0b      	ldr	r3, [pc, #44]	; (8061f70 <HAL_RCC_ClockConfig+0x1bc>)
 8061f42:	689b      	ldr	r3, [r3, #8]
 8061f44:	091b      	lsrs	r3, r3, #4
 8061f46:	f003 030f 	and.w	r3, r3, #15
 8061f4a:	490a      	ldr	r1, [pc, #40]	; (8061f74 <HAL_RCC_ClockConfig+0x1c0>)
 8061f4c:	5ccb      	ldrb	r3, [r1, r3]
 8061f4e:	fa22 f303 	lsr.w	r3, r2, r3
 8061f52:	4a09      	ldr	r2, [pc, #36]	; (8061f78 <HAL_RCC_ClockConfig+0x1c4>)
 8061f54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8061f56:	4b09      	ldr	r3, [pc, #36]	; (8061f7c <HAL_RCC_ClockConfig+0x1c8>)
 8061f58:	681b      	ldr	r3, [r3, #0]
 8061f5a:	4618      	mov	r0, r3
 8061f5c:	f7fe fdf2 	bl	8060b44 <HAL_InitTick>

  return HAL_OK;
 8061f60:	2300      	movs	r3, #0
}
 8061f62:	4618      	mov	r0, r3
 8061f64:	3710      	adds	r7, #16
 8061f66:	46bd      	mov	sp, r7
 8061f68:	bd80      	pop	{r7, pc}
 8061f6a:	bf00      	nop
 8061f6c:	40023c00 	.word	0x40023c00
 8061f70:	40023800 	.word	0x40023800
 8061f74:	08062fd4 	.word	0x08062fd4
 8061f78:	20000000 	.word	0x20000000
 8061f7c:	20000004 	.word	0x20000004

08061f80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8061f80:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8061f84:	b084      	sub	sp, #16
 8061f86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8061f88:	2300      	movs	r3, #0
 8061f8a:	607b      	str	r3, [r7, #4]
 8061f8c:	2300      	movs	r3, #0
 8061f8e:	60fb      	str	r3, [r7, #12]
 8061f90:	2300      	movs	r3, #0
 8061f92:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8061f94:	2300      	movs	r3, #0
 8061f96:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8061f98:	4b67      	ldr	r3, [pc, #412]	; (8062138 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8061f9a:	689b      	ldr	r3, [r3, #8]
 8061f9c:	f003 030c 	and.w	r3, r3, #12
 8061fa0:	2b08      	cmp	r3, #8
 8061fa2:	d00d      	beq.n	8061fc0 <HAL_RCC_GetSysClockFreq+0x40>
 8061fa4:	2b08      	cmp	r3, #8
 8061fa6:	f200 80bd 	bhi.w	8062124 <HAL_RCC_GetSysClockFreq+0x1a4>
 8061faa:	2b00      	cmp	r3, #0
 8061fac:	d002      	beq.n	8061fb4 <HAL_RCC_GetSysClockFreq+0x34>
 8061fae:	2b04      	cmp	r3, #4
 8061fb0:	d003      	beq.n	8061fba <HAL_RCC_GetSysClockFreq+0x3a>
 8061fb2:	e0b7      	b.n	8062124 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8061fb4:	4b61      	ldr	r3, [pc, #388]	; (806213c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8061fb6:	60bb      	str	r3, [r7, #8]
       break;
 8061fb8:	e0b7      	b.n	806212a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8061fba:	4b61      	ldr	r3, [pc, #388]	; (8062140 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8061fbc:	60bb      	str	r3, [r7, #8]
      break;
 8061fbe:	e0b4      	b.n	806212a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8061fc0:	4b5d      	ldr	r3, [pc, #372]	; (8062138 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8061fc2:	685b      	ldr	r3, [r3, #4]
 8061fc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8061fc8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8061fca:	4b5b      	ldr	r3, [pc, #364]	; (8062138 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8061fcc:	685b      	ldr	r3, [r3, #4]
 8061fce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8061fd2:	2b00      	cmp	r3, #0
 8061fd4:	d04d      	beq.n	8062072 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8061fd6:	4b58      	ldr	r3, [pc, #352]	; (8062138 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8061fd8:	685b      	ldr	r3, [r3, #4]
 8061fda:	099b      	lsrs	r3, r3, #6
 8061fdc:	461a      	mov	r2, r3
 8061fde:	f04f 0300 	mov.w	r3, #0
 8061fe2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8061fe6:	f04f 0100 	mov.w	r1, #0
 8061fea:	ea02 0800 	and.w	r8, r2, r0
 8061fee:	ea03 0901 	and.w	r9, r3, r1
 8061ff2:	4640      	mov	r0, r8
 8061ff4:	4649      	mov	r1, r9
 8061ff6:	f04f 0200 	mov.w	r2, #0
 8061ffa:	f04f 0300 	mov.w	r3, #0
 8061ffe:	014b      	lsls	r3, r1, #5
 8062000:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8062004:	0142      	lsls	r2, r0, #5
 8062006:	4610      	mov	r0, r2
 8062008:	4619      	mov	r1, r3
 806200a:	ebb0 0008 	subs.w	r0, r0, r8
 806200e:	eb61 0109 	sbc.w	r1, r1, r9
 8062012:	f04f 0200 	mov.w	r2, #0
 8062016:	f04f 0300 	mov.w	r3, #0
 806201a:	018b      	lsls	r3, r1, #6
 806201c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8062020:	0182      	lsls	r2, r0, #6
 8062022:	1a12      	subs	r2, r2, r0
 8062024:	eb63 0301 	sbc.w	r3, r3, r1
 8062028:	f04f 0000 	mov.w	r0, #0
 806202c:	f04f 0100 	mov.w	r1, #0
 8062030:	00d9      	lsls	r1, r3, #3
 8062032:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8062036:	00d0      	lsls	r0, r2, #3
 8062038:	4602      	mov	r2, r0
 806203a:	460b      	mov	r3, r1
 806203c:	eb12 0208 	adds.w	r2, r2, r8
 8062040:	eb43 0309 	adc.w	r3, r3, r9
 8062044:	f04f 0000 	mov.w	r0, #0
 8062048:	f04f 0100 	mov.w	r1, #0
 806204c:	0259      	lsls	r1, r3, #9
 806204e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8062052:	0250      	lsls	r0, r2, #9
 8062054:	4602      	mov	r2, r0
 8062056:	460b      	mov	r3, r1
 8062058:	4610      	mov	r0, r2
 806205a:	4619      	mov	r1, r3
 806205c:	687b      	ldr	r3, [r7, #4]
 806205e:	461a      	mov	r2, r3
 8062060:	f04f 0300 	mov.w	r3, #0
 8062064:	f7fe f8b0 	bl	80601c8 <__aeabi_uldivmod>
 8062068:	4602      	mov	r2, r0
 806206a:	460b      	mov	r3, r1
 806206c:	4613      	mov	r3, r2
 806206e:	60fb      	str	r3, [r7, #12]
 8062070:	e04a      	b.n	8062108 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8062072:	4b31      	ldr	r3, [pc, #196]	; (8062138 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8062074:	685b      	ldr	r3, [r3, #4]
 8062076:	099b      	lsrs	r3, r3, #6
 8062078:	461a      	mov	r2, r3
 806207a:	f04f 0300 	mov.w	r3, #0
 806207e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8062082:	f04f 0100 	mov.w	r1, #0
 8062086:	ea02 0400 	and.w	r4, r2, r0
 806208a:	ea03 0501 	and.w	r5, r3, r1
 806208e:	4620      	mov	r0, r4
 8062090:	4629      	mov	r1, r5
 8062092:	f04f 0200 	mov.w	r2, #0
 8062096:	f04f 0300 	mov.w	r3, #0
 806209a:	014b      	lsls	r3, r1, #5
 806209c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80620a0:	0142      	lsls	r2, r0, #5
 80620a2:	4610      	mov	r0, r2
 80620a4:	4619      	mov	r1, r3
 80620a6:	1b00      	subs	r0, r0, r4
 80620a8:	eb61 0105 	sbc.w	r1, r1, r5
 80620ac:	f04f 0200 	mov.w	r2, #0
 80620b0:	f04f 0300 	mov.w	r3, #0
 80620b4:	018b      	lsls	r3, r1, #6
 80620b6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80620ba:	0182      	lsls	r2, r0, #6
 80620bc:	1a12      	subs	r2, r2, r0
 80620be:	eb63 0301 	sbc.w	r3, r3, r1
 80620c2:	f04f 0000 	mov.w	r0, #0
 80620c6:	f04f 0100 	mov.w	r1, #0
 80620ca:	00d9      	lsls	r1, r3, #3
 80620cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80620d0:	00d0      	lsls	r0, r2, #3
 80620d2:	4602      	mov	r2, r0
 80620d4:	460b      	mov	r3, r1
 80620d6:	1912      	adds	r2, r2, r4
 80620d8:	eb45 0303 	adc.w	r3, r5, r3
 80620dc:	f04f 0000 	mov.w	r0, #0
 80620e0:	f04f 0100 	mov.w	r1, #0
 80620e4:	0299      	lsls	r1, r3, #10
 80620e6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80620ea:	0290      	lsls	r0, r2, #10
 80620ec:	4602      	mov	r2, r0
 80620ee:	460b      	mov	r3, r1
 80620f0:	4610      	mov	r0, r2
 80620f2:	4619      	mov	r1, r3
 80620f4:	687b      	ldr	r3, [r7, #4]
 80620f6:	461a      	mov	r2, r3
 80620f8:	f04f 0300 	mov.w	r3, #0
 80620fc:	f7fe f864 	bl	80601c8 <__aeabi_uldivmod>
 8062100:	4602      	mov	r2, r0
 8062102:	460b      	mov	r3, r1
 8062104:	4613      	mov	r3, r2
 8062106:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8062108:	4b0b      	ldr	r3, [pc, #44]	; (8062138 <HAL_RCC_GetSysClockFreq+0x1b8>)
 806210a:	685b      	ldr	r3, [r3, #4]
 806210c:	0c1b      	lsrs	r3, r3, #16
 806210e:	f003 0303 	and.w	r3, r3, #3
 8062112:	3301      	adds	r3, #1
 8062114:	005b      	lsls	r3, r3, #1
 8062116:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8062118:	68fa      	ldr	r2, [r7, #12]
 806211a:	683b      	ldr	r3, [r7, #0]
 806211c:	fbb2 f3f3 	udiv	r3, r2, r3
 8062120:	60bb      	str	r3, [r7, #8]
      break;
 8062122:	e002      	b.n	806212a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8062124:	4b05      	ldr	r3, [pc, #20]	; (806213c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8062126:	60bb      	str	r3, [r7, #8]
      break;
 8062128:	bf00      	nop
    }
  }
  return sysclockfreq;
 806212a:	68bb      	ldr	r3, [r7, #8]
}
 806212c:	4618      	mov	r0, r3
 806212e:	3710      	adds	r7, #16
 8062130:	46bd      	mov	sp, r7
 8062132:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8062136:	bf00      	nop
 8062138:	40023800 	.word	0x40023800
 806213c:	00f42400 	.word	0x00f42400
 8062140:	007a1200 	.word	0x007a1200

08062144 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8062144:	b480      	push	{r7}
 8062146:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8062148:	4b03      	ldr	r3, [pc, #12]	; (8062158 <HAL_RCC_GetHCLKFreq+0x14>)
 806214a:	681b      	ldr	r3, [r3, #0]
}
 806214c:	4618      	mov	r0, r3
 806214e:	46bd      	mov	sp, r7
 8062150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8062154:	4770      	bx	lr
 8062156:	bf00      	nop
 8062158:	20000000 	.word	0x20000000

0806215c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 806215c:	b580      	push	{r7, lr}
 806215e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8062160:	f7ff fff0 	bl	8062144 <HAL_RCC_GetHCLKFreq>
 8062164:	4602      	mov	r2, r0
 8062166:	4b05      	ldr	r3, [pc, #20]	; (806217c <HAL_RCC_GetPCLK1Freq+0x20>)
 8062168:	689b      	ldr	r3, [r3, #8]
 806216a:	0a9b      	lsrs	r3, r3, #10
 806216c:	f003 0307 	and.w	r3, r3, #7
 8062170:	4903      	ldr	r1, [pc, #12]	; (8062180 <HAL_RCC_GetPCLK1Freq+0x24>)
 8062172:	5ccb      	ldrb	r3, [r1, r3]
 8062174:	fa22 f303 	lsr.w	r3, r2, r3
}
 8062178:	4618      	mov	r0, r3
 806217a:	bd80      	pop	{r7, pc}
 806217c:	40023800 	.word	0x40023800
 8062180:	08062fe4 	.word	0x08062fe4

08062184 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8062184:	b580      	push	{r7, lr}
 8062186:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8062188:	f7ff ffdc 	bl	8062144 <HAL_RCC_GetHCLKFreq>
 806218c:	4602      	mov	r2, r0
 806218e:	4b05      	ldr	r3, [pc, #20]	; (80621a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8062190:	689b      	ldr	r3, [r3, #8]
 8062192:	0b5b      	lsrs	r3, r3, #13
 8062194:	f003 0307 	and.w	r3, r3, #7
 8062198:	4903      	ldr	r1, [pc, #12]	; (80621a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 806219a:	5ccb      	ldrb	r3, [r1, r3]
 806219c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80621a0:	4618      	mov	r0, r3
 80621a2:	bd80      	pop	{r7, pc}
 80621a4:	40023800 	.word	0x40023800
 80621a8:	08062fe4 	.word	0x08062fe4

080621ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80621ac:	b580      	push	{r7, lr}
 80621ae:	b082      	sub	sp, #8
 80621b0:	af00      	add	r7, sp, #0
 80621b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80621b4:	687b      	ldr	r3, [r7, #4]
 80621b6:	2b00      	cmp	r3, #0
 80621b8:	d101      	bne.n	80621be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80621ba:	2301      	movs	r3, #1
 80621bc:	e03f      	b.n	806223e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80621be:	687b      	ldr	r3, [r7, #4]
 80621c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80621c4:	b2db      	uxtb	r3, r3
 80621c6:	2b00      	cmp	r3, #0
 80621c8:	d106      	bne.n	80621d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80621ca:	687b      	ldr	r3, [r7, #4]
 80621cc:	2200      	movs	r2, #0
 80621ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80621d2:	6878      	ldr	r0, [r7, #4]
 80621d4:	f7fe fbd0 	bl	8060978 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80621d8:	687b      	ldr	r3, [r7, #4]
 80621da:	2224      	movs	r2, #36	; 0x24
 80621dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80621e0:	687b      	ldr	r3, [r7, #4]
 80621e2:	681b      	ldr	r3, [r3, #0]
 80621e4:	68da      	ldr	r2, [r3, #12]
 80621e6:	687b      	ldr	r3, [r7, #4]
 80621e8:	681b      	ldr	r3, [r3, #0]
 80621ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80621ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80621f0:	6878      	ldr	r0, [r7, #4]
 80621f2:	f000 fcdb 	bl	8062bac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80621f6:	687b      	ldr	r3, [r7, #4]
 80621f8:	681b      	ldr	r3, [r3, #0]
 80621fa:	691a      	ldr	r2, [r3, #16]
 80621fc:	687b      	ldr	r3, [r7, #4]
 80621fe:	681b      	ldr	r3, [r3, #0]
 8062200:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8062204:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8062206:	687b      	ldr	r3, [r7, #4]
 8062208:	681b      	ldr	r3, [r3, #0]
 806220a:	695a      	ldr	r2, [r3, #20]
 806220c:	687b      	ldr	r3, [r7, #4]
 806220e:	681b      	ldr	r3, [r3, #0]
 8062210:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8062214:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8062216:	687b      	ldr	r3, [r7, #4]
 8062218:	681b      	ldr	r3, [r3, #0]
 806221a:	68da      	ldr	r2, [r3, #12]
 806221c:	687b      	ldr	r3, [r7, #4]
 806221e:	681b      	ldr	r3, [r3, #0]
 8062220:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8062224:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8062226:	687b      	ldr	r3, [r7, #4]
 8062228:	2200      	movs	r2, #0
 806222a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 806222c:	687b      	ldr	r3, [r7, #4]
 806222e:	2220      	movs	r2, #32
 8062230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8062234:	687b      	ldr	r3, [r7, #4]
 8062236:	2220      	movs	r2, #32
 8062238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 806223c:	2300      	movs	r3, #0
}
 806223e:	4618      	mov	r0, r3
 8062240:	3708      	adds	r7, #8
 8062242:	46bd      	mov	sp, r7
 8062244:	bd80      	pop	{r7, pc}

08062246 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8062246:	b580      	push	{r7, lr}
 8062248:	b084      	sub	sp, #16
 806224a:	af00      	add	r7, sp, #0
 806224c:	60f8      	str	r0, [r7, #12]
 806224e:	60b9      	str	r1, [r7, #8]
 8062250:	4613      	mov	r3, r2
 8062252:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8062254:	68fb      	ldr	r3, [r7, #12]
 8062256:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 806225a:	b2db      	uxtb	r3, r3
 806225c:	2b20      	cmp	r3, #32
 806225e:	d11d      	bne.n	806229c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8062260:	68bb      	ldr	r3, [r7, #8]
 8062262:	2b00      	cmp	r3, #0
 8062264:	d002      	beq.n	806226c <HAL_UART_Receive_IT+0x26>
 8062266:	88fb      	ldrh	r3, [r7, #6]
 8062268:	2b00      	cmp	r3, #0
 806226a:	d101      	bne.n	8062270 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 806226c:	2301      	movs	r3, #1
 806226e:	e016      	b.n	806229e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8062270:	68fb      	ldr	r3, [r7, #12]
 8062272:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8062276:	2b01      	cmp	r3, #1
 8062278:	d101      	bne.n	806227e <HAL_UART_Receive_IT+0x38>
 806227a:	2302      	movs	r3, #2
 806227c:	e00f      	b.n	806229e <HAL_UART_Receive_IT+0x58>
 806227e:	68fb      	ldr	r3, [r7, #12]
 8062280:	2201      	movs	r2, #1
 8062282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8062286:	68fb      	ldr	r3, [r7, #12]
 8062288:	2200      	movs	r2, #0
 806228a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 806228c:	88fb      	ldrh	r3, [r7, #6]
 806228e:	461a      	mov	r2, r3
 8062290:	68b9      	ldr	r1, [r7, #8]
 8062292:	68f8      	ldr	r0, [r7, #12]
 8062294:	f000 fab6 	bl	8062804 <UART_Start_Receive_IT>
 8062298:	4603      	mov	r3, r0
 806229a:	e000      	b.n	806229e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 806229c:	2302      	movs	r3, #2
  }
}
 806229e:	4618      	mov	r0, r3
 80622a0:	3710      	adds	r7, #16
 80622a2:	46bd      	mov	sp, r7
 80622a4:	bd80      	pop	{r7, pc}
	...

080622a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80622a8:	b580      	push	{r7, lr}
 80622aa:	b0ba      	sub	sp, #232	; 0xe8
 80622ac:	af00      	add	r7, sp, #0
 80622ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80622b0:	687b      	ldr	r3, [r7, #4]
 80622b2:	681b      	ldr	r3, [r3, #0]
 80622b4:	681b      	ldr	r3, [r3, #0]
 80622b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80622ba:	687b      	ldr	r3, [r7, #4]
 80622bc:	681b      	ldr	r3, [r3, #0]
 80622be:	68db      	ldr	r3, [r3, #12]
 80622c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80622c4:	687b      	ldr	r3, [r7, #4]
 80622c6:	681b      	ldr	r3, [r3, #0]
 80622c8:	695b      	ldr	r3, [r3, #20]
 80622ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80622ce:	2300      	movs	r3, #0
 80622d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80622d4:	2300      	movs	r3, #0
 80622d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80622da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80622de:	f003 030f 	and.w	r3, r3, #15
 80622e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80622e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80622ea:	2b00      	cmp	r3, #0
 80622ec:	d10f      	bne.n	806230e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80622ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80622f2:	f003 0320 	and.w	r3, r3, #32
 80622f6:	2b00      	cmp	r3, #0
 80622f8:	d009      	beq.n	806230e <HAL_UART_IRQHandler+0x66>
 80622fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80622fe:	f003 0320 	and.w	r3, r3, #32
 8062302:	2b00      	cmp	r3, #0
 8062304:	d003      	beq.n	806230e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8062306:	6878      	ldr	r0, [r7, #4]
 8062308:	f000 fb95 	bl	8062a36 <UART_Receive_IT>
      return;
 806230c:	e256      	b.n	80627bc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 806230e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8062312:	2b00      	cmp	r3, #0
 8062314:	f000 80de 	beq.w	80624d4 <HAL_UART_IRQHandler+0x22c>
 8062318:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 806231c:	f003 0301 	and.w	r3, r3, #1
 8062320:	2b00      	cmp	r3, #0
 8062322:	d106      	bne.n	8062332 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8062324:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8062328:	f403 7390 	and.w	r3, r3, #288	; 0x120
 806232c:	2b00      	cmp	r3, #0
 806232e:	f000 80d1 	beq.w	80624d4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8062332:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8062336:	f003 0301 	and.w	r3, r3, #1
 806233a:	2b00      	cmp	r3, #0
 806233c:	d00b      	beq.n	8062356 <HAL_UART_IRQHandler+0xae>
 806233e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8062342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8062346:	2b00      	cmp	r3, #0
 8062348:	d005      	beq.n	8062356 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 806234a:	687b      	ldr	r3, [r7, #4]
 806234c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806234e:	f043 0201 	orr.w	r2, r3, #1
 8062352:	687b      	ldr	r3, [r7, #4]
 8062354:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8062356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 806235a:	f003 0304 	and.w	r3, r3, #4
 806235e:	2b00      	cmp	r3, #0
 8062360:	d00b      	beq.n	806237a <HAL_UART_IRQHandler+0xd2>
 8062362:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8062366:	f003 0301 	and.w	r3, r3, #1
 806236a:	2b00      	cmp	r3, #0
 806236c:	d005      	beq.n	806237a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 806236e:	687b      	ldr	r3, [r7, #4]
 8062370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8062372:	f043 0202 	orr.w	r2, r3, #2
 8062376:	687b      	ldr	r3, [r7, #4]
 8062378:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 806237a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 806237e:	f003 0302 	and.w	r3, r3, #2
 8062382:	2b00      	cmp	r3, #0
 8062384:	d00b      	beq.n	806239e <HAL_UART_IRQHandler+0xf6>
 8062386:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 806238a:	f003 0301 	and.w	r3, r3, #1
 806238e:	2b00      	cmp	r3, #0
 8062390:	d005      	beq.n	806239e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8062392:	687b      	ldr	r3, [r7, #4]
 8062394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8062396:	f043 0204 	orr.w	r2, r3, #4
 806239a:	687b      	ldr	r3, [r7, #4]
 806239c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 806239e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80623a2:	f003 0308 	and.w	r3, r3, #8
 80623a6:	2b00      	cmp	r3, #0
 80623a8:	d011      	beq.n	80623ce <HAL_UART_IRQHandler+0x126>
 80623aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80623ae:	f003 0320 	and.w	r3, r3, #32
 80623b2:	2b00      	cmp	r3, #0
 80623b4:	d105      	bne.n	80623c2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80623b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80623ba:	f003 0301 	and.w	r3, r3, #1
 80623be:	2b00      	cmp	r3, #0
 80623c0:	d005      	beq.n	80623ce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80623c2:	687b      	ldr	r3, [r7, #4]
 80623c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80623c6:	f043 0208 	orr.w	r2, r3, #8
 80623ca:	687b      	ldr	r3, [r7, #4]
 80623cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80623ce:	687b      	ldr	r3, [r7, #4]
 80623d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80623d2:	2b00      	cmp	r3, #0
 80623d4:	f000 81ed 	beq.w	80627b2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80623d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80623dc:	f003 0320 	and.w	r3, r3, #32
 80623e0:	2b00      	cmp	r3, #0
 80623e2:	d008      	beq.n	80623f6 <HAL_UART_IRQHandler+0x14e>
 80623e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80623e8:	f003 0320 	and.w	r3, r3, #32
 80623ec:	2b00      	cmp	r3, #0
 80623ee:	d002      	beq.n	80623f6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80623f0:	6878      	ldr	r0, [r7, #4]
 80623f2:	f000 fb20 	bl	8062a36 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80623f6:	687b      	ldr	r3, [r7, #4]
 80623f8:	681b      	ldr	r3, [r3, #0]
 80623fa:	695b      	ldr	r3, [r3, #20]
 80623fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8062400:	2b40      	cmp	r3, #64	; 0x40
 8062402:	bf0c      	ite	eq
 8062404:	2301      	moveq	r3, #1
 8062406:	2300      	movne	r3, #0
 8062408:	b2db      	uxtb	r3, r3
 806240a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 806240e:	687b      	ldr	r3, [r7, #4]
 8062410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8062412:	f003 0308 	and.w	r3, r3, #8
 8062416:	2b00      	cmp	r3, #0
 8062418:	d103      	bne.n	8062422 <HAL_UART_IRQHandler+0x17a>
 806241a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 806241e:	2b00      	cmp	r3, #0
 8062420:	d04f      	beq.n	80624c2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8062422:	6878      	ldr	r0, [r7, #4]
 8062424:	f000 fa28 	bl	8062878 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8062428:	687b      	ldr	r3, [r7, #4]
 806242a:	681b      	ldr	r3, [r3, #0]
 806242c:	695b      	ldr	r3, [r3, #20]
 806242e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8062432:	2b40      	cmp	r3, #64	; 0x40
 8062434:	d141      	bne.n	80624ba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8062436:	687b      	ldr	r3, [r7, #4]
 8062438:	681b      	ldr	r3, [r3, #0]
 806243a:	3314      	adds	r3, #20
 806243c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8062440:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8062444:	e853 3f00 	ldrex	r3, [r3]
 8062448:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 806244c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8062450:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8062454:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8062458:	687b      	ldr	r3, [r7, #4]
 806245a:	681b      	ldr	r3, [r3, #0]
 806245c:	3314      	adds	r3, #20
 806245e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8062462:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8062466:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 806246a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 806246e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8062472:	e841 2300 	strex	r3, r2, [r1]
 8062476:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 806247a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 806247e:	2b00      	cmp	r3, #0
 8062480:	d1d9      	bne.n	8062436 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8062482:	687b      	ldr	r3, [r7, #4]
 8062484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8062486:	2b00      	cmp	r3, #0
 8062488:	d013      	beq.n	80624b2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 806248a:	687b      	ldr	r3, [r7, #4]
 806248c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 806248e:	4a7d      	ldr	r2, [pc, #500]	; (8062684 <HAL_UART_IRQHandler+0x3dc>)
 8062490:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8062492:	687b      	ldr	r3, [r7, #4]
 8062494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8062496:	4618      	mov	r0, r3
 8062498:	f7fe fd63 	bl	8060f62 <HAL_DMA_Abort_IT>
 806249c:	4603      	mov	r3, r0
 806249e:	2b00      	cmp	r3, #0
 80624a0:	d016      	beq.n	80624d0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80624a2:	687b      	ldr	r3, [r7, #4]
 80624a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80624a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80624a8:	687a      	ldr	r2, [r7, #4]
 80624aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80624ac:	4610      	mov	r0, r2
 80624ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80624b0:	e00e      	b.n	80624d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80624b2:	6878      	ldr	r0, [r7, #4]
 80624b4:	f000 f990 	bl	80627d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80624b8:	e00a      	b.n	80624d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80624ba:	6878      	ldr	r0, [r7, #4]
 80624bc:	f000 f98c 	bl	80627d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80624c0:	e006      	b.n	80624d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80624c2:	6878      	ldr	r0, [r7, #4]
 80624c4:	f000 f988 	bl	80627d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80624c8:	687b      	ldr	r3, [r7, #4]
 80624ca:	2200      	movs	r2, #0
 80624cc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80624ce:	e170      	b.n	80627b2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80624d0:	bf00      	nop
    return;
 80624d2:	e16e      	b.n	80627b2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80624d4:	687b      	ldr	r3, [r7, #4]
 80624d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80624d8:	2b01      	cmp	r3, #1
 80624da:	f040 814a 	bne.w	8062772 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80624de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80624e2:	f003 0310 	and.w	r3, r3, #16
 80624e6:	2b00      	cmp	r3, #0
 80624e8:	f000 8143 	beq.w	8062772 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80624ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80624f0:	f003 0310 	and.w	r3, r3, #16
 80624f4:	2b00      	cmp	r3, #0
 80624f6:	f000 813c 	beq.w	8062772 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80624fa:	2300      	movs	r3, #0
 80624fc:	60bb      	str	r3, [r7, #8]
 80624fe:	687b      	ldr	r3, [r7, #4]
 8062500:	681b      	ldr	r3, [r3, #0]
 8062502:	681b      	ldr	r3, [r3, #0]
 8062504:	60bb      	str	r3, [r7, #8]
 8062506:	687b      	ldr	r3, [r7, #4]
 8062508:	681b      	ldr	r3, [r3, #0]
 806250a:	685b      	ldr	r3, [r3, #4]
 806250c:	60bb      	str	r3, [r7, #8]
 806250e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8062510:	687b      	ldr	r3, [r7, #4]
 8062512:	681b      	ldr	r3, [r3, #0]
 8062514:	695b      	ldr	r3, [r3, #20]
 8062516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 806251a:	2b40      	cmp	r3, #64	; 0x40
 806251c:	f040 80b4 	bne.w	8062688 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8062520:	687b      	ldr	r3, [r7, #4]
 8062522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8062524:	681b      	ldr	r3, [r3, #0]
 8062526:	685b      	ldr	r3, [r3, #4]
 8062528:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 806252c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8062530:	2b00      	cmp	r3, #0
 8062532:	f000 8140 	beq.w	80627b6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8062536:	687b      	ldr	r3, [r7, #4]
 8062538:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 806253a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 806253e:	429a      	cmp	r2, r3
 8062540:	f080 8139 	bcs.w	80627b6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8062544:	687b      	ldr	r3, [r7, #4]
 8062546:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 806254a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 806254c:	687b      	ldr	r3, [r7, #4]
 806254e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8062550:	69db      	ldr	r3, [r3, #28]
 8062552:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8062556:	f000 8088 	beq.w	806266a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 806255a:	687b      	ldr	r3, [r7, #4]
 806255c:	681b      	ldr	r3, [r3, #0]
 806255e:	330c      	adds	r3, #12
 8062560:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8062564:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8062568:	e853 3f00 	ldrex	r3, [r3]
 806256c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8062570:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8062574:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8062578:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 806257c:	687b      	ldr	r3, [r7, #4]
 806257e:	681b      	ldr	r3, [r3, #0]
 8062580:	330c      	adds	r3, #12
 8062582:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8062586:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 806258a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 806258e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8062592:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8062596:	e841 2300 	strex	r3, r2, [r1]
 806259a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 806259e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80625a2:	2b00      	cmp	r3, #0
 80625a4:	d1d9      	bne.n	806255a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80625a6:	687b      	ldr	r3, [r7, #4]
 80625a8:	681b      	ldr	r3, [r3, #0]
 80625aa:	3314      	adds	r3, #20
 80625ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80625ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80625b0:	e853 3f00 	ldrex	r3, [r3]
 80625b4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80625b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80625b8:	f023 0301 	bic.w	r3, r3, #1
 80625bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80625c0:	687b      	ldr	r3, [r7, #4]
 80625c2:	681b      	ldr	r3, [r3, #0]
 80625c4:	3314      	adds	r3, #20
 80625c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80625ca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80625ce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80625d0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80625d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80625d6:	e841 2300 	strex	r3, r2, [r1]
 80625da:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80625dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80625de:	2b00      	cmp	r3, #0
 80625e0:	d1e1      	bne.n	80625a6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80625e2:	687b      	ldr	r3, [r7, #4]
 80625e4:	681b      	ldr	r3, [r3, #0]
 80625e6:	3314      	adds	r3, #20
 80625e8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80625ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80625ec:	e853 3f00 	ldrex	r3, [r3]
 80625f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80625f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80625f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80625f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80625fc:	687b      	ldr	r3, [r7, #4]
 80625fe:	681b      	ldr	r3, [r3, #0]
 8062600:	3314      	adds	r3, #20
 8062602:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8062606:	66fa      	str	r2, [r7, #108]	; 0x6c
 8062608:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 806260a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 806260c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 806260e:	e841 2300 	strex	r3, r2, [r1]
 8062612:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8062614:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8062616:	2b00      	cmp	r3, #0
 8062618:	d1e3      	bne.n	80625e2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 806261a:	687b      	ldr	r3, [r7, #4]
 806261c:	2220      	movs	r2, #32
 806261e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8062622:	687b      	ldr	r3, [r7, #4]
 8062624:	2200      	movs	r2, #0
 8062626:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8062628:	687b      	ldr	r3, [r7, #4]
 806262a:	681b      	ldr	r3, [r3, #0]
 806262c:	330c      	adds	r3, #12
 806262e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8062630:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8062632:	e853 3f00 	ldrex	r3, [r3]
 8062636:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8062638:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 806263a:	f023 0310 	bic.w	r3, r3, #16
 806263e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8062642:	687b      	ldr	r3, [r7, #4]
 8062644:	681b      	ldr	r3, [r3, #0]
 8062646:	330c      	adds	r3, #12
 8062648:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 806264c:	65ba      	str	r2, [r7, #88]	; 0x58
 806264e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8062650:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8062652:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8062654:	e841 2300 	strex	r3, r2, [r1]
 8062658:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 806265a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 806265c:	2b00      	cmp	r3, #0
 806265e:	d1e3      	bne.n	8062628 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8062660:	687b      	ldr	r3, [r7, #4]
 8062662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8062664:	4618      	mov	r0, r3
 8062666:	f7fe fc0c 	bl	8060e82 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 806266a:	687b      	ldr	r3, [r7, #4]
 806266c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 806266e:	687b      	ldr	r3, [r7, #4]
 8062670:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8062672:	b29b      	uxth	r3, r3
 8062674:	1ad3      	subs	r3, r2, r3
 8062676:	b29b      	uxth	r3, r3
 8062678:	4619      	mov	r1, r3
 806267a:	6878      	ldr	r0, [r7, #4]
 806267c:	f000 f8b6 	bl	80627ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8062680:	e099      	b.n	80627b6 <HAL_UART_IRQHandler+0x50e>
 8062682:	bf00      	nop
 8062684:	0806293f 	.word	0x0806293f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8062688:	687b      	ldr	r3, [r7, #4]
 806268a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 806268c:	687b      	ldr	r3, [r7, #4]
 806268e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8062690:	b29b      	uxth	r3, r3
 8062692:	1ad3      	subs	r3, r2, r3
 8062694:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8062698:	687b      	ldr	r3, [r7, #4]
 806269a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 806269c:	b29b      	uxth	r3, r3
 806269e:	2b00      	cmp	r3, #0
 80626a0:	f000 808b 	beq.w	80627ba <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80626a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80626a8:	2b00      	cmp	r3, #0
 80626aa:	f000 8086 	beq.w	80627ba <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80626ae:	687b      	ldr	r3, [r7, #4]
 80626b0:	681b      	ldr	r3, [r3, #0]
 80626b2:	330c      	adds	r3, #12
 80626b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80626b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80626b8:	e853 3f00 	ldrex	r3, [r3]
 80626bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80626be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80626c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80626c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80626c8:	687b      	ldr	r3, [r7, #4]
 80626ca:	681b      	ldr	r3, [r3, #0]
 80626cc:	330c      	adds	r3, #12
 80626ce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80626d2:	647a      	str	r2, [r7, #68]	; 0x44
 80626d4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80626d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80626d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80626da:	e841 2300 	strex	r3, r2, [r1]
 80626de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80626e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80626e2:	2b00      	cmp	r3, #0
 80626e4:	d1e3      	bne.n	80626ae <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80626e6:	687b      	ldr	r3, [r7, #4]
 80626e8:	681b      	ldr	r3, [r3, #0]
 80626ea:	3314      	adds	r3, #20
 80626ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80626ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80626f0:	e853 3f00 	ldrex	r3, [r3]
 80626f4:	623b      	str	r3, [r7, #32]
   return(result);
 80626f6:	6a3b      	ldr	r3, [r7, #32]
 80626f8:	f023 0301 	bic.w	r3, r3, #1
 80626fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8062700:	687b      	ldr	r3, [r7, #4]
 8062702:	681b      	ldr	r3, [r3, #0]
 8062704:	3314      	adds	r3, #20
 8062706:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 806270a:	633a      	str	r2, [r7, #48]	; 0x30
 806270c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 806270e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8062710:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8062712:	e841 2300 	strex	r3, r2, [r1]
 8062716:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8062718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806271a:	2b00      	cmp	r3, #0
 806271c:	d1e3      	bne.n	80626e6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 806271e:	687b      	ldr	r3, [r7, #4]
 8062720:	2220      	movs	r2, #32
 8062722:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8062726:	687b      	ldr	r3, [r7, #4]
 8062728:	2200      	movs	r2, #0
 806272a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 806272c:	687b      	ldr	r3, [r7, #4]
 806272e:	681b      	ldr	r3, [r3, #0]
 8062730:	330c      	adds	r3, #12
 8062732:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8062734:	693b      	ldr	r3, [r7, #16]
 8062736:	e853 3f00 	ldrex	r3, [r3]
 806273a:	60fb      	str	r3, [r7, #12]
   return(result);
 806273c:	68fb      	ldr	r3, [r7, #12]
 806273e:	f023 0310 	bic.w	r3, r3, #16
 8062742:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8062746:	687b      	ldr	r3, [r7, #4]
 8062748:	681b      	ldr	r3, [r3, #0]
 806274a:	330c      	adds	r3, #12
 806274c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8062750:	61fa      	str	r2, [r7, #28]
 8062752:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8062754:	69b9      	ldr	r1, [r7, #24]
 8062756:	69fa      	ldr	r2, [r7, #28]
 8062758:	e841 2300 	strex	r3, r2, [r1]
 806275c:	617b      	str	r3, [r7, #20]
   return(result);
 806275e:	697b      	ldr	r3, [r7, #20]
 8062760:	2b00      	cmp	r3, #0
 8062762:	d1e3      	bne.n	806272c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8062764:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8062768:	4619      	mov	r1, r3
 806276a:	6878      	ldr	r0, [r7, #4]
 806276c:	f000 f83e 	bl	80627ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8062770:	e023      	b.n	80627ba <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8062772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8062776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 806277a:	2b00      	cmp	r3, #0
 806277c:	d009      	beq.n	8062792 <HAL_UART_IRQHandler+0x4ea>
 806277e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8062782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8062786:	2b00      	cmp	r3, #0
 8062788:	d003      	beq.n	8062792 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 806278a:	6878      	ldr	r0, [r7, #4]
 806278c:	f000 f8eb 	bl	8062966 <UART_Transmit_IT>
    return;
 8062790:	e014      	b.n	80627bc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8062792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8062796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 806279a:	2b00      	cmp	r3, #0
 806279c:	d00e      	beq.n	80627bc <HAL_UART_IRQHandler+0x514>
 806279e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80627a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80627a6:	2b00      	cmp	r3, #0
 80627a8:	d008      	beq.n	80627bc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80627aa:	6878      	ldr	r0, [r7, #4]
 80627ac:	f000 f92b 	bl	8062a06 <UART_EndTransmit_IT>
    return;
 80627b0:	e004      	b.n	80627bc <HAL_UART_IRQHandler+0x514>
    return;
 80627b2:	bf00      	nop
 80627b4:	e002      	b.n	80627bc <HAL_UART_IRQHandler+0x514>
      return;
 80627b6:	bf00      	nop
 80627b8:	e000      	b.n	80627bc <HAL_UART_IRQHandler+0x514>
      return;
 80627ba:	bf00      	nop
  }
}
 80627bc:	37e8      	adds	r7, #232	; 0xe8
 80627be:	46bd      	mov	sp, r7
 80627c0:	bd80      	pop	{r7, pc}
 80627c2:	bf00      	nop

080627c4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80627c4:	b480      	push	{r7}
 80627c6:	b083      	sub	sp, #12
 80627c8:	af00      	add	r7, sp, #0
 80627ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80627cc:	bf00      	nop
 80627ce:	370c      	adds	r7, #12
 80627d0:	46bd      	mov	sp, r7
 80627d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80627d6:	4770      	bx	lr

080627d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80627d8:	b480      	push	{r7}
 80627da:	b083      	sub	sp, #12
 80627dc:	af00      	add	r7, sp, #0
 80627de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80627e0:	bf00      	nop
 80627e2:	370c      	adds	r7, #12
 80627e4:	46bd      	mov	sp, r7
 80627e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80627ea:	4770      	bx	lr

080627ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80627ec:	b480      	push	{r7}
 80627ee:	b083      	sub	sp, #12
 80627f0:	af00      	add	r7, sp, #0
 80627f2:	6078      	str	r0, [r7, #4]
 80627f4:	460b      	mov	r3, r1
 80627f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80627f8:	bf00      	nop
 80627fa:	370c      	adds	r7, #12
 80627fc:	46bd      	mov	sp, r7
 80627fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8062802:	4770      	bx	lr

08062804 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8062804:	b480      	push	{r7}
 8062806:	b085      	sub	sp, #20
 8062808:	af00      	add	r7, sp, #0
 806280a:	60f8      	str	r0, [r7, #12]
 806280c:	60b9      	str	r1, [r7, #8]
 806280e:	4613      	mov	r3, r2
 8062810:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8062812:	68fb      	ldr	r3, [r7, #12]
 8062814:	68ba      	ldr	r2, [r7, #8]
 8062816:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8062818:	68fb      	ldr	r3, [r7, #12]
 806281a:	88fa      	ldrh	r2, [r7, #6]
 806281c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 806281e:	68fb      	ldr	r3, [r7, #12]
 8062820:	88fa      	ldrh	r2, [r7, #6]
 8062822:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8062824:	68fb      	ldr	r3, [r7, #12]
 8062826:	2200      	movs	r2, #0
 8062828:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 806282a:	68fb      	ldr	r3, [r7, #12]
 806282c:	2222      	movs	r2, #34	; 0x22
 806282e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8062832:	68fb      	ldr	r3, [r7, #12]
 8062834:	2200      	movs	r2, #0
 8062836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 806283a:	68fb      	ldr	r3, [r7, #12]
 806283c:	681b      	ldr	r3, [r3, #0]
 806283e:	68da      	ldr	r2, [r3, #12]
 8062840:	68fb      	ldr	r3, [r7, #12]
 8062842:	681b      	ldr	r3, [r3, #0]
 8062844:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8062848:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 806284a:	68fb      	ldr	r3, [r7, #12]
 806284c:	681b      	ldr	r3, [r3, #0]
 806284e:	695a      	ldr	r2, [r3, #20]
 8062850:	68fb      	ldr	r3, [r7, #12]
 8062852:	681b      	ldr	r3, [r3, #0]
 8062854:	f042 0201 	orr.w	r2, r2, #1
 8062858:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 806285a:	68fb      	ldr	r3, [r7, #12]
 806285c:	681b      	ldr	r3, [r3, #0]
 806285e:	68da      	ldr	r2, [r3, #12]
 8062860:	68fb      	ldr	r3, [r7, #12]
 8062862:	681b      	ldr	r3, [r3, #0]
 8062864:	f042 0220 	orr.w	r2, r2, #32
 8062868:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 806286a:	2300      	movs	r3, #0
}
 806286c:	4618      	mov	r0, r3
 806286e:	3714      	adds	r7, #20
 8062870:	46bd      	mov	sp, r7
 8062872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8062876:	4770      	bx	lr

08062878 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8062878:	b480      	push	{r7}
 806287a:	b095      	sub	sp, #84	; 0x54
 806287c:	af00      	add	r7, sp, #0
 806287e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8062880:	687b      	ldr	r3, [r7, #4]
 8062882:	681b      	ldr	r3, [r3, #0]
 8062884:	330c      	adds	r3, #12
 8062886:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8062888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 806288a:	e853 3f00 	ldrex	r3, [r3]
 806288e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8062890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8062892:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8062896:	64fb      	str	r3, [r7, #76]	; 0x4c
 8062898:	687b      	ldr	r3, [r7, #4]
 806289a:	681b      	ldr	r3, [r3, #0]
 806289c:	330c      	adds	r3, #12
 806289e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80628a0:	643a      	str	r2, [r7, #64]	; 0x40
 80628a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80628a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80628a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80628a8:	e841 2300 	strex	r3, r2, [r1]
 80628ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80628ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80628b0:	2b00      	cmp	r3, #0
 80628b2:	d1e5      	bne.n	8062880 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80628b4:	687b      	ldr	r3, [r7, #4]
 80628b6:	681b      	ldr	r3, [r3, #0]
 80628b8:	3314      	adds	r3, #20
 80628ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80628bc:	6a3b      	ldr	r3, [r7, #32]
 80628be:	e853 3f00 	ldrex	r3, [r3]
 80628c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80628c4:	69fb      	ldr	r3, [r7, #28]
 80628c6:	f023 0301 	bic.w	r3, r3, #1
 80628ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80628cc:	687b      	ldr	r3, [r7, #4]
 80628ce:	681b      	ldr	r3, [r3, #0]
 80628d0:	3314      	adds	r3, #20
 80628d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80628d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80628d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80628d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80628da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80628dc:	e841 2300 	strex	r3, r2, [r1]
 80628e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80628e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80628e4:	2b00      	cmp	r3, #0
 80628e6:	d1e5      	bne.n	80628b4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80628e8:	687b      	ldr	r3, [r7, #4]
 80628ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80628ec:	2b01      	cmp	r3, #1
 80628ee:	d119      	bne.n	8062924 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80628f0:	687b      	ldr	r3, [r7, #4]
 80628f2:	681b      	ldr	r3, [r3, #0]
 80628f4:	330c      	adds	r3, #12
 80628f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80628f8:	68fb      	ldr	r3, [r7, #12]
 80628fa:	e853 3f00 	ldrex	r3, [r3]
 80628fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8062900:	68bb      	ldr	r3, [r7, #8]
 8062902:	f023 0310 	bic.w	r3, r3, #16
 8062906:	647b      	str	r3, [r7, #68]	; 0x44
 8062908:	687b      	ldr	r3, [r7, #4]
 806290a:	681b      	ldr	r3, [r3, #0]
 806290c:	330c      	adds	r3, #12
 806290e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8062910:	61ba      	str	r2, [r7, #24]
 8062912:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8062914:	6979      	ldr	r1, [r7, #20]
 8062916:	69ba      	ldr	r2, [r7, #24]
 8062918:	e841 2300 	strex	r3, r2, [r1]
 806291c:	613b      	str	r3, [r7, #16]
   return(result);
 806291e:	693b      	ldr	r3, [r7, #16]
 8062920:	2b00      	cmp	r3, #0
 8062922:	d1e5      	bne.n	80628f0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8062924:	687b      	ldr	r3, [r7, #4]
 8062926:	2220      	movs	r2, #32
 8062928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 806292c:	687b      	ldr	r3, [r7, #4]
 806292e:	2200      	movs	r2, #0
 8062930:	631a      	str	r2, [r3, #48]	; 0x30
}
 8062932:	bf00      	nop
 8062934:	3754      	adds	r7, #84	; 0x54
 8062936:	46bd      	mov	sp, r7
 8062938:	f85d 7b04 	ldr.w	r7, [sp], #4
 806293c:	4770      	bx	lr

0806293e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 806293e:	b580      	push	{r7, lr}
 8062940:	b084      	sub	sp, #16
 8062942:	af00      	add	r7, sp, #0
 8062944:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8062946:	687b      	ldr	r3, [r7, #4]
 8062948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 806294a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 806294c:	68fb      	ldr	r3, [r7, #12]
 806294e:	2200      	movs	r2, #0
 8062950:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8062952:	68fb      	ldr	r3, [r7, #12]
 8062954:	2200      	movs	r2, #0
 8062956:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8062958:	68f8      	ldr	r0, [r7, #12]
 806295a:	f7ff ff3d 	bl	80627d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 806295e:	bf00      	nop
 8062960:	3710      	adds	r7, #16
 8062962:	46bd      	mov	sp, r7
 8062964:	bd80      	pop	{r7, pc}

08062966 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8062966:	b480      	push	{r7}
 8062968:	b085      	sub	sp, #20
 806296a:	af00      	add	r7, sp, #0
 806296c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 806296e:	687b      	ldr	r3, [r7, #4]
 8062970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8062974:	b2db      	uxtb	r3, r3
 8062976:	2b21      	cmp	r3, #33	; 0x21
 8062978:	d13e      	bne.n	80629f8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 806297a:	687b      	ldr	r3, [r7, #4]
 806297c:	689b      	ldr	r3, [r3, #8]
 806297e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8062982:	d114      	bne.n	80629ae <UART_Transmit_IT+0x48>
 8062984:	687b      	ldr	r3, [r7, #4]
 8062986:	691b      	ldr	r3, [r3, #16]
 8062988:	2b00      	cmp	r3, #0
 806298a:	d110      	bne.n	80629ae <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 806298c:	687b      	ldr	r3, [r7, #4]
 806298e:	6a1b      	ldr	r3, [r3, #32]
 8062990:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8062992:	68fb      	ldr	r3, [r7, #12]
 8062994:	881b      	ldrh	r3, [r3, #0]
 8062996:	461a      	mov	r2, r3
 8062998:	687b      	ldr	r3, [r7, #4]
 806299a:	681b      	ldr	r3, [r3, #0]
 806299c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80629a0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80629a2:	687b      	ldr	r3, [r7, #4]
 80629a4:	6a1b      	ldr	r3, [r3, #32]
 80629a6:	1c9a      	adds	r2, r3, #2
 80629a8:	687b      	ldr	r3, [r7, #4]
 80629aa:	621a      	str	r2, [r3, #32]
 80629ac:	e008      	b.n	80629c0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80629ae:	687b      	ldr	r3, [r7, #4]
 80629b0:	6a1b      	ldr	r3, [r3, #32]
 80629b2:	1c59      	adds	r1, r3, #1
 80629b4:	687a      	ldr	r2, [r7, #4]
 80629b6:	6211      	str	r1, [r2, #32]
 80629b8:	781a      	ldrb	r2, [r3, #0]
 80629ba:	687b      	ldr	r3, [r7, #4]
 80629bc:	681b      	ldr	r3, [r3, #0]
 80629be:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80629c0:	687b      	ldr	r3, [r7, #4]
 80629c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80629c4:	b29b      	uxth	r3, r3
 80629c6:	3b01      	subs	r3, #1
 80629c8:	b29b      	uxth	r3, r3
 80629ca:	687a      	ldr	r2, [r7, #4]
 80629cc:	4619      	mov	r1, r3
 80629ce:	84d1      	strh	r1, [r2, #38]	; 0x26
 80629d0:	2b00      	cmp	r3, #0
 80629d2:	d10f      	bne.n	80629f4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80629d4:	687b      	ldr	r3, [r7, #4]
 80629d6:	681b      	ldr	r3, [r3, #0]
 80629d8:	68da      	ldr	r2, [r3, #12]
 80629da:	687b      	ldr	r3, [r7, #4]
 80629dc:	681b      	ldr	r3, [r3, #0]
 80629de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80629e2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80629e4:	687b      	ldr	r3, [r7, #4]
 80629e6:	681b      	ldr	r3, [r3, #0]
 80629e8:	68da      	ldr	r2, [r3, #12]
 80629ea:	687b      	ldr	r3, [r7, #4]
 80629ec:	681b      	ldr	r3, [r3, #0]
 80629ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80629f2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80629f4:	2300      	movs	r3, #0
 80629f6:	e000      	b.n	80629fa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80629f8:	2302      	movs	r3, #2
  }
}
 80629fa:	4618      	mov	r0, r3
 80629fc:	3714      	adds	r7, #20
 80629fe:	46bd      	mov	sp, r7
 8062a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8062a04:	4770      	bx	lr

08062a06 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8062a06:	b580      	push	{r7, lr}
 8062a08:	b082      	sub	sp, #8
 8062a0a:	af00      	add	r7, sp, #0
 8062a0c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8062a0e:	687b      	ldr	r3, [r7, #4]
 8062a10:	681b      	ldr	r3, [r3, #0]
 8062a12:	68da      	ldr	r2, [r3, #12]
 8062a14:	687b      	ldr	r3, [r7, #4]
 8062a16:	681b      	ldr	r3, [r3, #0]
 8062a18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8062a1c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8062a1e:	687b      	ldr	r3, [r7, #4]
 8062a20:	2220      	movs	r2, #32
 8062a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8062a26:	6878      	ldr	r0, [r7, #4]
 8062a28:	f7ff fecc 	bl	80627c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8062a2c:	2300      	movs	r3, #0
}
 8062a2e:	4618      	mov	r0, r3
 8062a30:	3708      	adds	r7, #8
 8062a32:	46bd      	mov	sp, r7
 8062a34:	bd80      	pop	{r7, pc}

08062a36 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8062a36:	b580      	push	{r7, lr}
 8062a38:	b08c      	sub	sp, #48	; 0x30
 8062a3a:	af00      	add	r7, sp, #0
 8062a3c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8062a3e:	687b      	ldr	r3, [r7, #4]
 8062a40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8062a44:	b2db      	uxtb	r3, r3
 8062a46:	2b22      	cmp	r3, #34	; 0x22
 8062a48:	f040 80ab 	bne.w	8062ba2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8062a4c:	687b      	ldr	r3, [r7, #4]
 8062a4e:	689b      	ldr	r3, [r3, #8]
 8062a50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8062a54:	d117      	bne.n	8062a86 <UART_Receive_IT+0x50>
 8062a56:	687b      	ldr	r3, [r7, #4]
 8062a58:	691b      	ldr	r3, [r3, #16]
 8062a5a:	2b00      	cmp	r3, #0
 8062a5c:	d113      	bne.n	8062a86 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8062a5e:	2300      	movs	r3, #0
 8062a60:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8062a62:	687b      	ldr	r3, [r7, #4]
 8062a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8062a66:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8062a68:	687b      	ldr	r3, [r7, #4]
 8062a6a:	681b      	ldr	r3, [r3, #0]
 8062a6c:	685b      	ldr	r3, [r3, #4]
 8062a6e:	b29b      	uxth	r3, r3
 8062a70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8062a74:	b29a      	uxth	r2, r3
 8062a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8062a78:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8062a7a:	687b      	ldr	r3, [r7, #4]
 8062a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8062a7e:	1c9a      	adds	r2, r3, #2
 8062a80:	687b      	ldr	r3, [r7, #4]
 8062a82:	629a      	str	r2, [r3, #40]	; 0x28
 8062a84:	e026      	b.n	8062ad4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8062a86:	687b      	ldr	r3, [r7, #4]
 8062a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8062a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8062a8c:	2300      	movs	r3, #0
 8062a8e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8062a90:	687b      	ldr	r3, [r7, #4]
 8062a92:	689b      	ldr	r3, [r3, #8]
 8062a94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8062a98:	d007      	beq.n	8062aaa <UART_Receive_IT+0x74>
 8062a9a:	687b      	ldr	r3, [r7, #4]
 8062a9c:	689b      	ldr	r3, [r3, #8]
 8062a9e:	2b00      	cmp	r3, #0
 8062aa0:	d10a      	bne.n	8062ab8 <UART_Receive_IT+0x82>
 8062aa2:	687b      	ldr	r3, [r7, #4]
 8062aa4:	691b      	ldr	r3, [r3, #16]
 8062aa6:	2b00      	cmp	r3, #0
 8062aa8:	d106      	bne.n	8062ab8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8062aaa:	687b      	ldr	r3, [r7, #4]
 8062aac:	681b      	ldr	r3, [r3, #0]
 8062aae:	685b      	ldr	r3, [r3, #4]
 8062ab0:	b2da      	uxtb	r2, r3
 8062ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8062ab4:	701a      	strb	r2, [r3, #0]
 8062ab6:	e008      	b.n	8062aca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8062ab8:	687b      	ldr	r3, [r7, #4]
 8062aba:	681b      	ldr	r3, [r3, #0]
 8062abc:	685b      	ldr	r3, [r3, #4]
 8062abe:	b2db      	uxtb	r3, r3
 8062ac0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8062ac4:	b2da      	uxtb	r2, r3
 8062ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8062ac8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8062aca:	687b      	ldr	r3, [r7, #4]
 8062acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8062ace:	1c5a      	adds	r2, r3, #1
 8062ad0:	687b      	ldr	r3, [r7, #4]
 8062ad2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8062ad4:	687b      	ldr	r3, [r7, #4]
 8062ad6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8062ad8:	b29b      	uxth	r3, r3
 8062ada:	3b01      	subs	r3, #1
 8062adc:	b29b      	uxth	r3, r3
 8062ade:	687a      	ldr	r2, [r7, #4]
 8062ae0:	4619      	mov	r1, r3
 8062ae2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8062ae4:	2b00      	cmp	r3, #0
 8062ae6:	d15a      	bne.n	8062b9e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8062ae8:	687b      	ldr	r3, [r7, #4]
 8062aea:	681b      	ldr	r3, [r3, #0]
 8062aec:	68da      	ldr	r2, [r3, #12]
 8062aee:	687b      	ldr	r3, [r7, #4]
 8062af0:	681b      	ldr	r3, [r3, #0]
 8062af2:	f022 0220 	bic.w	r2, r2, #32
 8062af6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8062af8:	687b      	ldr	r3, [r7, #4]
 8062afa:	681b      	ldr	r3, [r3, #0]
 8062afc:	68da      	ldr	r2, [r3, #12]
 8062afe:	687b      	ldr	r3, [r7, #4]
 8062b00:	681b      	ldr	r3, [r3, #0]
 8062b02:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8062b06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8062b08:	687b      	ldr	r3, [r7, #4]
 8062b0a:	681b      	ldr	r3, [r3, #0]
 8062b0c:	695a      	ldr	r2, [r3, #20]
 8062b0e:	687b      	ldr	r3, [r7, #4]
 8062b10:	681b      	ldr	r3, [r3, #0]
 8062b12:	f022 0201 	bic.w	r2, r2, #1
 8062b16:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8062b18:	687b      	ldr	r3, [r7, #4]
 8062b1a:	2220      	movs	r2, #32
 8062b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8062b20:	687b      	ldr	r3, [r7, #4]
 8062b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8062b24:	2b01      	cmp	r3, #1
 8062b26:	d135      	bne.n	8062b94 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8062b28:	687b      	ldr	r3, [r7, #4]
 8062b2a:	2200      	movs	r2, #0
 8062b2c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8062b2e:	687b      	ldr	r3, [r7, #4]
 8062b30:	681b      	ldr	r3, [r3, #0]
 8062b32:	330c      	adds	r3, #12
 8062b34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8062b36:	697b      	ldr	r3, [r7, #20]
 8062b38:	e853 3f00 	ldrex	r3, [r3]
 8062b3c:	613b      	str	r3, [r7, #16]
   return(result);
 8062b3e:	693b      	ldr	r3, [r7, #16]
 8062b40:	f023 0310 	bic.w	r3, r3, #16
 8062b44:	627b      	str	r3, [r7, #36]	; 0x24
 8062b46:	687b      	ldr	r3, [r7, #4]
 8062b48:	681b      	ldr	r3, [r3, #0]
 8062b4a:	330c      	adds	r3, #12
 8062b4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8062b4e:	623a      	str	r2, [r7, #32]
 8062b50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8062b52:	69f9      	ldr	r1, [r7, #28]
 8062b54:	6a3a      	ldr	r2, [r7, #32]
 8062b56:	e841 2300 	strex	r3, r2, [r1]
 8062b5a:	61bb      	str	r3, [r7, #24]
   return(result);
 8062b5c:	69bb      	ldr	r3, [r7, #24]
 8062b5e:	2b00      	cmp	r3, #0
 8062b60:	d1e5      	bne.n	8062b2e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8062b62:	687b      	ldr	r3, [r7, #4]
 8062b64:	681b      	ldr	r3, [r3, #0]
 8062b66:	681b      	ldr	r3, [r3, #0]
 8062b68:	f003 0310 	and.w	r3, r3, #16
 8062b6c:	2b10      	cmp	r3, #16
 8062b6e:	d10a      	bne.n	8062b86 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8062b70:	2300      	movs	r3, #0
 8062b72:	60fb      	str	r3, [r7, #12]
 8062b74:	687b      	ldr	r3, [r7, #4]
 8062b76:	681b      	ldr	r3, [r3, #0]
 8062b78:	681b      	ldr	r3, [r3, #0]
 8062b7a:	60fb      	str	r3, [r7, #12]
 8062b7c:	687b      	ldr	r3, [r7, #4]
 8062b7e:	681b      	ldr	r3, [r3, #0]
 8062b80:	685b      	ldr	r3, [r3, #4]
 8062b82:	60fb      	str	r3, [r7, #12]
 8062b84:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8062b86:	687b      	ldr	r3, [r7, #4]
 8062b88:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8062b8a:	4619      	mov	r1, r3
 8062b8c:	6878      	ldr	r0, [r7, #4]
 8062b8e:	f7ff fe2d 	bl	80627ec <HAL_UARTEx_RxEventCallback>
 8062b92:	e002      	b.n	8062b9a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8062b94:	6878      	ldr	r0, [r7, #4]
 8062b96:	f7fd fd03 	bl	80605a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8062b9a:	2300      	movs	r3, #0
 8062b9c:	e002      	b.n	8062ba4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8062b9e:	2300      	movs	r3, #0
 8062ba0:	e000      	b.n	8062ba4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8062ba2:	2302      	movs	r3, #2
  }
}
 8062ba4:	4618      	mov	r0, r3
 8062ba6:	3730      	adds	r7, #48	; 0x30
 8062ba8:	46bd      	mov	sp, r7
 8062baa:	bd80      	pop	{r7, pc}

08062bac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8062bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8062bb0:	b09f      	sub	sp, #124	; 0x7c
 8062bb2:	af00      	add	r7, sp, #0
 8062bb4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8062bb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8062bb8:	681b      	ldr	r3, [r3, #0]
 8062bba:	691b      	ldr	r3, [r3, #16]
 8062bbc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8062bc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8062bc2:	68d9      	ldr	r1, [r3, #12]
 8062bc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8062bc6:	681a      	ldr	r2, [r3, #0]
 8062bc8:	ea40 0301 	orr.w	r3, r0, r1
 8062bcc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8062bce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8062bd0:	689a      	ldr	r2, [r3, #8]
 8062bd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8062bd4:	691b      	ldr	r3, [r3, #16]
 8062bd6:	431a      	orrs	r2, r3
 8062bd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8062bda:	695b      	ldr	r3, [r3, #20]
 8062bdc:	431a      	orrs	r2, r3
 8062bde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8062be0:	69db      	ldr	r3, [r3, #28]
 8062be2:	4313      	orrs	r3, r2
 8062be4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8062be6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8062be8:	681b      	ldr	r3, [r3, #0]
 8062bea:	68db      	ldr	r3, [r3, #12]
 8062bec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8062bf0:	f021 010c 	bic.w	r1, r1, #12
 8062bf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8062bf6:	681a      	ldr	r2, [r3, #0]
 8062bf8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8062bfa:	430b      	orrs	r3, r1
 8062bfc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8062bfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8062c00:	681b      	ldr	r3, [r3, #0]
 8062c02:	695b      	ldr	r3, [r3, #20]
 8062c04:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8062c08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8062c0a:	6999      	ldr	r1, [r3, #24]
 8062c0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8062c0e:	681a      	ldr	r2, [r3, #0]
 8062c10:	ea40 0301 	orr.w	r3, r0, r1
 8062c14:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8062c16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8062c18:	681a      	ldr	r2, [r3, #0]
 8062c1a:	4bc5      	ldr	r3, [pc, #788]	; (8062f30 <UART_SetConfig+0x384>)
 8062c1c:	429a      	cmp	r2, r3
 8062c1e:	d004      	beq.n	8062c2a <UART_SetConfig+0x7e>
 8062c20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8062c22:	681a      	ldr	r2, [r3, #0]
 8062c24:	4bc3      	ldr	r3, [pc, #780]	; (8062f34 <UART_SetConfig+0x388>)
 8062c26:	429a      	cmp	r2, r3
 8062c28:	d103      	bne.n	8062c32 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8062c2a:	f7ff faab 	bl	8062184 <HAL_RCC_GetPCLK2Freq>
 8062c2e:	6778      	str	r0, [r7, #116]	; 0x74
 8062c30:	e002      	b.n	8062c38 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8062c32:	f7ff fa93 	bl	806215c <HAL_RCC_GetPCLK1Freq>
 8062c36:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8062c38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8062c3a:	69db      	ldr	r3, [r3, #28]
 8062c3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8062c40:	f040 80b6 	bne.w	8062db0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8062c44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8062c46:	461c      	mov	r4, r3
 8062c48:	f04f 0500 	mov.w	r5, #0
 8062c4c:	4622      	mov	r2, r4
 8062c4e:	462b      	mov	r3, r5
 8062c50:	1891      	adds	r1, r2, r2
 8062c52:	6439      	str	r1, [r7, #64]	; 0x40
 8062c54:	415b      	adcs	r3, r3
 8062c56:	647b      	str	r3, [r7, #68]	; 0x44
 8062c58:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8062c5c:	1912      	adds	r2, r2, r4
 8062c5e:	eb45 0303 	adc.w	r3, r5, r3
 8062c62:	f04f 0000 	mov.w	r0, #0
 8062c66:	f04f 0100 	mov.w	r1, #0
 8062c6a:	00d9      	lsls	r1, r3, #3
 8062c6c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8062c70:	00d0      	lsls	r0, r2, #3
 8062c72:	4602      	mov	r2, r0
 8062c74:	460b      	mov	r3, r1
 8062c76:	1911      	adds	r1, r2, r4
 8062c78:	6639      	str	r1, [r7, #96]	; 0x60
 8062c7a:	416b      	adcs	r3, r5
 8062c7c:	667b      	str	r3, [r7, #100]	; 0x64
 8062c7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8062c80:	685b      	ldr	r3, [r3, #4]
 8062c82:	461a      	mov	r2, r3
 8062c84:	f04f 0300 	mov.w	r3, #0
 8062c88:	1891      	adds	r1, r2, r2
 8062c8a:	63b9      	str	r1, [r7, #56]	; 0x38
 8062c8c:	415b      	adcs	r3, r3
 8062c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8062c90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8062c94:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8062c98:	f7fd fa96 	bl	80601c8 <__aeabi_uldivmod>
 8062c9c:	4602      	mov	r2, r0
 8062c9e:	460b      	mov	r3, r1
 8062ca0:	4ba5      	ldr	r3, [pc, #660]	; (8062f38 <UART_SetConfig+0x38c>)
 8062ca2:	fba3 2302 	umull	r2, r3, r3, r2
 8062ca6:	095b      	lsrs	r3, r3, #5
 8062ca8:	011e      	lsls	r6, r3, #4
 8062caa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8062cac:	461c      	mov	r4, r3
 8062cae:	f04f 0500 	mov.w	r5, #0
 8062cb2:	4622      	mov	r2, r4
 8062cb4:	462b      	mov	r3, r5
 8062cb6:	1891      	adds	r1, r2, r2
 8062cb8:	6339      	str	r1, [r7, #48]	; 0x30
 8062cba:	415b      	adcs	r3, r3
 8062cbc:	637b      	str	r3, [r7, #52]	; 0x34
 8062cbe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8062cc2:	1912      	adds	r2, r2, r4
 8062cc4:	eb45 0303 	adc.w	r3, r5, r3
 8062cc8:	f04f 0000 	mov.w	r0, #0
 8062ccc:	f04f 0100 	mov.w	r1, #0
 8062cd0:	00d9      	lsls	r1, r3, #3
 8062cd2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8062cd6:	00d0      	lsls	r0, r2, #3
 8062cd8:	4602      	mov	r2, r0
 8062cda:	460b      	mov	r3, r1
 8062cdc:	1911      	adds	r1, r2, r4
 8062cde:	65b9      	str	r1, [r7, #88]	; 0x58
 8062ce0:	416b      	adcs	r3, r5
 8062ce2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8062ce4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8062ce6:	685b      	ldr	r3, [r3, #4]
 8062ce8:	461a      	mov	r2, r3
 8062cea:	f04f 0300 	mov.w	r3, #0
 8062cee:	1891      	adds	r1, r2, r2
 8062cf0:	62b9      	str	r1, [r7, #40]	; 0x28
 8062cf2:	415b      	adcs	r3, r3
 8062cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8062cf6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8062cfa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8062cfe:	f7fd fa63 	bl	80601c8 <__aeabi_uldivmod>
 8062d02:	4602      	mov	r2, r0
 8062d04:	460b      	mov	r3, r1
 8062d06:	4b8c      	ldr	r3, [pc, #560]	; (8062f38 <UART_SetConfig+0x38c>)
 8062d08:	fba3 1302 	umull	r1, r3, r3, r2
 8062d0c:	095b      	lsrs	r3, r3, #5
 8062d0e:	2164      	movs	r1, #100	; 0x64
 8062d10:	fb01 f303 	mul.w	r3, r1, r3
 8062d14:	1ad3      	subs	r3, r2, r3
 8062d16:	00db      	lsls	r3, r3, #3
 8062d18:	3332      	adds	r3, #50	; 0x32
 8062d1a:	4a87      	ldr	r2, [pc, #540]	; (8062f38 <UART_SetConfig+0x38c>)
 8062d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8062d20:	095b      	lsrs	r3, r3, #5
 8062d22:	005b      	lsls	r3, r3, #1
 8062d24:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8062d28:	441e      	add	r6, r3
 8062d2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8062d2c:	4618      	mov	r0, r3
 8062d2e:	f04f 0100 	mov.w	r1, #0
 8062d32:	4602      	mov	r2, r0
 8062d34:	460b      	mov	r3, r1
 8062d36:	1894      	adds	r4, r2, r2
 8062d38:	623c      	str	r4, [r7, #32]
 8062d3a:	415b      	adcs	r3, r3
 8062d3c:	627b      	str	r3, [r7, #36]	; 0x24
 8062d3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8062d42:	1812      	adds	r2, r2, r0
 8062d44:	eb41 0303 	adc.w	r3, r1, r3
 8062d48:	f04f 0400 	mov.w	r4, #0
 8062d4c:	f04f 0500 	mov.w	r5, #0
 8062d50:	00dd      	lsls	r5, r3, #3
 8062d52:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8062d56:	00d4      	lsls	r4, r2, #3
 8062d58:	4622      	mov	r2, r4
 8062d5a:	462b      	mov	r3, r5
 8062d5c:	1814      	adds	r4, r2, r0
 8062d5e:	653c      	str	r4, [r7, #80]	; 0x50
 8062d60:	414b      	adcs	r3, r1
 8062d62:	657b      	str	r3, [r7, #84]	; 0x54
 8062d64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8062d66:	685b      	ldr	r3, [r3, #4]
 8062d68:	461a      	mov	r2, r3
 8062d6a:	f04f 0300 	mov.w	r3, #0
 8062d6e:	1891      	adds	r1, r2, r2
 8062d70:	61b9      	str	r1, [r7, #24]
 8062d72:	415b      	adcs	r3, r3
 8062d74:	61fb      	str	r3, [r7, #28]
 8062d76:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8062d7a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8062d7e:	f7fd fa23 	bl	80601c8 <__aeabi_uldivmod>
 8062d82:	4602      	mov	r2, r0
 8062d84:	460b      	mov	r3, r1
 8062d86:	4b6c      	ldr	r3, [pc, #432]	; (8062f38 <UART_SetConfig+0x38c>)
 8062d88:	fba3 1302 	umull	r1, r3, r3, r2
 8062d8c:	095b      	lsrs	r3, r3, #5
 8062d8e:	2164      	movs	r1, #100	; 0x64
 8062d90:	fb01 f303 	mul.w	r3, r1, r3
 8062d94:	1ad3      	subs	r3, r2, r3
 8062d96:	00db      	lsls	r3, r3, #3
 8062d98:	3332      	adds	r3, #50	; 0x32
 8062d9a:	4a67      	ldr	r2, [pc, #412]	; (8062f38 <UART_SetConfig+0x38c>)
 8062d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8062da0:	095b      	lsrs	r3, r3, #5
 8062da2:	f003 0207 	and.w	r2, r3, #7
 8062da6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8062da8:	681b      	ldr	r3, [r3, #0]
 8062daa:	4432      	add	r2, r6
 8062dac:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8062dae:	e0b9      	b.n	8062f24 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8062db0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8062db2:	461c      	mov	r4, r3
 8062db4:	f04f 0500 	mov.w	r5, #0
 8062db8:	4622      	mov	r2, r4
 8062dba:	462b      	mov	r3, r5
 8062dbc:	1891      	adds	r1, r2, r2
 8062dbe:	6139      	str	r1, [r7, #16]
 8062dc0:	415b      	adcs	r3, r3
 8062dc2:	617b      	str	r3, [r7, #20]
 8062dc4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8062dc8:	1912      	adds	r2, r2, r4
 8062dca:	eb45 0303 	adc.w	r3, r5, r3
 8062dce:	f04f 0000 	mov.w	r0, #0
 8062dd2:	f04f 0100 	mov.w	r1, #0
 8062dd6:	00d9      	lsls	r1, r3, #3
 8062dd8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8062ddc:	00d0      	lsls	r0, r2, #3
 8062dde:	4602      	mov	r2, r0
 8062de0:	460b      	mov	r3, r1
 8062de2:	eb12 0804 	adds.w	r8, r2, r4
 8062de6:	eb43 0905 	adc.w	r9, r3, r5
 8062dea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8062dec:	685b      	ldr	r3, [r3, #4]
 8062dee:	4618      	mov	r0, r3
 8062df0:	f04f 0100 	mov.w	r1, #0
 8062df4:	f04f 0200 	mov.w	r2, #0
 8062df8:	f04f 0300 	mov.w	r3, #0
 8062dfc:	008b      	lsls	r3, r1, #2
 8062dfe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8062e02:	0082      	lsls	r2, r0, #2
 8062e04:	4640      	mov	r0, r8
 8062e06:	4649      	mov	r1, r9
 8062e08:	f7fd f9de 	bl	80601c8 <__aeabi_uldivmod>
 8062e0c:	4602      	mov	r2, r0
 8062e0e:	460b      	mov	r3, r1
 8062e10:	4b49      	ldr	r3, [pc, #292]	; (8062f38 <UART_SetConfig+0x38c>)
 8062e12:	fba3 2302 	umull	r2, r3, r3, r2
 8062e16:	095b      	lsrs	r3, r3, #5
 8062e18:	011e      	lsls	r6, r3, #4
 8062e1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8062e1c:	4618      	mov	r0, r3
 8062e1e:	f04f 0100 	mov.w	r1, #0
 8062e22:	4602      	mov	r2, r0
 8062e24:	460b      	mov	r3, r1
 8062e26:	1894      	adds	r4, r2, r2
 8062e28:	60bc      	str	r4, [r7, #8]
 8062e2a:	415b      	adcs	r3, r3
 8062e2c:	60fb      	str	r3, [r7, #12]
 8062e2e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8062e32:	1812      	adds	r2, r2, r0
 8062e34:	eb41 0303 	adc.w	r3, r1, r3
 8062e38:	f04f 0400 	mov.w	r4, #0
 8062e3c:	f04f 0500 	mov.w	r5, #0
 8062e40:	00dd      	lsls	r5, r3, #3
 8062e42:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8062e46:	00d4      	lsls	r4, r2, #3
 8062e48:	4622      	mov	r2, r4
 8062e4a:	462b      	mov	r3, r5
 8062e4c:	1814      	adds	r4, r2, r0
 8062e4e:	64bc      	str	r4, [r7, #72]	; 0x48
 8062e50:	414b      	adcs	r3, r1
 8062e52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8062e54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8062e56:	685b      	ldr	r3, [r3, #4]
 8062e58:	4618      	mov	r0, r3
 8062e5a:	f04f 0100 	mov.w	r1, #0
 8062e5e:	f04f 0200 	mov.w	r2, #0
 8062e62:	f04f 0300 	mov.w	r3, #0
 8062e66:	008b      	lsls	r3, r1, #2
 8062e68:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8062e6c:	0082      	lsls	r2, r0, #2
 8062e6e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8062e72:	f7fd f9a9 	bl	80601c8 <__aeabi_uldivmod>
 8062e76:	4602      	mov	r2, r0
 8062e78:	460b      	mov	r3, r1
 8062e7a:	4b2f      	ldr	r3, [pc, #188]	; (8062f38 <UART_SetConfig+0x38c>)
 8062e7c:	fba3 1302 	umull	r1, r3, r3, r2
 8062e80:	095b      	lsrs	r3, r3, #5
 8062e82:	2164      	movs	r1, #100	; 0x64
 8062e84:	fb01 f303 	mul.w	r3, r1, r3
 8062e88:	1ad3      	subs	r3, r2, r3
 8062e8a:	011b      	lsls	r3, r3, #4
 8062e8c:	3332      	adds	r3, #50	; 0x32
 8062e8e:	4a2a      	ldr	r2, [pc, #168]	; (8062f38 <UART_SetConfig+0x38c>)
 8062e90:	fba2 2303 	umull	r2, r3, r2, r3
 8062e94:	095b      	lsrs	r3, r3, #5
 8062e96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8062e9a:	441e      	add	r6, r3
 8062e9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8062e9e:	4618      	mov	r0, r3
 8062ea0:	f04f 0100 	mov.w	r1, #0
 8062ea4:	4602      	mov	r2, r0
 8062ea6:	460b      	mov	r3, r1
 8062ea8:	1894      	adds	r4, r2, r2
 8062eaa:	603c      	str	r4, [r7, #0]
 8062eac:	415b      	adcs	r3, r3
 8062eae:	607b      	str	r3, [r7, #4]
 8062eb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8062eb4:	1812      	adds	r2, r2, r0
 8062eb6:	eb41 0303 	adc.w	r3, r1, r3
 8062eba:	f04f 0400 	mov.w	r4, #0
 8062ebe:	f04f 0500 	mov.w	r5, #0
 8062ec2:	00dd      	lsls	r5, r3, #3
 8062ec4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8062ec8:	00d4      	lsls	r4, r2, #3
 8062eca:	4622      	mov	r2, r4
 8062ecc:	462b      	mov	r3, r5
 8062ece:	eb12 0a00 	adds.w	sl, r2, r0
 8062ed2:	eb43 0b01 	adc.w	fp, r3, r1
 8062ed6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8062ed8:	685b      	ldr	r3, [r3, #4]
 8062eda:	4618      	mov	r0, r3
 8062edc:	f04f 0100 	mov.w	r1, #0
 8062ee0:	f04f 0200 	mov.w	r2, #0
 8062ee4:	f04f 0300 	mov.w	r3, #0
 8062ee8:	008b      	lsls	r3, r1, #2
 8062eea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8062eee:	0082      	lsls	r2, r0, #2
 8062ef0:	4650      	mov	r0, sl
 8062ef2:	4659      	mov	r1, fp
 8062ef4:	f7fd f968 	bl	80601c8 <__aeabi_uldivmod>
 8062ef8:	4602      	mov	r2, r0
 8062efa:	460b      	mov	r3, r1
 8062efc:	4b0e      	ldr	r3, [pc, #56]	; (8062f38 <UART_SetConfig+0x38c>)
 8062efe:	fba3 1302 	umull	r1, r3, r3, r2
 8062f02:	095b      	lsrs	r3, r3, #5
 8062f04:	2164      	movs	r1, #100	; 0x64
 8062f06:	fb01 f303 	mul.w	r3, r1, r3
 8062f0a:	1ad3      	subs	r3, r2, r3
 8062f0c:	011b      	lsls	r3, r3, #4
 8062f0e:	3332      	adds	r3, #50	; 0x32
 8062f10:	4a09      	ldr	r2, [pc, #36]	; (8062f38 <UART_SetConfig+0x38c>)
 8062f12:	fba2 2303 	umull	r2, r3, r2, r3
 8062f16:	095b      	lsrs	r3, r3, #5
 8062f18:	f003 020f 	and.w	r2, r3, #15
 8062f1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8062f1e:	681b      	ldr	r3, [r3, #0]
 8062f20:	4432      	add	r2, r6
 8062f22:	609a      	str	r2, [r3, #8]
}
 8062f24:	bf00      	nop
 8062f26:	377c      	adds	r7, #124	; 0x7c
 8062f28:	46bd      	mov	sp, r7
 8062f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8062f2e:	bf00      	nop
 8062f30:	40011000 	.word	0x40011000
 8062f34:	40011400 	.word	0x40011400
 8062f38:	51eb851f 	.word	0x51eb851f

08062f3c <__libc_init_array>:
 8062f3c:	b570      	push	{r4, r5, r6, lr}
 8062f3e:	4d0d      	ldr	r5, [pc, #52]	; (8062f74 <__libc_init_array+0x38>)
 8062f40:	4c0d      	ldr	r4, [pc, #52]	; (8062f78 <__libc_init_array+0x3c>)
 8062f42:	1b64      	subs	r4, r4, r5
 8062f44:	10a4      	asrs	r4, r4, #2
 8062f46:	2600      	movs	r6, #0
 8062f48:	42a6      	cmp	r6, r4
 8062f4a:	d109      	bne.n	8062f60 <__libc_init_array+0x24>
 8062f4c:	4d0b      	ldr	r5, [pc, #44]	; (8062f7c <__libc_init_array+0x40>)
 8062f4e:	4c0c      	ldr	r4, [pc, #48]	; (8062f80 <__libc_init_array+0x44>)
 8062f50:	f000 f832 	bl	8062fb8 <_init>
 8062f54:	1b64      	subs	r4, r4, r5
 8062f56:	10a4      	asrs	r4, r4, #2
 8062f58:	2600      	movs	r6, #0
 8062f5a:	42a6      	cmp	r6, r4
 8062f5c:	d105      	bne.n	8062f6a <__libc_init_array+0x2e>
 8062f5e:	bd70      	pop	{r4, r5, r6, pc}
 8062f60:	f855 3b04 	ldr.w	r3, [r5], #4
 8062f64:	4798      	blx	r3
 8062f66:	3601      	adds	r6, #1
 8062f68:	e7ee      	b.n	8062f48 <__libc_init_array+0xc>
 8062f6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8062f6e:	4798      	blx	r3
 8062f70:	3601      	adds	r6, #1
 8062f72:	e7f2      	b.n	8062f5a <__libc_init_array+0x1e>
 8062f74:	08062ff4 	.word	0x08062ff4
 8062f78:	08062ff4 	.word	0x08062ff4
 8062f7c:	08062ff4 	.word	0x08062ff4
 8062f80:	08062ff8 	.word	0x08062ff8

08062f84 <memset>:
 8062f84:	4402      	add	r2, r0
 8062f86:	4603      	mov	r3, r0
 8062f88:	4293      	cmp	r3, r2
 8062f8a:	d100      	bne.n	8062f8e <memset+0xa>
 8062f8c:	4770      	bx	lr
 8062f8e:	f803 1b01 	strb.w	r1, [r3], #1
 8062f92:	e7f9      	b.n	8062f88 <memset+0x4>

08062f94 <strncmp>:
 8062f94:	b510      	push	{r4, lr}
 8062f96:	b16a      	cbz	r2, 8062fb4 <strncmp+0x20>
 8062f98:	3901      	subs	r1, #1
 8062f9a:	1884      	adds	r4, r0, r2
 8062f9c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8062fa0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8062fa4:	4293      	cmp	r3, r2
 8062fa6:	d103      	bne.n	8062fb0 <strncmp+0x1c>
 8062fa8:	42a0      	cmp	r0, r4
 8062faa:	d001      	beq.n	8062fb0 <strncmp+0x1c>
 8062fac:	2b00      	cmp	r3, #0
 8062fae:	d1f5      	bne.n	8062f9c <strncmp+0x8>
 8062fb0:	1a98      	subs	r0, r3, r2
 8062fb2:	bd10      	pop	{r4, pc}
 8062fb4:	4610      	mov	r0, r2
 8062fb6:	e7fc      	b.n	8062fb2 <strncmp+0x1e>

08062fb8 <_init>:
 8062fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8062fba:	bf00      	nop
 8062fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8062fbe:	bc08      	pop	{r3}
 8062fc0:	469e      	mov	lr, r3
 8062fc2:	4770      	bx	lr

08062fc4 <_fini>:
 8062fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8062fc6:	bf00      	nop
 8062fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8062fca:	bc08      	pop	{r3}
 8062fcc:	469e      	mov	lr, r3
 8062fce:	4770      	bx	lr
